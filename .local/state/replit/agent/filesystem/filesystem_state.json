{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Laboratory Information System (LIS)\n\n## Overview\n\nThis is a comprehensive Laboratory Information System (LIS) built as a full-stack web application designed for modern medical laboratories. The system provides complete workflow management from patient registration through sample processing, test result management, quality control, and financial reporting. It features a React-based frontend with a Node.js/Express backend, utilizing PostgreSQL for data persistence and real-time WebSocket communications for live updates.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React 19** with TypeScript for type safety and modern component patterns\n- **Vite** as the build tool for fast development and optimized production builds\n- **Wouter** for lightweight client-side routing without the overhead of React Router\n- **TanStack Query** for server state management, caching, and data synchronization\n- **Zustand** for client-side state management with persistence capabilities\n- **Tailwind CSS** with CSS variables for theming and responsive design\n- **Shadcn/ui** component library built on Radix UI primitives for accessibility\n\n### Backend Architecture\n- **Express.js** server with TypeScript for robust API development\n- **RESTful API design** with proper HTTP methods and status codes\n- **WebSocket integration** using 'ws' library for real-time notifications and updates\n- **Session-based authentication** with middleware for route protection\n- **Modular route organization** separating concerns by domain (auth, patients, samples, etc.)\n\n### Database Layer\n- **Drizzle ORM** with PostgreSQL for type-safe database operations\n- **Neon serverless PostgreSQL** for cloud-native database hosting\n- **Schema-first approach** with shared TypeScript types between client and server\n- **Migration system** using Drizzle Kit for database versioning\n\n### State Management Strategy\n- **Server state**: TanStack Query for API data with automatic caching and invalidation\n- **Client state**: Zustand stores for UI state, user authentication, and temporary data\n- **Persistent state**: LocalStorage integration for user preferences and session data\n- **Real-time updates**: WebSocket integration with state stores for live data synchronization\n\n### Authentication & Authorization\n- **Session-based authentication** with secure cookie handling\n- **Role-based access control** supporting multiple user types (admin, technician, receptionist, doctor, lab_manager)\n- **Route protection** at both frontend and backend levels\n- **Password hashing** using bcrypt for secure credential storage\n\n### Component Architecture\n- **Compound component patterns** for complex UI elements\n- **Custom hooks** for business logic abstraction and reusability\n- **Shared TypeScript interfaces** between frontend and backend\n- **Responsive design** with mobile-first approach using Tailwind breakpoints\n\n## External Dependencies\n\n### Core Infrastructure\n- **Neon Database**: Serverless PostgreSQL hosting with automatic scaling\n- **WebSocket Server**: Real-time communication for live updates and notifications\n\n### Development Tools\n- **Vite**: Modern build tool with HMR for fast development cycles\n- **TypeScript**: Static type checking across the entire application stack\n- **Drizzle Kit**: Database migration and schema management tools\n- **ESBuild**: Fast JavaScript bundler for production builds\n\n### UI & Styling\n- **Radix UI**: Accessible component primitives for complex UI elements\n- **Tailwind CSS**: Utility-first CSS framework with custom design system\n- **Lucide React**: Consistent icon library with React components\n- **Recharts**: React charting library for data visualization\n\n### Authentication & Security\n- **bcryptjs**: Password hashing for secure user credential storage\n- **connect-pg-simple**: PostgreSQL session store for Express sessions\n\n### Form Management & Validation\n- **React Hook Form**: Performant form library with minimal re-renders\n- **Zod**: TypeScript-first schema validation library\n- **@hookform/resolvers**: Integration between React Hook Form and Zod\n\n### Data Fetching & State\n- **TanStack Query**: Powerful data synchronization for React applications\n- **Zustand**: Lightweight state management with TypeScript support\n\n### Utilities & Helpers\n- **date-fns**: Modern date utility library for formatting and manipulation\n- **clsx**: Utility for constructing className strings conditionally\n- **nanoid**: URL-safe unique string ID generator","size_bytes":4540},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/replit_latest_clean_prompt_1754068437367.md":{"content":"# Ultimate Replit LIS Prompt - Latest Libraries & Clean Architecture\n\n## Master Development Prompt\n\n```\nBuild a state-of-the-art Laboratory Information System (LIS) in Replit using the absolute latest versions of all libraries and frameworks. Focus on clean, maintainable, and easily upgradeable code architecture.\n\n### CRITICAL REQUIREMENTS:\n\n#### 1. Use ONLY the Latest Stable Versions (as of 2025):\n- **Next.js 15.1.0** (latest stable with React 19 support)\n- **React 19.0.0** (latest with concurrent features)\n- **TypeScript 5.7.0** (latest with newest type features)\n- **Tailwind CSS 4.0.0** (latest with native CSS support)\n- **Prisma 6.0.0** (latest ORM version)\n- **NextAuth.js 5.0.0** (Auth.js v5 - latest stable)\n- **React Hook Form 7.54.0** (latest form library)\n- **Zod 3.24.0** (latest validation library)\n- **Zustand 5.0.0** (latest state management)\n- **Shadcn/ui** (latest components with Radix UI v2)\n\n#### 2. Modern Development Standards (2025):\n- **ESLint 9.0** with latest flat config\n- **Prettier 3.4** with latest formatting rules\n- **TypeScript strict mode** with all strict flags enabled\n- **Biome** for ultra-fast linting and formatting\n- **Turbopack** for fastest bundling (Next.js 15 default)\n- **Server Components** as default (React 19 App Router)\n- **Concurrent React** features throughout\n- **Modern CSS** with Container Queries and CSS Grid\n\n### ARCHITECTURE PRINCIPLES:\n\n#### 1. Clean Code Architecture:\n```typescript\n// Use this exact folder structure for maximum maintainability\napp/\n├── (auth)/                 # Route groups for organization\n│   ├── login/\n│   └── register/\n├── (dashboard)/            # Protected dashboard routes\n│   ├── samples/\n│   ├── results/\n│   ├── financial/\n│   ├── users/\n│   └── reports/\n├── api/                    # API routes with proper RESTful structure\n│   ├── auth/\n│   ├── samples/\n│   └── users/\n├── globals.css\n├── layout.tsx              # Root layout with providers\n└── page.tsx                # Landing page\n\ncomponents/\n├── ui/                     # Shadcn/ui base components\n├── forms/                  # Reusable form components\n├── tables/                 # Data table components\n├── charts/                 # Analytics components\n└── providers/              # Context providers\n\nlib/\n├── auth.ts                 # Auth.js v5 configuration\n├── db.ts                   # Prisma client with connection pooling\n├── validations/            # Zod schemas organized by domain\n├── utils.ts                # Utility functions\n├── constants.ts            # App constants\n└── types.ts                # Global TypeScript types\n\nhooks/                      # Custom React hooks\n├── use-samples.ts\n├── use-users.ts\n└── use-auth.ts\n\nstore/                      # Zustand stores\n├── auth-store.ts\n├── samples-store.ts\n└── ui-store.ts\n```\n\n#### 2. Latest Package.json with Exact Versions:\n```json\n{\n  \"name\": \"modern-lis-system\",\n  \"version\": \"1.0.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev --turbo --hostname 0.0.0.0 --port 3000\",\n    \"build\": \"prisma generate && next build\",\n    \"start\": \"next start\",\n    \"lint\": \"biome check .\",\n    \"lint:fix\": \"biome check --write .\",\n    \"format\": \"biome format --write .\",\n    \"db:push\": \"prisma db push\",\n    \"db:studio\": \"prisma studio --hostname 0.0.0.0 --port 5555\",\n    \"db:seed\": \"tsx prisma/seed.ts\",\n    \"type-check\": \"tsc --noEmit\"\n  },\n  \"dependencies\": {\n    \"next\": \"15.1.0\",\n    \"react\": \"19.0.0\",\n    \"react-dom\": \"19.0.0\",\n    \"typescript\": \"5.7.0\",\n    \"@auth/prisma-adapter\": \"2.7.2\",\n    \"next-auth\": \"5.0.0-beta.25\",\n    \"@prisma/client\": \"6.1.0\",\n    \"prisma\": \"6.1.0\",\n    \"tailwindcss\": \"4.0.0\",\n    \"@tailwindcss/forms\": \"0.5.9\",\n    \"@tailwindcss/typography\": \"0.5.15\",\n    \"react-hook-form\": \"7.54.0\",\n    \"@hookform/resolvers\": \"3.9.1\",\n    \"zod\": \"3.24.1\",\n    \"zustand\": \"5.0.1\",\n    \"@radix-ui/react-dialog\": \"1.1.2\",\n    \"@radix-ui/react-dropdown-menu\": \"2.1.2\",\n    \"@radix-ui/react-select\": \"2.1.2\",\n    \"@radix-ui/react-tabs\": \"1.1.1\",\n    \"@radix-ui/react-toast\": \"1.2.2\",\n    \"lucide-react\": \"0.468.0\",\n    \"class-variance-authority\": \"0.7.1\",\n    \"clsx\": \"2.1.1\",\n    \"tailwind-merge\": \"2.5.4\",\n    \"date-fns\": \"4.1.0\",\n    \"recharts\": \"2.13.3\",\n    \"socket.io\": \"4.8.1\",\n    \"socket.io-client\": \"4.8.1\",\n    \"@tanstack/react-query\": \"5.62.2\",\n    \"@tanstack/react-table\": \"8.21.0\",\n    \"jspdf\": \"2.5.2\",\n    \"xlsx\": \"0.18.5\",\n    \"bcryptjs\": \"2.4.3\",\n    \"nanoid\": \"5.0.9\"\n  },\n  \"devDependencies\": {\n    \"@biomejs/biome\": \"1.9.4\",\n    \"@types/node\": \"22.10.1\",\n    \"@types/react\": \"19.0.1\",\n    \"@types/react-dom\": \"19.0.2\",\n    \"@types/bcryptjs\": \"2.4.6\",\n    \"tsx\": \"4.19.2\",\n    \"autoprefixer\": \"10.4.20\",\n    \"postcss\": \"8.5.1\"\n  },\n  \"engines\": {\n    \"node\": \">=20.0.0\"\n  }\n}\n```\n\n#### 3. Modern TypeScript Configuration:\n```json\n// tsconfig.json - Latest strict configuration\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2025\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"es2025\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"noEmit\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"bundler\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\",\n    \"incremental\": true,\n    \"plugins\": [{ \"name\": \"next\" }],\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./*\"],\n      \"@/components/*\": [\"./components/*\"],\n      \"@/lib/*\": [\"./lib/*\"],\n      \"@/hooks/*\": [\"./hooks/*\"],\n      \"@/store/*\": [\"./store/*\"],\n      \"@/types/*\": [\"./types/*\"]\n    },\n    \"strictNullChecks\": true,\n    \"strictFunctionTypes\": true,\n    \"strictBindCallApply\": true,\n    \"strictPropertyInitialization\": true,\n    \"noImplicitAny\": true,\n    \"noImplicitReturns\": true,\n    \"noImplicitThis\": true,\n    \"noUncheckedIndexedAccess\": true,\n    \"exactOptionalPropertyTypes\": true\n  },\n  \"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\", \".next/types/**/*.ts\"],\n  \"exclude\": [\"node_modules\"]\n}\n```\n\n#### 4. Latest Biome Configuration:\n```json\n// biome.json - Ultra-fast linting and formatting\n{\n  \"vcs\": { \"enabled\": true, \"clientKind\": \"git\", \"useIgnoreFile\": true },\n  \"files\": { \"ignoreUnknown\": false, \"ignore\": [] },\n  \"formatter\": {\n    \"enabled\": true,\n    \"useEditorconfig\": true,\n    \"formatWithErrors\": false,\n    \"indentStyle\": \"space\",\n    \"indentWidth\": 2,\n    \"lineEnding\": \"lf\",\n    \"lineWidth\": 100,\n    \"attributePosition\": \"auto\"\n  },\n  \"organizeImports\": { \"enabled\": true },\n  \"linter\": {\n    \"enabled\": true,\n    \"rules\": {\n      \"recommended\": true,\n      \"correctness\": { \"noUnusedVariables\": \"error\" },\n      \"style\": { \"useImportType\": \"error\" },\n      \"suspicious\": { \"noExplicitAny\": \"warn\" }\n    }\n  },\n  \"javascript\": {\n    \"formatter\": {\n      \"jsxQuoteStyle\": \"double\",\n      \"quoteProperties\": \"asNeeded\",\n      \"trailingCommas\": \"es5\",\n      \"semicolons\": \"asNeeded\",\n      \"arrowParentheses\": \"always\",\n      \"bracketSpacing\": true,\n      \"bracketSameLine\": false,\n      \"quoteStyle\": \"double\",\n      \"attributePosition\": \"auto\"\n    }\n  },\n  \"overrides\": [\n    { \"include\": [\"*.ts\", \"*.tsx\"], \"linter\": { \"rules\": { \"style\": { \"useImportType\": \"error\" } } } }\n  ]\n}\n```\n\n### CODE QUALITY STANDARDS:\n\n#### 1. Clean Architecture Patterns:\n```typescript\n// Example: Clean service layer\n// lib/services/sample-service.ts\nimport type { Sample, CreateSampleInput, UpdateSampleInput } from '@/types/sample'\nimport { db } from '@/lib/db'\nimport { sampleSchema, updateSampleSchema } from '@/lib/validations/sample'\n\nexport class SampleService {\n  static async create(input: CreateSampleInput): Promise<Sample> {\n    const validated = sampleSchema.parse(input)\n    return await db.sample.create({ data: validated })\n  }\n\n  static async update(id: string, input: UpdateSampleInput): Promise<Sample> {\n    const validated = updateSampleSchema.parse(input)\n    return await db.sample.update({ where: { id }, data: validated })\n  }\n\n  static async findMany(filters?: SampleFilters): Promise<Sample[]> {\n    return await db.sample.findMany({\n      where: this.buildWhereClause(filters),\n      include: { patient: true, results: true }\n    })\n  }\n\n  private static buildWhereClause(filters?: SampleFilters) {\n    // Clean filter building logic\n  }\n}\n```\n\n#### 2. Type-Safe API Routes:\n```typescript\n// app/api/samples/route.ts - Next.js 15 App Router\nimport type { NextRequest } from 'next/server'\nimport { NextResponse } from 'next/server'\nimport { auth } from '@/lib/auth'\nimport { SampleService } from '@/lib/services/sample-service'\nimport { createSampleSchema } from '@/lib/validations/sample'\n\nexport async function GET(request: NextRequest) {\n  try {\n    const session = await auth()\n    if (!session) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n\n    const { searchParams } = new URL(request.url)\n    const filters = Object.fromEntries(searchParams)\n    \n    const samples = await SampleService.findMany(filters)\n    return NextResponse.json({ data: samples })\n  } catch (error) {\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const session = await auth()\n    if (!session) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n\n    const body = await request.json()\n    const sample = await SampleService.create(body)\n    \n    return NextResponse.json({ data: sample }, { status: 201 })\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return NextResponse.json({ error: error.errors }, { status: 400 })\n    }\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })\n  }\n}\n```\n\n#### 3. Modern React 19 Components:\n```typescript\n// components/samples/sample-form.tsx - React 19 with Server Actions\n'use client'\n\nimport { useActionState } from 'react'\nimport { createSample } from '@/app/actions/samples'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\n\ninterface SampleFormProps {\n  onSuccess?: () => void\n}\n\nexport function SampleForm({ onSuccess }: SampleFormProps) {\n  const [state, formAction, isPending] = useActionState(createSample, null)\n\n  return (\n    <form action={formAction} className=\"space-y-4\">\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"patientName\">Patient Name</Label>\n          <Input\n            id=\"patientName\"\n            name=\"patientName\"\n            required\n            disabled={isPending}\n          />\n        </div>\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"testType\">Test Type</Label>\n          <Input\n            id=\"testType\"\n            name=\"testType\"\n            required\n            disabled={isPending}\n          />\n        </div>\n      </div>\n      \n      {state?.error && (\n        <div className=\"text-sm text-red-600\">{state.error}</div>\n      )}\n      \n      <Button type=\"submit\" disabled={isPending}>\n        {isPending ? 'Creating...' : 'Create Sample'}\n      </Button>\n    </form>\n  )\n}\n```\n\n### REPLIT OPTIMIZATION:\n\n#### 1. Latest Replit Configuration:\n```toml\n# .replit - Latest Replit config\nrun = \"npm run dev\"\nmodules = [\"nodejs-20\", \"web\"]\nhidden = [\".config\", \"tsconfig.tsbuildinfo\", \".next\"]\n\n[gitHubImport]\nrequiredFiles = [\".replit\", \"replit.nix\"]\n\n[nix]\nchannel = \"stable-24_05\"\n\n[unitTest]\nlanguage = \"nodejs\"\n\n[deployment]\nrun = [\"npm\", \"run\", \"build\"]\ndeploymentTarget = \"static\"\npublicDir = \".next\"\n\n[env]\nNODE_ENV = \"development\"\n```\n\n#### 2. Performance Optimizations:\n```javascript\n// next.config.js - Latest Next.js 15 config\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    turbo: {\n      rules: {\n        '*.svg': {\n          loaders: ['@svgr/webpack'],\n          as: '*.js',\n        },\n      },\n    },\n    ppr: true, // Partial Prerendering\n    reactCompiler: true, // React 19 compiler\n  },\n  typescript: {\n    ignoreBuildErrors: false,\n  },\n  eslint: {\n    ignoreDuringBuilds: false,\n  },\n  images: {\n    formats: ['image/avif', 'image/webp'],\n  },\n}\n\nexport default nextConfig\n```\n\n### DEPLOYMENT REQUIREMENTS:\n\n1. **Zero-config deployment** - Works immediately in Replit\n2. **Environment variables** - Proper secrets management\n3. **Database migrations** - Automatic schema updates\n4. **Hot reloading** - Instant development feedback\n5. **Error boundaries** - Graceful error handling\n6. **Loading states** - Proper UX during async operations\n7. **TypeScript strict mode** - Catch errors at compile time\n8. **Modern bundling** - Turbopack for fastest builds\n\n### SUCCESS CRITERIA:\n\nThe code must be:\n- ✅ **Zero build errors** with strict TypeScript\n- ✅ **Zero linting warnings** with Biome\n- ✅ **Fully type-safe** end-to-end\n- ✅ **Easily maintainable** with clean architecture\n- ✅ **Instantly upgradeable** with latest dependencies\n- ✅ **Production-ready** with proper error handling\n- ✅ **Replit-optimized** for seamless deployment\n- ✅ **Modern standards** following 2025 best practices\n\nBuild this as the most modern, clean, and maintainable LIS system possible. Every component should be easily editable, every function should be pure and testable, and every piece of code should follow the latest JavaScript/TypeScript/React standards.\n\nUse the absolute latest stable versions of all libraries and implement cutting-edge features like React 19 concurrent rendering, Next.js 15 Turbopack, and modern CSS features.\n```\n\n## Key Improvements in This Prompt:\n\n### 🚀 **Latest Technology Stack (2025)**\n- **Next.js 15.1.0** with Turbopack and React 19\n- **TypeScript 5.7.0** with strictest possible configuration\n- **Tailwind CSS 4.0.0** with native CSS support\n- **Auth.js v5** (NextAuth.js 5.0) - completely rewritten\n- **Biome** instead of ESLint/Prettier for ultra-fast linting\n\n### 🧹 **Clean Architecture**\n- **Service Layer Pattern** for business logic separation\n- **Type-Safe API Routes** with proper error handling\n- **Clean Component Structure** with React 19 features\n- **Modular File Organization** for easy maintenance\n\n### ⚡ **Performance Optimized**\n- **Turbopack** for fastest possible builds\n- **React 19 Concurrent Features** for better UX\n- **Server Components** by default\n- **Modern CSS** with Container Queries\n\n### 🔧 **Easy Maintenance & Upgrades**\n- **Exact version pinning** for reproducible builds\n- **Strict TypeScript** catches errors early\n- **Clean separation of concerns**\n- **Comprehensive error handling**\n- **Modern tooling** for best developer experience\n\nThis prompt will give you the most modern, maintainable, and easily upgradeable Laboratory Information System possible using the latest 2025 web development standards!","size_bytes":14919},"scripts/create-test-user.ts":{"content":"\nimport { storage } from \"../server/storage\";\n\nasync function createTestUser() {\n  try {\n    const testUser = {\n      username: \"admin\",\n      email: \"admin@lab.com\",\n      password: \"admin123\",\n      firstName: \"Admin\",\n      lastName: \"User\",\n      role: \"admin\",\n      isActive: true\n    };\n\n    const user = await storage.createUser(testUser);\n    console.log(\"Test user created successfully:\", {\n      id: user.id,\n      username: user.username,\n      email: user.email,\n      role: user.role\n    });\n  } catch (error) {\n    console.error(\"Error creating test user:\", error);\n  }\n  process.exit(0);\n}\n\ncreateTestUser();\n","size_bytes":625},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertPatientSchema, insertSampleSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n  \n  // Setup WebSocket server for real-time updates\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  \n  const clients = new Set<WebSocket>();\n  \n  wss.on('connection', (ws) => {\n    clients.add(ws);\n    console.log('Client connected to WebSocket');\n    \n    ws.on('close', () => {\n      clients.delete(ws);\n      console.log('Client disconnected from WebSocket');\n    });\n  });\n\n  // Broadcast function for real-time updates\n  const broadcast = (data: any) => {\n    clients.forEach(client => {\n      if (client.readyState === WebSocket.OPEN) {\n        client.send(JSON.stringify(data));\n      }\n    });\n  };\n\n  // Authentication routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      if (!username || !password) {\n        return res.status(400).json({ error: \"Username and password required\" });\n      }\n\n      const user = await storage.validateUserPassword(username, password);\n      if (!user) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n\n      // Update last login\n      await storage.updateUser(user.id, { lastLogin: new Date() });\n\n      // In a real app, you'd create a JWT token here\n      res.json({ \n        user: { \n          id: user.id, \n          username: user.username, \n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          role: user.role \n        } \n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByUsername(userData.username) || \n                          await storage.getUserByEmail(userData.email);\n      \n      if (existingUser) {\n        return res.status(409).json({ error: \"User already exists\" });\n      }\n\n      const user = await storage.createUser(userData);\n      \n      res.status(201).json({ \n        user: { \n          id: user.id, \n          username: user.username, \n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          role: user.role \n        } \n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Dashboard routes\n  app.get(\"/api/dashboard/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Dashboard stats error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/dashboard/recent-samples\", async (req, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 10;\n      const samples = await storage.getRecentSamples(limit);\n      res.json(samples);\n    } catch (error) {\n      console.error(\"Recent samples error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Patient routes\n  app.get(\"/api/patients\", async (req, res) => {\n    try {\n      const { search } = req.query;\n      \n      if (search) {\n        const patients = await storage.searchPatients(search as string);\n        res.json(patients);\n      } else {\n        const patients = await storage.getRecentPatients(50);\n        res.json(patients);\n      }\n    } catch (error) {\n      console.error(\"Get patients error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/patients/:id\", async (req, res) => {\n    try {\n      const patient = await storage.getPatient(req.params.id);\n      if (!patient) {\n        return res.status(404).json({ error: \"Patient not found\" });\n      }\n      res.json(patient);\n    } catch (error) {\n      console.error(\"Get patient error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/patients\", async (req, res) => {\n    try {\n      const patientData = insertPatientSchema.parse(req.body);\n      \n      // Check if patient ID already exists\n      const existing = await storage.getPatientByPatientId(patientData.patientId);\n      if (existing) {\n        return res.status(409).json({ error: \"Patient ID already exists\" });\n      }\n\n      const patient = await storage.createPatient(patientData);\n      \n      // Broadcast new patient registration\n      broadcast({ type: 'patient_registered', data: patient });\n      \n      res.status(201).json(patient);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      console.error(\"Create patient error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Sample routes\n  app.get(\"/api/samples\", async (req, res) => {\n    try {\n      const { status } = req.query;\n      \n      if (status) {\n        const samples = await storage.getSamplesByStatus(status as string);\n        res.json(samples);\n      } else {\n        const samples = await storage.getRecentSamples(50);\n        res.json(samples);\n      }\n    } catch (error) {\n      console.error(\"Get samples error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/samples/:id\", async (req, res) => {\n    try {\n      const sample = await storage.getSample(req.params.id);\n      if (!sample) {\n        return res.status(404).json({ error: \"Sample not found\" });\n      }\n      res.json(sample);\n    } catch (error) {\n      console.error(\"Get sample error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/samples\", async (req, res) => {\n    try {\n      const sampleData = insertSampleSchema.parse(req.body);\n      \n      // Check if sample ID already exists\n      const existing = await storage.getSampleBySampleId(sampleData.sampleId);\n      if (existing) {\n        return res.status(409).json({ error: \"Sample ID already exists\" });\n      }\n\n      const sample = await storage.createSample(sampleData);\n      \n      // Broadcast new sample\n      broadcast({ type: 'sample_created', data: sample });\n      \n      res.status(201).json(sample);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      console.error(\"Create sample error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.patch(\"/api/samples/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      \n      const sample = await storage.updateSample(id, updates);\n      \n      // Broadcast sample update\n      broadcast({ type: 'sample_updated', data: sample });\n      \n      res.json(sample);\n    } catch (error) {\n      console.error(\"Update sample error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Test types routes\n  app.get(\"/api/test-types\", async (req, res) => {\n    try {\n      const testTypes = await storage.getTestTypes();\n      res.json(testTypes);\n    } catch (error) {\n      console.error(\"Get test types error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // User management routes\n  app.get(\"/api/users\", async (req, res) => {\n    try {\n      // This would need proper authorization in a real app\n      const users = await storage.getRecentPatients(100); // Placeholder\n      res.json(users);\n    } catch (error) {\n      console.error(\"Get users error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  return httpServer;\n}\n","size_bytes":8402},"server/storage.ts":{"content":"import { \n  users, patients, samples, testRequests, testResults, testTypes, \n  qualityControls, outboundSamples, worklists, financialRecords,\n  type User, type InsertUser, type Patient, type InsertPatient,\n  type Sample, type InsertSample, type TestRequest, type InsertTestRequest,\n  type TestResult, type InsertTestResult, type TestType, type InsertTestType,\n  type QualityControl, type InsertQualityControl\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, asc, like, count, sum, avg, gte } from \"drizzle-orm\";\nimport bcrypt from \"bcryptjs\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User>;\n  validateUserPassword(username: string, password: string): Promise<User | null>;\n  \n  // Patient operations\n  getPatient(id: string): Promise<Patient | undefined>;\n  getPatientByPatientId(patientId: string): Promise<Patient | undefined>;\n  createPatient(patient: InsertPatient): Promise<Patient>;\n  updatePatient(id: string, patient: Partial<InsertPatient>): Promise<Patient>;\n  searchPatients(query: string): Promise<Patient[]>;\n  getRecentPatients(limit: number): Promise<Patient[]>;\n  \n  // Sample operations\n  getSample(id: string): Promise<Sample | undefined>;\n  getSampleBySampleId(sampleId: string): Promise<Sample | undefined>;\n  createSample(sample: InsertSample): Promise<Sample>;\n  updateSample(id: string, sample: Partial<InsertSample>): Promise<Sample>;\n  getRecentSamples(limit: number): Promise<Array<Sample & { patient: Patient }>>;\n  getSamplesByStatus(status: string): Promise<Array<Sample & { patient: Patient }>>;\n  getDailySamplesCount(): Promise<number>;\n  \n  // Test operations\n  getTestTypes(): Promise<TestType[]>;\n  createTestType(testType: InsertTestType): Promise<TestType>;\n  createTestRequest(testRequest: InsertTestRequest): Promise<TestRequest>;\n  getTestRequestsForSample(sampleId: string): Promise<TestRequest[]>;\n  getPendingTestsCount(): Promise<number>;\n  \n  // Results operations\n  createTestResult(result: InsertTestResult): Promise<TestResult>;\n  getTestResults(testRequestId: string): Promise<TestResult[]>;\n  getCompletedResultsCount(): Promise<number>;\n  \n  // Quality Control operations\n  createQualityControl(qc: InsertQualityControl): Promise<QualityControl>;\n  getRecentQualityControls(limit: number): Promise<Array<QualityControl & { testType: TestType }>>;\n  \n  // Dashboard statistics\n  getDashboardStats(): Promise<{\n    dailySamples: number;\n    resultsReady: number;\n    pendingTests: number;\n    activeUsers: number;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const hashedPassword = await bcrypt.hash(insertUser.password, 12);\n    const [user] = await db\n      .insert(users)\n      .values({ ...insertUser, password: hashedPassword })\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, updateUser: Partial<InsertUser>): Promise<User> {\n    const updateData = { ...updateUser };\n    if (updateData.password) {\n      updateData.password = await bcrypt.hash(updateData.password, 12);\n    }\n    \n    const [user] = await db\n      .update(users)\n      .set({ ...updateData, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async validateUserPassword(username: string, password: string): Promise<User | null> {\n    const user = await this.getUserByUsername(username);\n    if (!user) return null;\n    \n    const isValid = await bcrypt.compare(password, user.password);\n    return isValid ? user : null;\n  }\n\n  async getPatient(id: string): Promise<Patient | undefined> {\n    const [patient] = await db.select().from(patients).where(eq(patients.id, id));\n    return patient || undefined;\n  }\n\n  async getPatientByPatientId(patientId: string): Promise<Patient | undefined> {\n    const [patient] = await db.select().from(patients).where(eq(patients.patientId, patientId));\n    return patient || undefined;\n  }\n\n  async createPatient(insertPatient: InsertPatient): Promise<Patient> {\n    const [patient] = await db\n      .insert(patients)\n      .values(insertPatient)\n      .returning();\n    return patient;\n  }\n\n  async updatePatient(id: string, updatePatient: Partial<InsertPatient>): Promise<Patient> {\n    const [patient] = await db\n      .update(patients)\n      .set({ ...updatePatient, updatedAt: new Date() })\n      .where(eq(patients.id, id))\n      .returning();\n    return patient;\n  }\n\n  async searchPatients(query: string): Promise<Patient[]> {\n    return await db\n      .select()\n      .from(patients)\n      .where(\n        like(patients.firstName, `%${query}%`) ||\n        like(patients.lastName, `%${query}%`) ||\n        like(patients.patientId, `%${query}%`)\n      )\n      .limit(50);\n  }\n\n  async getRecentPatients(limit: number): Promise<Patient[]> {\n    return await db\n      .select()\n      .from(patients)\n      .orderBy(desc(patients.createdAt))\n      .limit(limit);\n  }\n\n  async getSample(id: string): Promise<Sample | undefined> {\n    const [sample] = await db.select().from(samples).where(eq(samples.id, id));\n    return sample || undefined;\n  }\n\n  async getSampleBySampleId(sampleId: string): Promise<Sample | undefined> {\n    const [sample] = await db.select().from(samples).where(eq(samples.sampleId, sampleId));\n    return sample || undefined;\n  }\n\n  async createSample(insertSample: InsertSample): Promise<Sample> {\n    const [sample] = await db\n      .insert(samples)\n      .values(insertSample)\n      .returning();\n    return sample;\n  }\n\n  async updateSample(id: string, updateSample: Partial<InsertSample>): Promise<Sample> {\n    const [sample] = await db\n      .update(samples)\n      .set({ ...updateSample, updatedAt: new Date() })\n      .where(eq(samples.id, id))\n      .returning();\n    return sample;\n  }\n\n  async getRecentSamples(limit: number): Promise<Array<Sample & { patient: Patient }>> {\n    const result = await db\n      .select()\n      .from(samples)\n      .innerJoin(patients, eq(samples.patientId, patients.id))\n      .orderBy(desc(samples.createdAt))\n      .limit(limit);\n\n    return result.map(row => ({\n      ...row.samples,\n      patient: row.patients\n    }));\n  }\n\n  async getSamplesByStatus(status: string): Promise<Array<Sample & { patient: Patient }>> {\n    // Validate that the status is a valid enum value\n    const validStatuses = ['received', 'in_progress', 'completed', 'rejected', 'cancelled'];\n    if (!validStatuses.includes(status)) {\n      throw new Error(`Invalid sample status: ${status}`);\n    }\n    \n    const result = await db\n      .select()\n      .from(samples)\n      .innerJoin(patients, eq(samples.patientId, patients.id))\n      .where(eq(samples.status, status as any))\n      .orderBy(desc(samples.createdAt));\n\n    return result.map(row => ({\n      ...row.samples,\n      patient: row.patients\n    }));\n  }\n\n  async getDailySamplesCount(): Promise<number> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    \n    const [result] = await db\n      .select({ count: count() })\n      .from(samples)\n      .where(gte(samples.receivedDateTime, today));\n    \n    return result.count;\n  }\n\n  async getTestTypes(): Promise<TestType[]> {\n    return await db\n      .select()\n      .from(testTypes)\n      .where(eq(testTypes.isActive, true))\n      .orderBy(asc(testTypes.name));\n  }\n\n  async createTestType(insertTestType: InsertTestType): Promise<TestType> {\n    const [testType] = await db\n      .insert(testTypes)\n      .values(insertTestType)\n      .returning();\n    return testType;\n  }\n\n  async createTestRequest(insertTestRequest: InsertTestRequest): Promise<TestRequest> {\n    const [testRequest] = await db\n      .insert(testRequests)\n      .values(insertTestRequest)\n      .returning();\n    return testRequest;\n  }\n\n  async getTestRequestsForSample(sampleId: string): Promise<TestRequest[]> {\n    return await db\n      .select()\n      .from(testRequests)\n      .where(eq(testRequests.sampleId, sampleId))\n      .orderBy(desc(testRequests.requestDateTime));\n  }\n\n  async getPendingTestsCount(): Promise<number> {\n    const [result] = await db\n      .select({ count: count() })\n      .from(testRequests)\n      .where(eq(testRequests.status, \"pending\"));\n    \n    return result.count;\n  }\n\n  async createTestResult(insertTestResult: InsertTestResult): Promise<TestResult> {\n    const [testResult] = await db\n      .insert(testResults)\n      .values(insertTestResult)\n      .returning();\n    return testResult;\n  }\n\n  async getTestResults(testRequestId: string): Promise<TestResult[]> {\n    return await db\n      .select()\n      .from(testResults)\n      .where(eq(testResults.testRequestId, testRequestId))\n      .orderBy(asc(testResults.parameterId));\n  }\n\n  async getCompletedResultsCount(): Promise<number> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    \n    const [result] = await db\n      .select({ count: count() })\n      .from(testRequests)\n      .where(\n        and(\n          eq(testRequests.status, \"completed\"),\n          gte(testRequests.completedDateTime, today)\n        )\n      );\n    \n    return result.count;\n  }\n\n  async createQualityControl(insertQualityControl: InsertQualityControl): Promise<QualityControl> {\n    const [qualityControl] = await db\n      .insert(qualityControls)\n      .values(insertQualityControl)\n      .returning();\n    return qualityControl;\n  }\n\n  async getRecentQualityControls(limit: number): Promise<Array<QualityControl & { testType: TestType }>> {\n    const result = await db\n      .select()\n      .from(qualityControls)\n      .innerJoin(testTypes, eq(qualityControls.testTypeId, testTypes.id))\n      .orderBy(desc(qualityControls.runDateTime))\n      .limit(limit);\n\n    return result.map(row => ({\n      ...row.quality_controls,\n      testType: row.test_types\n    }));\n  }\n\n  async getDashboardStats(): Promise<{\n    dailySamples: number;\n    resultsReady: number;\n    pendingTests: number;\n    activeUsers: number;\n  }> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    \n    const [dailySamples] = await db\n      .select({ count: count() })\n      .from(samples)\n      .where(gte(samples.receivedDateTime, today));\n\n    const [resultsReady] = await db\n      .select({ count: count() })\n      .from(testRequests)\n      .where(eq(testRequests.status, \"completed\"));\n\n    const [pendingTests] = await db\n      .select({ count: count() })\n      .from(testRequests)\n      .where(eq(testRequests.status, \"pending\"));\n\n    const [activeUsers] = await db\n      .select({ count: count() })\n      .from(users)\n      .where(eq(users.isActive, true));\n\n    return {\n      dailySamples: dailySamples.count,\n      resultsReady: resultsReady.count,\n      pendingTests: pendingTests.count,\n      activeUsers: activeUsers.count,\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":11595},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean, decimal, pgEnum, json, uuid } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema, createSelectSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Enums\nexport const userRoleEnum = pgEnum(\"user_role\", [\"admin\", \"technician\", \"receptionist\", \"doctor\", \"lab_manager\"]);\nexport const sampleStatusEnum = pgEnum(\"sample_status\", [\"received\", \"in_progress\", \"completed\", \"rejected\", \"cancelled\"]);\nexport const testStatusEnum = pgEnum(\"test_status\", [\"pending\", \"in_progress\", \"completed\", \"failed\", \"cancelled\"]);\nexport const priorityEnum = pgEnum(\"priority\", [\"routine\", \"urgent\", \"stat\", \"critical\"]);\nexport const genderEnum = pgEnum(\"gender\", [\"male\", \"female\", \"other\", \"unknown\"]);\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: varchar(\"username\", { length: 50 }).notNull().unique(),\n  email: varchar(\"email\", { length: 255 }).notNull().unique(),\n  password: text(\"password\").notNull(),\n  firstName: varchar(\"first_name\", { length: 100 }).notNull(),\n  lastName: varchar(\"last_name\", { length: 100 }).notNull(),\n  role: userRoleEnum(\"role\").notNull().default(\"technician\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  lastLogin: timestamp(\"last_login\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Patients table\nexport const patients = pgTable(\"patients\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\", { length: 50 }).notNull().unique(),\n  firstName: varchar(\"first_name\", { length: 100 }).notNull(),\n  lastName: varchar(\"last_name\", { length: 100 }).notNull(),\n  dateOfBirth: timestamp(\"date_of_birth\").notNull(),\n  gender: genderEnum(\"gender\").notNull(),\n  phoneNumber: varchar(\"phone_number\", { length: 20 }),\n  email: varchar(\"email\", { length: 255 }),\n  address: text(\"address\"),\n  emergencyContact: varchar(\"emergency_contact\", { length: 20 }),\n  insuranceNumber: varchar(\"insurance_number\", { length: 50 }),\n  medicalHistory: json(\"medical_history\"),\n  // Additional fields requested\n  nationalId: varchar(\"national_id\", { length: 50 }),\n  treatingDoctor: varchar(\"treating_doctor\", { length: 200 }),\n  landline: varchar(\"landline\", { length: 20 }),\n  fastingHours: integer(\"fasting_hours\"),\n  isFasting: boolean(\"is_fasting\"),\n  isDiabetic: boolean(\"is_diabetic\"),\n  isOnBloodThinner: boolean(\"is_on_blood_thinner\"),\n  isOnAntibiotics: boolean(\"is_on_antibiotics\"),\n  isOnThyroidMedication: boolean(\"is_on_thyroid_medication\"),\n  isOnKidneyTreatment: boolean(\"is_on_kidney_treatment\"),\n  isOnLiverTreatment: boolean(\"is_on_liver_treatment\"),\n  isOnCholesterolMedication: boolean(\"is_on_cholesterol_medication\"),\n  isOnCortisone: boolean(\"is_on_cortisone\"),\n  hadContrastScan: boolean(\"had_contrast_scan\"),\n  hadBloodTransfusion: boolean(\"had_blood_transfusion\"),\n  bloodTransfusionDate: timestamp(\"blood_transfusion_date\"),\n  hadSurgeries: boolean(\"had_surgeries\"),\n  hadChemoRadiotherapy: boolean(\"had_chemo_radiotherapy\"),\n  lastMenstrualPeriod: timestamp(\"last_menstrual_period\"),\n  isPregnant: boolean(\"is_pregnant\"),\n  requiredTests: text(\"required_tests\"),\n  medications: json(\"medications\"), // Array of medication objects\n  isOnIronVitamins: boolean(\"is_on_iron_vitamins\"),\n  ironVitaminsDose: varchar(\"iron_vitamins_dose\", { length: 100 }),\n  ironVitaminsDuration: varchar(\"iron_vitamins_duration\", { length: 100 }),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Test types table\nexport const testTypes = pgTable(\"test_types\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: varchar(\"code\", { length: 20 }).notNull().unique(),\n  name: varchar(\"name\", { length: 200 }).notNull(),\n  category: varchar(\"category\", { length: 100 }).notNull(),\n  description: text(\"description\"),\n  sampleType: varchar(\"sample_type\", { length: 50 }).notNull(),\n  methodology: varchar(\"methodology\", { length: 100 }),\n  turnaroundTime: integer(\"turnaround_time\").notNull(), // in hours\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  referenceRanges: json(\"reference_ranges\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Samples table\nexport const samples = pgTable(\"samples\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sampleId: varchar(\"sample_id\", { length: 50 }).notNull().unique(),\n  patientId: uuid(\"patient_id\").references(() => patients.id).notNull(),\n  collectedBy: uuid(\"collected_by\").references(() => users.id).notNull(),\n  sampleType: varchar(\"sample_type\", { length: 50 }).notNull(),\n  containerType: varchar(\"container_type\", { length: 50 }),\n  volume: decimal(\"volume\", { precision: 10, scale: 2 }),\n  unit: varchar(\"unit\", { length: 10 }),\n  collectionDateTime: timestamp(\"collection_date_time\").notNull(),\n  receivedDateTime: timestamp(\"received_date_time\").defaultNow().notNull(),\n  status: sampleStatusEnum(\"status\").notNull().default(\"received\"),\n  priority: priorityEnum(\"priority\").notNull().default(\"routine\"),\n  comments: text(\"comments\"),\n  storageLocation: varchar(\"storage_location\", { length: 100 }),\n  barcode: varchar(\"barcode\", { length: 100 }).unique(),\n  rejectionReason: text(\"rejection_reason\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Test requests table\nexport const testRequests = pgTable(\"test_requests\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sampleId: uuid(\"sample_id\").references(() => samples.id).notNull(),\n  testTypeId: uuid(\"test_type_id\").references(() => testTypes.id).notNull(),\n  requestedBy: uuid(\"requested_by\").references(() => users.id).notNull(),\n  status: testStatusEnum(\"status\").notNull().default(\"pending\"),\n  priority: priorityEnum(\"priority\").notNull().default(\"routine\"),\n  requestDateTime: timestamp(\"request_date_time\").defaultNow().notNull(),\n  startDateTime: timestamp(\"start_date_time\"),\n  completedDateTime: timestamp(\"completed_date_time\"),\n  assignedTo: uuid(\"assigned_to\").references(() => users.id),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Test results table\nexport const testResults = pgTable(\"test_results\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  testRequestId: uuid(\"test_request_id\").references(() => testRequests.id).notNull(),\n  parameterId: varchar(\"parameter_id\", { length: 50 }).notNull(),\n  parameterName: varchar(\"parameter_name\", { length: 200 }).notNull(),\n  value: text(\"value\").notNull(),\n  unit: varchar(\"unit\", { length: 20 }),\n  referenceRange: varchar(\"reference_range\", { length: 100 }),\n  flag: varchar(\"flag\", { length: 10 }), // H, L, N, A (High, Low, Normal, Abnormal)\n  enteredBy: uuid(\"entered_by\").references(() => users.id).notNull(),\n  verifiedBy: uuid(\"verified_by\").references(() => users.id),\n  enteredAt: timestamp(\"entered_at\").defaultNow().notNull(),\n  verifiedAt: timestamp(\"verified_at\"),\n  comments: text(\"comments\"),\n});\n\n// Quality control table\nexport const qualityControls = pgTable(\"quality_controls\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  testTypeId: uuid(\"test_type_id\").references(() => testTypes.id).notNull(),\n  qcLevel: varchar(\"qc_level\", { length: 20 }).notNull(),\n  lotNumber: varchar(\"lot_number\", { length: 50 }).notNull(),\n  expectedValue: decimal(\"expected_value\", { precision: 15, scale: 5 }).notNull(),\n  tolerance: decimal(\"tolerance\", { precision: 10, scale: 5 }).notNull(),\n  runDateTime: timestamp(\"run_date_time\").defaultNow().notNull(),\n  actualValue: decimal(\"actual_value\", { precision: 15, scale: 5 }).notNull(),\n  passed: boolean(\"passed\").notNull(),\n  runBy: uuid(\"run_by\").references(() => users.id).notNull(),\n  comments: text(\"comments\"),\n});\n\n// Outbound samples table\nexport const outboundSamples = pgTable(\"outbound_samples\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sampleId: uuid(\"sample_id\").references(() => samples.id).notNull(),\n  referenceLabId: uuid(\"reference_lab_id\").notNull(),\n  referenceLabName: varchar(\"reference_lab_name\", { length: 200 }).notNull(),\n  testRequested: varchar(\"test_requested\", { length: 200 }).notNull(),\n  sentBy: uuid(\"sent_by\").references(() => users.id).notNull(),\n  sentDateTime: timestamp(\"sent_date_time\").defaultNow().notNull(),\n  trackingNumber: varchar(\"tracking_number\", { length: 100 }),\n  expectedReturnDate: timestamp(\"expected_return_date\"),\n  status: varchar(\"status\", { length: 50 }).notNull().default(\"sent\"),\n  notes: text(\"notes\"),\n});\n\n// Worklists table\nexport const worklists = pgTable(\"worklists\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 200 }).notNull(),\n  description: text(\"description\"),\n  criteria: json(\"criteria\").notNull(),\n  assignedTo: uuid(\"assigned_to\").references(() => users.id),\n  createdBy: uuid(\"created_by\").references(() => users.id).notNull(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Financial records table\nexport const financialRecords = pgTable(\"financial_records\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: uuid(\"patient_id\").references(() => patients.id).notNull(),\n  sampleId: uuid(\"sample_id\").references(() => samples.id),\n  transactionType: varchar(\"transaction_type\", { length: 50 }).notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  currency: varchar(\"currency\", { length: 3 }).notNull().default(\"USD\"),\n  paymentMethod: varchar(\"payment_method\", { length: 50 }),\n  paymentStatus: varchar(\"payment_status\", { length: 50 }).notNull().default(\"pending\"),\n  invoiceNumber: varchar(\"invoice_number\", { length: 100 }),\n  description: text(\"description\"),\n  processedBy: uuid(\"processed_by\").references(() => users.id).notNull(),\n  transactionDate: timestamp(\"transaction_date\").defaultNow().notNull(),\n  dueDate: timestamp(\"due_date\"),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  samplesCollected: many(samples, { relationName: \"collectedBy\" }),\n  testRequestsRequested: many(testRequests, { relationName: \"requestedBy\" }),\n  testRequestsAssigned: many(testRequests, { relationName: \"assignedTo\" }),\n  testResultsEntered: many(testResults, { relationName: \"enteredBy\" }),\n  testResultsVerified: many(testResults, { relationName: \"verifiedBy\" }),\n  qualityControlsRun: many(qualityControls),\n  outboundSamplesSent: many(outboundSamples),\n  worklistsCreated: many(worklists, { relationName: \"createdBy\" }),\n  worklistsAssigned: many(worklists, { relationName: \"assignedTo\" }),\n  financialRecordsProcessed: many(financialRecords),\n}));\n\nexport const patientsRelations = relations(patients, ({ many }) => ({\n  samples: many(samples),\n  financialRecords: many(financialRecords),\n}));\n\nexport const samplesRelations = relations(samples, ({ one, many }) => ({\n  patient: one(patients, {\n    fields: [samples.patientId],\n    references: [patients.id],\n  }),\n  collectedBy: one(users, {\n    fields: [samples.collectedBy],\n    references: [users.id],\n  }),\n  testRequests: many(testRequests),\n  outboundSamples: many(outboundSamples),\n  financialRecords: many(financialRecords),\n}));\n\nexport const testTypesRelations = relations(testTypes, ({ many }) => ({\n  testRequests: many(testRequests),\n  qualityControls: many(qualityControls),\n}));\n\nexport const testRequestsRelations = relations(testRequests, ({ one, many }) => ({\n  sample: one(samples, {\n    fields: [testRequests.sampleId],\n    references: [samples.id],\n  }),\n  testType: one(testTypes, {\n    fields: [testRequests.testTypeId],\n    references: [testTypes.id],\n  }),\n  requestedBy: one(users, {\n    fields: [testRequests.requestedBy],\n    references: [users.id],\n  }),\n  assignedTo: one(users, {\n    fields: [testRequests.assignedTo],\n    references: [users.id],\n  }),\n  testResults: many(testResults),\n}));\n\nexport const testResultsRelations = relations(testResults, ({ one }) => ({\n  testRequest: one(testRequests, {\n    fields: [testResults.testRequestId],\n    references: [testRequests.id],\n  }),\n  enteredBy: one(users, {\n    fields: [testResults.enteredBy],\n    references: [users.id],\n  }),\n  verifiedBy: one(users, {\n    fields: [testResults.verifiedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const qualityControlsRelations = relations(qualityControls, ({ one }) => ({\n  testType: one(testTypes, {\n    fields: [qualityControls.testTypeId],\n    references: [testTypes.id],\n  }),\n  runBy: one(users, {\n    fields: [qualityControls.runBy],\n    references: [users.id],\n  }),\n}));\n\nexport const outboundSamplesRelations = relations(outboundSamples, ({ one }) => ({\n  sample: one(samples, {\n    fields: [outboundSamples.sampleId],\n    references: [samples.id],\n  }),\n  sentBy: one(users, {\n    fields: [outboundSamples.sentBy],\n    references: [users.id],\n  }),\n}));\n\nexport const worklistsRelations = relations(worklists, ({ one }) => ({\n  createdBy: one(users, {\n    fields: [worklists.createdBy],\n    references: [users.id],\n  }),\n  assignedTo: one(users, {\n    fields: [worklists.assignedTo],\n    references: [users.id],\n  }),\n}));\n\nexport const financialRecordsRelations = relations(financialRecords, ({ one }) => ({\n  patient: one(patients, {\n    fields: [financialRecords.patientId],\n    references: [patients.id],\n  }),\n  sample: one(samples, {\n    fields: [financialRecords.sampleId],\n    references: [samples.id],\n  }),\n  processedBy: one(users, {\n    fields: [financialRecords.processedBy],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPatientSchema = createInsertSchema(patients).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSampleSchema = createInsertSchema(samples).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTestRequestSchema = createInsertSchema(testRequests).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTestResultSchema = createInsertSchema(testResults).omit({\n  id: true,\n  enteredAt: true,\n});\n\nexport const insertQualityControlSchema = createInsertSchema(qualityControls).omit({\n  id: true,\n});\n\nexport const insertOutboundSampleSchema = createInsertSchema(outboundSamples).omit({\n  id: true,\n});\n\nexport const insertWorklistSchema = createInsertSchema(worklists).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertFinancialRecordSchema = createInsertSchema(financialRecords).omit({\n  id: true,\n});\n\nexport const insertTestTypeSchema = createInsertSchema(testTypes).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Patient = typeof patients.$inferSelect;\nexport type InsertPatient = z.infer<typeof insertPatientSchema>;\nexport type Sample = typeof samples.$inferSelect;\nexport type InsertSample = z.infer<typeof insertSampleSchema>;\nexport type TestRequest = typeof testRequests.$inferSelect;\nexport type InsertTestRequest = z.infer<typeof insertTestRequestSchema>;\nexport type TestResult = typeof testResults.$inferSelect;\nexport type InsertTestResult = z.infer<typeof insertTestResultSchema>;\nexport type QualityControl = typeof qualityControls.$inferSelect;\nexport type InsertQualityControl = z.infer<typeof insertQualityControlSchema>;\nexport type OutboundSample = typeof outboundSamples.$inferSelect;\nexport type InsertOutboundSample = z.infer<typeof insertOutboundSampleSchema>;\nexport type Worklist = typeof worklists.$inferSelect;\nexport type InsertWorklist = z.infer<typeof insertWorklistSchema>;\nexport type FinancialRecord = typeof financialRecords.$inferSelect;\nexport type InsertFinancialRecord = z.infer<typeof insertFinancialRecordSchema>;\nexport type TestType = typeof testTypes.$inferSelect;\nexport type InsertTestType = z.infer<typeof insertTestTypeSchema>;\n","size_bytes":16442},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AppLayout } from \"@/components/layout/app-layout\";\nimport NotFound from \"@/pages/not-found\";\nimport Login from \"@/pages/login\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Reception from \"@/pages/reception\";\nimport Sampling from \"@/pages/sampling\";\nimport Results from \"@/pages/results\";\nimport Worklists from \"@/pages/worklists\";\nimport QualityControl from \"@/pages/quality-control\";\nimport Outbound from \"@/pages/outbound\";\nimport Reports from \"@/pages/reports\";\nimport Financial from \"@/pages/financial\";\nimport UserManagement from \"@/pages/user-management\";\nimport Pricing from \"@/pages/pricing\";\nimport Setup from \"@/pages/setup\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route path=\"/reception\" component={Reception} />\n      <Route path=\"/sampling\" component={Sampling} />\n      <Route path=\"/results\" component={Results} />\n      <Route path=\"/worklists\" component={Worklists} />\n      <Route path=\"/quality-control\" component={QualityControl} />\n      <Route path=\"/outbound\" component={Outbound} />\n      <Route path=\"/reports\" component={Reports} />\n      <Route path=\"/financial\" component={Financial} />\n      <Route path=\"/users\" component={UserManagement} />\n      <Route path=\"/pricing\" component={Pricing} />\n      <Route path=\"/setup\" component={Setup} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AppLayout>\n          <Router />\n        </AppLayout>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2031},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  \n  /* Medical/Laboratory specific colors */\n  --success: hsl(142, 71%, 45%);\n  --success-foreground: hsl(60, 9.1%, 97.8%);\n  --warning: hsl(45, 93%, 47%);\n  --warning-foreground: hsl(60, 9.1%, 97.8%);\n  --info: hsl(207, 90%, 54%);\n  --info-foreground: hsl(211, 100%, 99%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  \n  /* Dark mode medical colors */\n  --success: hsl(142, 71%, 45%);\n  --success-foreground: hsl(0, 0%, 98%);\n  --warning: hsl(45, 93%, 47%);\n  --warning-foreground: hsl(0, 0%, 98%);\n  --info: hsl(207, 90%, 54%);\n  --info-foreground: hsl(211, 100%, 99%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n  \n  /* Medical data styling */\n  .sample-id {\n    @apply font-mono text-sm tracking-wide;\n  }\n  \n  .patient-name {\n    @apply font-medium;\n  }\n  \n  .test-result {\n    @apply font-mono text-sm;\n  }\n  \n  /* Status badges */\n  .status-received {\n    @apply bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400;\n  }\n  \n  .status-in-progress {\n    @apply bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400;\n  }\n  \n  .status-completed {\n    @apply bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400;\n  }\n  \n  .status-rejected {\n    @apply bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400;\n  }\n  \n  .status-cancelled {\n    @apply bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400;\n  }\n  \n  /* Priority badges */\n  .priority-routine {\n    @apply bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400;\n  }\n  \n  .priority-urgent {\n    @apply bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400;\n  }\n  \n  .priority-stat {\n    @apply bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-400;\n  }\n  \n  .priority-critical {\n    @apply bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400;\n  }\n}\n","size_bytes":3407},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-auth.ts":{"content":"import { useMutation, useQuery } from '@tanstack/react-query';\nimport { useAuthStore } from '@/store/auth-store';\nimport { authApi, type LoginCredentials, type RegisterData } from '@/lib/auth';\nimport { useToast } from './use-toast';\n\nexport function useAuth() {\n  const { user, isAuthenticated, login, logout } = useAuthStore();\n  const { toast } = useToast();\n\n  const loginMutation = useMutation({\n    mutationFn: authApi.login,\n    onSuccess: (data) => {\n      login(data.user);\n      toast({\n        title: \"Login successful\",\n        description: `Welcome back, ${data.user.firstName}!`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Login failed\",\n        description: error.message || \"Invalid credentials\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: authApi.register,\n    onSuccess: (data) => {\n      login(data.user);\n      toast({\n        title: \"Registration successful\",\n        description: `Welcome to MedLab LIS, ${data.user.firstName}!`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Registration failed\",\n        description: error.message || \"Registration failed\",\n      });\n    },\n  });\n\n  const handleLogin = (credentials: LoginCredentials) => {\n    loginMutation.mutate(credentials);\n  };\n\n  const handleRegister = (data: RegisterData) => {\n    registerMutation.mutate(data);\n  };\n\n  const handleLogout = () => {\n    logout();\n    authApi.logout();\n  };\n\n  return {\n    user,\n    isAuthenticated,\n    login: handleLogin,\n    register: handleRegister,\n    logout: handleLogout,\n    isLoading: loginMutation.isPending || registerMutation.isPending,\n  };\n}\n","size_bytes":1742},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-patients.ts":{"content":"import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from './use-toast';\nimport type { Patient } from '@/types';\n\nexport function usePatients() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const patientsQuery = useQuery({\n    queryKey: ['/api/patients'],\n    queryFn: async ({ queryKey }) => {\n      const response = await fetch(queryKey[0], { credentials: 'include' });\n      if (!response.ok) throw new Error('Failed to fetch patients');\n      return response.json();\n    },\n  });\n\n  const searchPatientsQuery = useQuery({\n    queryKey: ['/api/patients', 'search'],\n    queryFn: async ({ queryKey }) => {\n      const [, , searchTerm] = queryKey;\n      if (!searchTerm) return [];\n      \n      const response = await fetch(`/api/patients?search=${searchTerm}`, { \n        credentials: 'include' \n      });\n      if (!response.ok) throw new Error('Failed to search patients');\n      return response.json();\n    },\n    enabled: false, // Only run when explicitly called\n  });\n\n  const createPatientMutation = useMutation({\n    mutationFn: async (patientData: any) => {\n      const response = await apiRequest('POST', '/api/patients', patientData);\n      return response.json();\n    },\n    onSuccess: (newPatient) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/patients'] });\n      toast({\n        title: \"Patient registered\",\n        description: `${newPatient.firstName} ${newPatient.lastName} has been registered successfully.`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to register patient\",\n        description: error.message,\n      });\n    },\n  });\n\n  const getPatientQuery = (id: string) => useQuery({\n    queryKey: ['/api/patients', id],\n    queryFn: async ({ queryKey }) => {\n      const [, patientId] = queryKey;\n      const response = await fetch(`/api/patients/${patientId}`, { \n        credentials: 'include' \n      });\n      if (!response.ok) throw new Error('Failed to fetch patient');\n      return response.json();\n    },\n    enabled: !!id,\n  });\n\n  const searchPatients = (searchTerm: string) => {\n    return queryClient.fetchQuery({\n      queryKey: ['/api/patients', 'search', searchTerm],\n      queryFn: async () => {\n        const response = await fetch(`/api/patients?search=${searchTerm}`, { \n          credentials: 'include' \n        });\n        if (!response.ok) throw new Error('Failed to search patients');\n        return response.json();\n      },\n    });\n  };\n\n  return {\n    patients: patientsQuery.data || [],\n    isLoading: patientsQuery.isLoading,\n    error: patientsQuery.error,\n    createPatient: createPatientMutation.mutate,\n    isCreating: createPatientMutation.isPending,\n    getPatient: getPatientQuery,\n    searchPatients,\n  };\n}\n","size_bytes":2881},"client/src/hooks/use-samples.ts":{"content":"import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useSamplesStore } from '@/store/samples-store';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from './use-toast';\nimport type { Sample } from '@/types';\n\nexport function useSamples() {\n  const queryClient = useQueryClient();\n  const { samples, setSamples, addSample, updateSample } = useSamplesStore();\n  const { toast } = useToast();\n\n  const samplesQuery = useQuery({\n    queryKey: ['/api/samples'],\n    queryFn: async ({ queryKey }) => {\n      const response = await fetch(queryKey[0], { credentials: 'include' });\n      if (!response.ok) throw new Error('Failed to fetch samples');\n      const data = await response.json();\n      setSamples(data);\n      return data;\n    },\n  });\n\n  const createSampleMutation = useMutation({\n    mutationFn: async (sampleData: any) => {\n      const response = await apiRequest('POST', '/api/samples', sampleData);\n      return response.json();\n    },\n    onSuccess: (newSample) => {\n      addSample(newSample);\n      queryClient.invalidateQueries({ queryKey: ['/api/samples'] });\n      toast({\n        title: \"Sample created\",\n        description: `Sample ${newSample.sampleId} has been created successfully.`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to create sample\",\n        description: error.message,\n      });\n    },\n  });\n\n  const updateSampleMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: Partial<Sample> }) => {\n      const response = await apiRequest('PATCH', `/api/samples/${id}`, updates);\n      return response.json();\n    },\n    onSuccess: (updatedSample) => {\n      updateSample(updatedSample.id, updatedSample);\n      queryClient.invalidateQueries({ queryKey: ['/api/samples'] });\n      toast({\n        title: \"Sample updated\",\n        description: `Sample ${updatedSample.sampleId} has been updated.`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to update sample\",\n        description: error.message,\n      });\n    },\n  });\n\n  const samplesByStatusQuery = useQuery({\n    queryKey: ['/api/samples', 'by-status'],\n    queryFn: async () => {\n      const response = await fetch('/api/samples?status=pending', { credentials: 'include' });\n      if (!response.ok) throw new Error('Failed to fetch samples by status');\n      return response.json();\n    },\n  });\n\n  return {\n    samples,\n    isLoading: samplesQuery.isLoading,\n    error: samplesQuery.error,\n    createSample: createSampleMutation.mutate,\n    updateSample: updateSampleMutation.mutate,\n    isCreating: createSampleMutation.isPending,\n    isUpdating: updateSampleMutation.isPending,\n    samplesByStatus: samplesByStatusQuery.data || [],\n  };\n}\n","size_bytes":2857},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-websocket.ts":{"content":"import { useEffect, useRef, useState } from 'react';\nimport { useSamplesStore } from '@/store/samples-store';\nimport { useUIStore } from '@/store/ui-store';\n\nexport function useWebSocket() {\n  const [isConnected, setIsConnected] = useState(false);\n  const ws = useRef<WebSocket | null>(null);\n  const { addSample, updateSample } = useSamplesStore();\n  const { addNotification } = useUIStore();\n\n  useEffect(() => {\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    ws.current = new WebSocket(wsUrl);\n\n    ws.current.onopen = () => {\n      setIsConnected(true);\n      console.log('WebSocket connected');\n    };\n\n    ws.current.onmessage = (event) => {\n      try {\n        const message = JSON.parse(event.data);\n        \n        switch (message.type) {\n          case 'sample_created':\n            addSample(message.data);\n            addNotification({\n              type: 'info',\n              title: 'New Sample',\n              message: `Sample ${message.data.sampleId} has been created`,\n            });\n            break;\n            \n          case 'sample_updated':\n            updateSample(message.data.id, message.data);\n            addNotification({\n              type: 'info',\n              title: 'Sample Updated',\n              message: `Sample ${message.data.sampleId} has been updated`,\n            });\n            break;\n            \n          case 'patient_registered':\n            addNotification({\n              type: 'success',\n              title: 'New Patient',\n              message: `${message.data.firstName} ${message.data.lastName} has been registered`,\n            });\n            break;\n            \n          default:\n            console.log('Unknown message type:', message.type);\n        }\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    };\n\n    ws.current.onclose = () => {\n      setIsConnected(false);\n      console.log('WebSocket disconnected');\n    };\n\n    ws.current.onerror = (error) => {\n      console.error('WebSocket error:', error);\n      setIsConnected(false);\n    };\n\n    return () => {\n      if (ws.current) {\n        ws.current.close();\n      }\n    };\n  }, [addSample, updateSample, addNotification]);\n\n  const sendMessage = (message: any) => {\n    if (ws.current && ws.current.readyState === WebSocket.OPEN) {\n      ws.current.send(JSON.stringify(message));\n    }\n  };\n\n  return {\n    isConnected,\n    sendMessage,\n  };\n}\n","size_bytes":2518},"client/src/lib/auth.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nexport interface LoginCredentials {\n  username: string;\n  password: string;\n}\n\nexport interface RegisterData {\n  username: string;\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n  role?: string;\n}\n\nexport const authApi = {\n  login: async (credentials: LoginCredentials) => {\n    const response = await apiRequest(\"POST\", \"/api/auth/login\", credentials);\n    return response.json();\n  },\n\n  register: async (data: RegisterData) => {\n    const response = await apiRequest(\"POST\", \"/api/auth/register\", data);\n    return response.json();\n  },\n\n  logout: async () => {\n    // In a real app, this would invalidate the session/token\n    localStorage.removeItem(\"user\");\n    window.location.href = \"/login\";\n  },\n};\n","size_bytes":785},"client/src/lib/constants.ts":{"content":"import type { NavigationItem } from '@/types';\n\nexport const NAVIGATION_ITEMS: NavigationItem[] = [\n  { name: 'Dashboard', href: '/dashboard', icon: 'layout-dashboard' },\n  { name: 'Reception', href: '/reception', icon: 'user-plus' },\n  { name: 'Sampling', href: '/sampling', icon: 'test-tube' },\n  { name: 'Results', href: '/results', icon: 'clipboard-check' },\n  { name: 'Worklists', href: '/worklists', icon: 'list-checks' },\n  { name: 'Quality Control', href: '/quality-control', icon: 'shield-check' },\n  { name: 'Outbound Samples', href: '/outbound', icon: 'send' },\n  { name: 'Reports', href: '/reports', icon: 'bar-chart-3' },\n  { name: 'Financial', href: '/financial', icon: 'dollar-sign' },\n];\n\nexport const ADMIN_NAVIGATION_ITEMS: NavigationItem[] = [\n  { name: 'User Management', href: '/users', icon: 'users' },\n  { name: 'Pricing', href: '/pricing', icon: 'credit-card' },\n  { name: 'Setup', href: '/setup', icon: 'settings' },\n];\n\nexport const SAMPLE_STATUSES = [\n  { value: 'received', label: 'Received', color: 'blue' },\n  { value: 'in_progress', label: 'In Progress', color: 'yellow' },\n  { value: 'completed', label: 'Completed', color: 'green' },\n  { value: 'rejected', label: 'Rejected', color: 'red' },\n  { value: 'cancelled', label: 'Cancelled', color: 'gray' },\n];\n\nexport const TEST_PRIORITIES = [\n  { value: 'routine', label: 'Routine', color: 'gray' },\n  { value: 'urgent', label: 'Urgent', color: 'yellow' },\n  { value: 'stat', label: 'STAT', color: 'orange' },\n  { value: 'critical', label: 'Critical', color: 'red' },\n];\n\nexport const USER_ROLES = [\n  { value: 'admin', label: 'Administrator' },\n  { value: 'lab_manager', label: 'Lab Manager' },\n  { value: 'technician', label: 'Technician' },\n  { value: 'receptionist', label: 'Receptionist' },\n  { value: 'doctor', label: 'Doctor' },\n];\n","size_bytes":1819},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { KPICards } from '@/components/dashboard/kpi-cards';\nimport { RecentSamples } from '@/components/dashboard/recent-samples';\nimport { QuickActions } from '@/components/dashboard/quick-actions';\nimport { SampleVolumeChart, TestDistributionChart } from '@/components/dashboard/charts';\nimport { Button } from '@/components/ui/button';\nimport { Download, Plus } from 'lucide-react';\nimport { Link } from 'wouter';\n\nexport default function Dashboard() {\n  const currentDate = new Date().toLocaleDateString('en-US', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n  });\n\n  const currentTime = new Date().toLocaleTimeString('en-US', {\n    hour: 'numeric',\n    minute: '2-digit',\n    hour12: true,\n  });\n\n  return (\n    <div className=\"p-4 sm:p-6 lg:p-8\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <div className=\"md:flex md:items-center md:justify-between\">\n          <div className=\"min-w-0 flex-1\">\n            <h2 className=\"text-2xl font-bold leading-7 text-gray-900 sm:truncate sm:text-3xl sm:tracking-tight dark:text-white\">\n              Laboratory Dashboard\n            </h2>\n            <div className=\"mt-1 flex flex-col sm:mt-0 sm:flex-row sm:flex-wrap sm:space-x-6\">\n              <div className=\"mt-2 flex items-center text-sm text-gray-500 dark:text-gray-400\">\n                <span>{currentDate}</span>\n              </div>\n              <div className=\"mt-2 flex items-center text-sm text-gray-500 dark:text-gray-400\">\n                <span>{currentTime}</span>\n              </div>\n            </div>\n          </div>\n          <div className=\"mt-4 flex md:ml-4 md:mt-0 gap-3\">\n            <Button \n              variant=\"outline\" \n              onClick={() => {\n                console.log('Exporting dashboard report...');\n                const reportData = {\n                  type: 'dashboard_summary',\n                  date: new Date().toLocaleDateString(),\n                  stats: {\n                    dailySamples: 0,\n                    resultsReady: 0,\n                    pendingReview: 0,\n                    overdueResults: 0\n                  }\n                };\n                \n                // Create CSV content\n                const csvContent = `Dashboard Report - ${reportData.date}\\n` +\n                  `Daily Samples,${reportData.stats.dailySamples}\\n` +\n                  `Results Ready,${reportData.stats.resultsReady}\\n` +\n                  `Pending Review,${reportData.stats.pendingReview}\\n` +\n                  `Overdue Results,${reportData.stats.overdueResults}\\n`;\n                \n                // Create and download file\n                const blob = new Blob([csvContent], { type: 'text/csv' });\n                const url = window.URL.createObjectURL(blob);\n                const a = document.createElement('a');\n                a.style.display = 'none';\n                a.href = url;\n                a.download = `dashboard-report-${new Date().toISOString().split('T')[0]}.csv`;\n                document.body.appendChild(a);\n                a.click();\n                window.URL.revokeObjectURL(url);\n                document.body.removeChild(a);\n                \n                alert('Dashboard report exported successfully!');\n              }}\n            >\n              <Download className=\"mr-2 h-4 w-4\" />\n              Export Report\n            </Button>\n            <Link href=\"/sampling\">\n              <Button>\n                <Plus className=\"mr-2 h-4 w-4\" />\n                New Sample\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n\n      {/* KPI Cards */}\n      <div className=\"mb-8\">\n        <KPICards />\n      </div>\n\n      {/* Main Content Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n        {/* Recent Samples - spans 2 columns on large screens */}\n        <div className=\"lg:col-span-2\">\n          <RecentSamples />\n        </div>\n        \n        {/* Quick Actions */}\n        <div className=\"lg:col-span-1\">\n          <QuickActions />\n        </div>\n      </div>\n\n      {/* Charts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n        <SampleVolumeChart />\n        <TestDistributionChart />\n      </div>\n\n      {/* Module Overview */}\n      <div className=\"bg-white shadow rounded-lg dark:bg-gray-800\">\n        <div className=\"px-4 py-5 sm:p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h3 className=\"text-lg leading-6 font-medium text-gray-900 dark:text-white\">\n              Module Overview\n            </h3>\n            <Button variant=\"ghost\" size=\"sm\">\n              View All Modules\n            </Button>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            {[\n              { name: 'Reception', description: 'Patient registration and check-in', count: '34 patients', color: 'blue' },\n              { name: 'Sampling', description: 'Sample collection and tracking', count: '127 samples', color: 'green' },\n              { name: 'Results', description: 'Test results and validation', count: '43 pending', color: 'purple' },\n              { name: 'QC', description: 'Quality control monitoring', count: 'All passed', color: 'orange' },\n            ].map((module) => (\n              <div key={module.name} className=\"border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow dark:border-gray-700\">\n                <div className=\"flex items-center mb-3\">\n                  <div className={`h-8 w-8 bg-${module.color}-100 dark:bg-${module.color}-900/20 rounded-lg flex items-center justify-center mr-3`}>\n                    <div className={`h-5 w-5 bg-${module.color}-600 rounded`} />\n                  </div>\n                  <h4 className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                    {module.name}\n                  </h4>\n                </div>\n                <p className=\"text-xs text-gray-600 mb-2 dark:text-gray-400\">\n                  {module.description}\n                </p>\n                <div className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                  {module.count}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6314},"client/src/pages/financial.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { DollarSign, CreditCard, Receipt, TrendingUp, AlertTriangle, CheckCircle } from 'lucide-react';\nimport { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, BarChart, Bar } from 'recharts';\nimport { formatDistanceToNow } from 'date-fns';\n\nexport default function Financial() {\n  const [invoiceForm, setInvoiceForm] = useState({\n    patientId: '',\n    description: '',\n    amount: '',\n    paymentMethod: '',\n    dueDate: '',\n  });\n\n  // Mock financial data\n  const revenueData = [\n    { month: 'Jan', revenue: 45000, collections: 42000 },\n    { month: 'Feb', revenue: 48000, collections: 45000 },\n    { month: 'Mar', revenue: 52000, collections: 49000 },\n    { month: 'Apr', revenue: 49000, collections: 47000 },\n    { month: 'May', revenue: 55000, collections: 52000 },\n    { month: 'Jun', revenue: 58000, collections: 55000 },\n  ];\n\n  const mockTransactions = [\n    {\n      id: '1',\n      invoiceNumber: 'INV-2024-001',\n      patientName: 'John Martinez',\n      description: 'Complete Blood Count, Lipid Panel',\n      amount: 125.50,\n      paymentStatus: 'paid',\n      paymentMethod: 'insurance',\n      transactionDate: '2024-12-15T10:30:00Z',\n      dueDate: '2024-12-20T10:30:00Z',\n    },\n    {\n      id: '2',\n      invoiceNumber: 'INV-2024-002',\n      patientName: 'Emma Thompson',\n      description: 'Thyroid Function Tests',\n      amount: 85.00,\n      paymentStatus: 'pending',\n      paymentMethod: 'credit_card',\n      transactionDate: '2024-12-14T14:15:00Z',\n      dueDate: '2024-12-21T14:15:00Z',\n    },\n    {\n      id: '3',\n      invoiceNumber: 'INV-2024-003',\n      patientName: 'Michael Chen',\n      description: 'Glucose Tolerance Test',\n      amount: 95.00,\n      paymentStatus: 'overdue',\n      paymentMethod: 'cash',\n      transactionDate: '2024-12-10T09:00:00Z',\n      dueDate: '2024-12-15T09:00:00Z',\n    },\n    {\n      id: '4',\n      invoiceNumber: 'INV-2024-004',\n      patientName: 'Sarah Wilson',\n      description: 'Hemoglobin A1c, Vitamin D',\n      amount: 145.00,\n      paymentStatus: 'partial',\n      paymentMethod: 'insurance',\n      transactionDate: '2024-12-12T11:20:00Z',\n      dueDate: '2024-12-19T11:20:00Z',\n    },\n  ];\n\n  const handleInvoiceSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log('Creating invoice:', invoiceForm);\n    \n    // Validate required fields\n    if (!invoiceForm.patientId || !invoiceForm.description || !invoiceForm.amount) {\n      alert('Please fill in all required fields (Patient ID, Description, Amount)');\n      return;\n    }\n    \n    // Validate amount\n    const amount = parseFloat(invoiceForm.amount);\n    if (isNaN(amount) || amount <= 0) {\n      alert('Please enter a valid amount');\n      return;\n    }\n    \n    // Generate invoice\n    const invoice = {\n      id: `INV-${Date.now()}`,\n      invoiceNumber: `INV-2024-${String(Math.floor(Math.random() * 1000)).padStart(3, '0')}`,\n      patientId: invoiceForm.patientId,\n      description: invoiceForm.description,\n      amount: amount,\n      paymentMethod: invoiceForm.paymentMethod,\n      dueDate: invoiceForm.dueDate,\n      invoiceDate: new Date().toLocaleDateString(),\n      paymentStatus: 'pending'\n    };\n    \n    // Create invoice content for download\n    const invoiceContent = `\nLABORATORY INVOICE\n==================\n\nInvoice #: ${invoice.invoiceNumber}\nDate: ${invoice.invoiceDate}\nDue Date: ${invoice.dueDate}\n\nPatient ID: ${invoice.patientId}\nServices: ${invoice.description}\nAmount: $${invoice.amount.toFixed(2)}\nPayment Method: ${invoice.paymentMethod}\nStatus: ${invoice.paymentStatus}\n\nThank you for choosing our laboratory services!\n    `.trim();\n    \n    // Create and download invoice file\n    const blob = new Blob([invoiceContent], { type: 'text/plain' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.style.display = 'none';\n    a.href = url;\n    a.download = `invoice-${invoice.invoiceNumber}.txt`;\n    document.body.appendChild(a);\n    a.click();\n    window.URL.revokeObjectURL(url);\n    document.body.removeChild(a);\n    \n    alert(`Invoice Created Successfully!\\n\\n` +\n      `Invoice #: ${invoice.invoiceNumber}\\n` +\n      `Patient ID: ${invoice.patientId}\\n` +\n      `Amount: $${invoice.amount.toFixed(2)}\\n` +\n      `Due Date: ${invoice.dueDate}\\n\\n` +\n      `Invoice has been generated and downloaded.`);\n    \n    // Reset form\n    setInvoiceForm({\n      patientId: '',\n      description: '',\n      amount: '',\n      paymentMethod: '',\n      dueDate: '',\n    });\n  };\n\n  const getPaymentStatusBadge = (status: string) => {\n    switch (status) {\n      case 'paid':\n        return (\n          <Badge className=\"bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400\">\n            <CheckCircle className=\"h-3 w-3 mr-1\" />\n            Paid\n          </Badge>\n        );\n      case 'pending':\n        return (\n          <Badge className=\"bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400\">\n            <CreditCard className=\"h-3 w-3 mr-1\" />\n            Pending\n          </Badge>\n        );\n      case 'overdue':\n        return (\n          <Badge className=\"bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400\">\n            <AlertTriangle className=\"h-3 w-3 mr-1\" />\n            Overdue\n          </Badge>\n        );\n      case 'partial':\n        return (\n          <Badge className=\"bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400\">\n            <Receipt className=\"h-3 w-3 mr-1\" />\n            Partial\n          </Badge>\n        );\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const calculateFinancialSummary = () => {\n    const totalRevenue = mockTransactions.reduce((sum, t) => sum + t.amount, 0);\n    const paidAmount = mockTransactions\n      .filter(t => t.paymentStatus === 'paid')\n      .reduce((sum, t) => sum + t.amount, 0);\n    const pendingAmount = mockTransactions\n      .filter(t => t.paymentStatus === 'pending' || t.paymentStatus === 'partial')\n      .reduce((sum, t) => sum + t.amount, 0);\n    const overdueAmount = mockTransactions\n      .filter(t => t.paymentStatus === 'overdue')\n      .reduce((sum, t) => sum + t.amount, 0);\n\n    return {\n      totalRevenue,\n      paidAmount,\n      pendingAmount,\n      overdueAmount,\n      collectionRate: totalRevenue > 0 ? (paidAmount / totalRevenue) * 100 : 0,\n    };\n  };\n\n  const summary = calculateFinancialSummary();\n\n  return (\n    <div className=\"p-4 sm:p-6 lg:p-8 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n            Financial Management\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Laboratory billing, payments, and financial oversight\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <DollarSign className=\"h-5 w-5 text-gray-500\" />\n          <span className=\"text-sm text-gray-500\">\n            ${summary.collectionRate.toFixed(1)}% collection rate\n          </span>\n        </div>\n      </div>\n\n      {/* Financial Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                  Total Revenue\n                </p>\n                <p className=\"text-2xl font-bold text-blue-600\">\n                  ${summary.totalRevenue.toFixed(2)}\n                </p>\n                <p className=\"text-xs text-gray-500 mt-1\">Current period</p>\n              </div>\n              <div className=\"h-12 w-12 rounded-lg flex items-center justify-center bg-blue-100 dark:bg-blue-900/20\">\n                <DollarSign className=\"h-6 w-6 text-blue-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                  Collected\n                </p>\n                <p className=\"text-2xl font-bold text-green-600\">\n                  ${summary.paidAmount.toFixed(2)}\n                </p>\n                <p className=\"text-xs text-green-600 mt-1\">{summary.collectionRate.toFixed(1)}% rate</p>\n              </div>\n              <div className=\"h-12 w-12 rounded-lg flex items-center justify-center bg-green-100 dark:bg-green-900/20\">\n                <CheckCircle className=\"h-6 w-6 text-green-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                  Pending\n                </p>\n                <p className=\"text-2xl font-bold text-yellow-600\">\n                  ${summary.pendingAmount.toFixed(2)}\n                </p>\n                <p className=\"text-xs text-gray-500 mt-1\">Awaiting payment</p>\n              </div>\n              <div className=\"h-12 w-12 rounded-lg flex items-center justify-center bg-yellow-100 dark:bg-yellow-900/20\">\n                <CreditCard className=\"h-6 w-6 text-yellow-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                  Overdue\n                </p>\n                <p className=\"text-2xl font-bold text-red-600\">\n                  ${summary.overdueAmount.toFixed(2)}\n                </p>\n                <p className=\"text-xs text-red-600 mt-1\">Requires follow-up</p>\n              </div>\n              <div className=\"h-12 w-12 rounded-lg flex items-center justify-center bg-red-100 dark:bg-red-900/20\">\n                <AlertTriangle className=\"h-6 w-6 text-red-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"overview\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"overview\" className=\"flex items-center gap-2\">\n            <TrendingUp className=\"h-4 w-4\" />\n            Overview\n          </TabsTrigger>\n          <TabsTrigger value=\"transactions\" className=\"flex items-center gap-2\">\n            <Receipt className=\"h-4 w-4\" />\n            Transactions\n          </TabsTrigger>\n          <TabsTrigger value=\"billing\" className=\"flex items-center gap-2\">\n            <CreditCard className=\"h-4 w-4\" />\n            Create Invoice\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"mt-6 space-y-6\">\n          {/* Revenue Chart */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Revenue & Collections Trend</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-64\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart data={revenueData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-gray-200 dark:stroke-gray-700\" />\n                    <XAxis dataKey=\"month\" className=\"text-xs\" />\n                    <YAxis className=\"text-xs\" />\n                    <Tooltip\n                      contentStyle={{\n                        backgroundColor: 'hsl(var(--background))',\n                        border: '1px solid hsl(var(--border))',\n                        borderRadius: '6px',\n                      }}\n                      formatter={(value: number) => [`$${value.toLocaleString()}`, '']}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"hsl(207, 90%, 54%)\" \n                      strokeWidth={2}\n                      name=\"Revenue\"\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"collections\" \n                      stroke=\"hsl(142, 71%, 45%)\" \n                      strokeWidth={2}\n                      name=\"Collections\"\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Payment Methods Distribution */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Payment Methods</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {[\n                    { method: 'Insurance', amount: 285.50, percentage: 65 },\n                    { method: 'Credit Card', amount: 85.00, percentage: 19 },\n                    { method: 'Cash', amount: 95.00, percentage: 16 },\n                  ].map((item, index) => (\n                    <div key={index} className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className={`w-3 h-3 rounded-full ${\n                          index === 0 ? 'bg-blue-500' : \n                          index === 1 ? 'bg-green-500' : 'bg-yellow-500'\n                        }`} />\n                        <span className=\"font-medium\">{item.method}</span>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"font-semibold\">${item.amount.toFixed(2)}</div>\n                        <div className=\"text-xs text-gray-500\">{item.percentage}%</div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Aging Report</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {[\n                    { period: '0-30 days', amount: 230.00, count: 3 },\n                    { period: '31-60 days', amount: 145.00, count: 1 },\n                    { period: '61-90 days', amount: 85.00, count: 1 },\n                    { period: '90+ days', amount: 95.00, count: 1 },\n                  ].map((item, index) => (\n                    <div key={index} className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"font-medium\">{item.period}</div>\n                        <div className=\"text-xs text-gray-500\">{item.count} invoice{item.count !== 1 ? 's' : ''}</div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className={`font-semibold ${\n                          index === 0 ? 'text-green-600' :\n                          index === 1 ? 'text-yellow-600' :\n                          index === 2 ? 'text-orange-600' : 'text-red-600'\n                        }`}>\n                          ${item.amount.toFixed(2)}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"transactions\" className=\"mt-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Recent Transactions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead>\n                    <tr className=\"border-b border-gray-200 dark:border-gray-700\">\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Invoice #\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Patient\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Description\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Amount\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Status\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Payment Method\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Due Date\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Actions\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"divide-y divide-gray-200 dark:divide-gray-700\">\n                    {mockTransactions.map((transaction) => (\n                      <tr key={transaction.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-800\">\n                        <td className=\"py-3 px-4\">\n                          <span className=\"font-mono text-sm\">\n                            {transaction.invoiceNumber}\n                          </span>\n                        </td>\n                        <td className=\"py-3 px-4\">\n                          <div className=\"patient-name\">\n                            {transaction.patientName}\n                          </div>\n                        </td>\n                        <td className=\"py-3 px-4 text-sm\">\n                          {transaction.description}\n                        </td>\n                        <td className=\"py-3 px-4\">\n                          <span className=\"font-semibold\">\n                            ${transaction.amount.toFixed(2)}\n                          </span>\n                        </td>\n                        <td className=\"py-3 px-4\">\n                          {getPaymentStatusBadge(transaction.paymentStatus)}\n                        </td>\n                        <td className=\"py-3 px-4 text-sm capitalize\">\n                          {transaction.paymentMethod.replace('_', ' ')}\n                        </td>\n                        <td className=\"py-3 px-4 text-sm\">\n                          {new Date(transaction.dueDate).toLocaleDateString()}\n                        </td>\n                        <td className=\"py-3 px-4\">\n                          <div className=\"flex gap-2\">\n                            <Button variant=\"outline\" size=\"sm\">\n                              View\n                            </Button>\n                            {transaction.paymentStatus === 'pending' && (\n                              <Button size=\"sm\">\n                                Process Payment\n                              </Button>\n                            )}\n                          </div>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"billing\" className=\"mt-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <CreditCard className=\"h-5 w-5\" />\n                Create Invoice\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleInvoiceSubmit} className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"patientId\">Patient ID *</Label>\n                    <Input\n                      id=\"patientId\"\n                      required\n                      value={invoiceForm.patientId}\n                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, patientId: e.target.value }))}\n                      placeholder=\"Patient identifier\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"amount\">Amount *</Label>\n                    <Input\n                      id=\"amount\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      required\n                      value={invoiceForm.amount}\n                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, amount: e.target.value }))}\n                      placeholder=\"0.00\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"description\">Description *</Label>\n                  <Input\n                    id=\"description\"\n                    required\n                    value={invoiceForm.description}\n                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}\n                    placeholder=\"Services provided\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"paymentMethod\">Payment Method</Label>\n                    <Select value={invoiceForm.paymentMethod} onValueChange={(value) => setInvoiceForm(prev => ({ ...prev, paymentMethod: value }))}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select payment method\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"cash\">Cash</SelectItem>\n                        <SelectItem value=\"credit_card\">Credit Card</SelectItem>\n                        <SelectItem value=\"debit_card\">Debit Card</SelectItem>\n                        <SelectItem value=\"insurance\">Insurance</SelectItem>\n                        <SelectItem value=\"check\">Check</SelectItem>\n                        <SelectItem value=\"bank_transfer\">Bank Transfer</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"dueDate\">Due Date</Label>\n                    <Input\n                      id=\"dueDate\"\n                      type=\"date\"\n                      value={invoiceForm.dueDate}\n                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, dueDate: e.target.value }))}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end space-x-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\"\n                    onClick={() => {\n                      console.log('Saving invoice as draft...');\n                      alert('Invoice saved as draft!');\n                    }}\n                  >\n                    Save as Draft\n                  </Button>\n                  <Button type=\"submit\">\n                    Create Invoice\n                  </Button>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":24279},"client/src/pages/login.tsx":{"content":"import { useState } from 'react';\nimport { useAuth } from '@/hooks/use-auth';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Microscope, Loader2 } from 'lucide-react';\nimport { useLocation } from 'wouter';\nimport { useEffect } from 'react';\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { login, register, isLoading, isAuthenticated } = useAuth();\n  \n  const [loginForm, setLoginForm] = useState({\n    username: '',\n    password: '',\n  });\n\n  const [registerForm, setRegisterForm] = useState({\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    firstName: '',\n    lastName: '',\n  });\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      setLocation('/dashboard');\n    }\n  }, [isAuthenticated, setLocation]);\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    login(loginForm);\n  };\n\n  const handleRegister = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (registerForm.password !== registerForm.confirmPassword) {\n      return; // Should show error\n    }\n\n    register({\n      username: registerForm.username,\n      email: registerForm.email,\n      password: registerForm.password,\n      firstName: registerForm.firstName,\n      lastName: registerForm.lastName,\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        {/* Logo */}\n        <div className=\"text-center\">\n          <div className=\"mx-auto h-12 w-12 bg-primary rounded-lg flex items-center justify-center\">\n            <Microscope className=\"h-8 w-8 text-primary-foreground\" />\n          </div>\n          <h2 className=\"mt-6 text-3xl font-bold text-gray-900 dark:text-white\">\n            MedLab LIS\n          </h2>\n          <p className=\"mt-2 text-sm text-gray-600 dark:text-gray-400\">\n            Laboratory Information System\n          </p>\n        </div>\n\n        <Tabs defaultValue=\"login\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"login\">Sign In</TabsTrigger>\n            <TabsTrigger value=\"register\">Register</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"login\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Sign in to your account</CardTitle>\n                <CardDescription>\n                  Enter your credentials to access the laboratory system\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleLogin} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"username\">Username</Label>\n                    <Input\n                      id=\"username\"\n                      type=\"text\"\n                      required\n                      value={loginForm.username}\n                      onChange={(e) => setLoginForm(prev => ({ ...prev, username: e.target.value }))}\n                      disabled={isLoading}\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"password\">Password</Label>\n                    <Input\n                      id=\"password\"\n                      type=\"password\"\n                      required\n                      value={loginForm.password}\n                      onChange={(e) => setLoginForm(prev => ({ ...prev, password: e.target.value }))}\n                      disabled={isLoading}\n                    />\n                  </div>\n                  \n                  <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                    {isLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                    Sign In\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n          </TabsContent>\n          \n          <TabsContent value=\"register\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Create new account</CardTitle>\n                <CardDescription>\n                  Register as a new user in the laboratory system\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleRegister} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"firstName\">First Name</Label>\n                      <Input\n                        id=\"firstName\"\n                        type=\"text\"\n                        required\n                        value={registerForm.firstName}\n                        onChange={(e) => setRegisterForm(prev => ({ ...prev, firstName: e.target.value }))}\n                        disabled={isLoading}\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"lastName\">Last Name</Label>\n                      <Input\n                        id=\"lastName\"\n                        type=\"text\"\n                        required\n                        value={registerForm.lastName}\n                        onChange={(e) => setRegisterForm(prev => ({ ...prev, lastName: e.target.value }))}\n                        disabled={isLoading}\n                      />\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"regUsername\">Username</Label>\n                    <Input\n                      id=\"regUsername\"\n                      type=\"text\"\n                      required\n                      value={registerForm.username}\n                      onChange={(e) => setRegisterForm(prev => ({ ...prev, username: e.target.value }))}\n                      disabled={isLoading}\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"email\">Email</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      required\n                      value={registerForm.email}\n                      onChange={(e) => setRegisterForm(prev => ({ ...prev, email: e.target.value }))}\n                      disabled={isLoading}\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"regPassword\">Password</Label>\n                    <Input\n                      id=\"regPassword\"\n                      type=\"password\"\n                      required\n                      value={registerForm.password}\n                      onChange={(e) => setRegisterForm(prev => ({ ...prev, password: e.target.value }))}\n                      disabled={isLoading}\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n                    <Input\n                      id=\"confirmPassword\"\n                      type=\"password\"\n                      required\n                      value={registerForm.confirmPassword}\n                      onChange={(e) => setRegisterForm(prev => ({ ...prev, confirmPassword: e.target.value }))}\n                      disabled={isLoading}\n                    />\n                  </div>\n                  \n                  <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                    {isLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                    Create Account\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8089},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/outbound.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Send, Package, Truck, Clock, CheckCircle, AlertTriangle } from 'lucide-react';\nimport { formatDistanceToNow } from 'date-fns';\n\nexport default function Outbound() {\n  const [outboundForm, setOutboundForm] = useState({\n    sampleId: '',\n    referenceLabName: '',\n    testRequested: '',\n    trackingNumber: '',\n    expectedReturnDate: '',\n    notes: '',\n  });\n\n  // Mock data for demonstration\n  const mockOutboundSamples = [\n    {\n      id: '1',\n      sampleId: 'LAB-20241215-001',\n      patientName: 'John Martinez',\n      referenceLabName: 'Advanced Diagnostics Lab',\n      testRequested: 'Genetic Testing - BRCA1/BRCA2',\n      status: 'sent',\n      sentDateTime: '2024-12-14T10:30:00Z',\n      trackingNumber: 'TR-2024-001',\n      expectedReturnDate: '2024-12-20T10:30:00Z',\n      sentBy: 'Tech. Sarah Chen',\n      notes: 'Urgent genetic screening requested by oncologist',\n    },\n    {\n      id: '2',\n      sampleId: 'LAB-20241215-002',\n      patientName: 'Emma Thompson',\n      referenceLabName: 'Specialty Immunology Center',\n      testRequested: 'Flow Cytometry Panel',\n      status: 'in_transit',\n      sentDateTime: '2024-12-13T14:15:00Z',\n      trackingNumber: 'TR-2024-002',\n      expectedReturnDate: '2024-12-18T14:15:00Z',\n      sentBy: 'Dr. Michael Roberts',\n      notes: 'Special handling required - keep at 4°C',\n    },\n    {\n      id: '3',\n      sampleId: 'LAB-20241215-003',\n      patientName: 'Michael Chen',\n      referenceLabName: 'Molecular Pathology Lab',\n      testRequested: 'Next Generation Sequencing',\n      status: 'received_by_lab',\n      sentDateTime: '2024-12-12T09:00:00Z',\n      trackingNumber: 'TR-2024-003',\n      expectedReturnDate: '2024-12-19T09:00:00Z',\n      sentBy: 'Tech. Lisa Wang',\n      notes: 'Sample for research study protocol #2024-NGS-15',\n    },\n    {\n      id: '4',\n      sampleId: 'LAB-20241215-004',\n      patientName: 'Sarah Wilson',\n      referenceLabName: 'Reference Toxicology Lab',\n      testRequested: 'Heavy Metal Analysis',\n      status: 'results_ready',\n      sentDateTime: '2024-12-10T11:20:00Z',\n      trackingNumber: 'TR-2024-004',\n      expectedReturnDate: '2024-12-17T11:20:00Z',\n      sentBy: 'Dr. Robert Kim',\n      notes: 'Environmental exposure screening',\n    },\n  ];\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log('Outbound sample:', outboundForm);\n    \n    // Reset form\n    setOutboundForm({\n      sampleId: '',\n      referenceLabName: '',\n      testRequested: '',\n      trackingNumber: '',\n      expectedReturnDate: '',\n      notes: '',\n    });\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'sent':\n        return (\n          <Badge className=\"bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400\">\n            <Send className=\"h-3 w-3 mr-1\" />\n            Sent\n          </Badge>\n        );\n      case 'in_transit':\n        return (\n          <Badge className=\"bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400\">\n            <Truck className=\"h-3 w-3 mr-1\" />\n            In Transit\n          </Badge>\n        );\n      case 'received_by_lab':\n        return (\n          <Badge className=\"bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400\">\n            <Package className=\"h-3 w-3 mr-1\" />\n            Received by Lab\n          </Badge>\n        );\n      case 'results_ready':\n        return (\n          <Badge className=\"bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400\">\n            <CheckCircle className=\"h-3 w-3 mr-1\" />\n            Results Ready\n          </Badge>\n        );\n      case 'overdue':\n        return (\n          <Badge className=\"bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400\">\n            <AlertTriangle className=\"h-3 w-3 mr-1\" />\n            Overdue\n          </Badge>\n        );\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const getStatusCounts = () => {\n    return {\n      sent: mockOutboundSamples.filter(s => s.status === 'sent').length,\n      in_transit: mockOutboundSamples.filter(s => s.status === 'in_transit').length,\n      received_by_lab: mockOutboundSamples.filter(s => s.status === 'received_by_lab').length,\n      results_ready: mockOutboundSamples.filter(s => s.status === 'results_ready').length,\n    };\n  };\n\n  const statusCounts = getStatusCounts();\n\n  return (\n    <div className=\"p-4 sm:p-6 lg:p-8 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n            Outbound Samples\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Inter-laboratory sample management and tracking\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Send className=\"h-5 w-5 text-gray-500\" />\n          <span className=\"text-sm text-gray-500\">\n            {mockOutboundSamples.length} samples sent to reference labs\n          </span>\n        </div>\n      </div>\n\n      {/* Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                  Sent\n                </p>\n                <p className=\"text-2xl font-bold text-blue-600\">\n                  {statusCounts.sent}\n                </p>\n              </div>\n              <div className=\"h-12 w-12 rounded-lg flex items-center justify-center bg-blue-100 dark:bg-blue-900/20\">\n                <Send className=\"h-6 w-6 text-blue-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                  In Transit\n                </p>\n                <p className=\"text-2xl font-bold text-yellow-600\">\n                  {statusCounts.in_transit}\n                </p>\n              </div>\n              <div className=\"h-12 w-12 rounded-lg flex items-center justify-center bg-yellow-100 dark:bg-yellow-900/20\">\n                <Truck className=\"h-6 w-6 text-yellow-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                  At Reference Lab\n                </p>\n                <p className=\"text-2xl font-bold text-purple-600\">\n                  {statusCounts.received_by_lab}\n                </p>\n              </div>\n              <div className=\"h-12 w-12 rounded-lg flex items-center justify-center bg-purple-100 dark:bg-purple-900/20\">\n                <Package className=\"h-6 w-6 text-purple-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                  Results Ready\n                </p>\n                <p className=\"text-2xl font-bold text-green-600\">\n                  {statusCounts.results_ready}\n                </p>\n              </div>\n              <div className=\"h-12 w-12 rounded-lg flex items-center justify-center bg-green-100 dark:bg-green-900/20\">\n                <CheckCircle className=\"h-6 w-6 text-green-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"send\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"send\" className=\"flex items-center gap-2\">\n            <Send className=\"h-4 w-4\" />\n            Send Sample\n          </TabsTrigger>\n          <TabsTrigger value=\"track\" className=\"flex items-center gap-2\">\n            <Package className=\"h-4 w-4\" />\n            Track Samples\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"send\" className=\"mt-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Send className=\"h-5 w-5\" />\n                Send Sample to Reference Laboratory\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"sampleId\">Sample ID *</Label>\n                    <Input\n                      id=\"sampleId\"\n                      required\n                      value={outboundForm.sampleId}\n                      onChange={(e) => setOutboundForm(prev => ({ ...prev, sampleId: e.target.value }))}\n                      placeholder=\"Enter sample ID\"\n                      className=\"sample-id\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"trackingNumber\">Tracking Number</Label>\n                    <Input\n                      id=\"trackingNumber\"\n                      value={outboundForm.trackingNumber}\n                      onChange={(e) => setOutboundForm(prev => ({ ...prev, trackingNumber: e.target.value }))}\n                      placeholder=\"Courier tracking number\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"referenceLabName\">Reference Laboratory *</Label>\n                  <Select \n                    value={outboundForm.referenceLabName} \n                    onValueChange={(value) => setOutboundForm(prev => ({ ...prev, referenceLabName: value }))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select reference laboratory\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"advanced-diagnostics\">Advanced Diagnostics Lab</SelectItem>\n                      <SelectItem value=\"specialty-immunology\">Specialty Immunology Center</SelectItem>\n                      <SelectItem value=\"molecular-pathology\">Molecular Pathology Lab</SelectItem>\n                      <SelectItem value=\"reference-toxicology\">Reference Toxicology Lab</SelectItem>\n                      <SelectItem value=\"genetics-center\">Genetics Testing Center</SelectItem>\n                      <SelectItem value=\"infectious-disease\">Infectious Disease Reference Lab</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"testRequested\">Test Requested *</Label>\n                  <Input\n                    id=\"testRequested\"\n                    required\n                    value={outboundForm.testRequested}\n                    onChange={(e) => setOutboundForm(prev => ({ ...prev, testRequested: e.target.value }))}\n                    placeholder=\"Specific test or panel requested\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"expectedReturnDate\">Expected Return Date</Label>\n                  <Input\n                    id=\"expectedReturnDate\"\n                    type=\"datetime-local\"\n                    value={outboundForm.expectedReturnDate}\n                    onChange={(e) => setOutboundForm(prev => ({ ...prev, expectedReturnDate: e.target.value }))}\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"notes\">Notes</Label>\n                  <Textarea\n                    id=\"notes\"\n                    value={outboundForm.notes}\n                    onChange={(e) => setOutboundForm(prev => ({ ...prev, notes: e.target.value }))}\n                    placeholder=\"Special handling instructions, clinical notes, or other relevant information\"\n                    rows={3}\n                  />\n                </div>\n\n                <div className=\"flex justify-end space-x-4\">\n                  <Button type=\"button\" variant=\"outline\">\n                    Clear\n                  </Button>\n                  <Button type=\"submit\">\n                    Send Sample\n                  </Button>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"track\" className=\"mt-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Outbound Sample Tracking</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead>\n                    <tr className=\"border-b border-gray-200 dark:border-gray-700\">\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Sample ID\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Patient\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Reference Lab\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Test Requested\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Status\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Tracking\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Sent\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Expected Return\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Actions\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"divide-y divide-gray-200 dark:divide-gray-700\">\n                    {mockOutboundSamples.map((sample) => (\n                      <tr key={sample.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-800\">\n                        <td className=\"py-3 px-4\">\n                          <span className=\"sample-id font-mono text-sm\">\n                            {sample.sampleId}\n                          </span>\n                        </td>\n                        <td className=\"py-3 px-4\">\n                          <div className=\"patient-name\">\n                            {sample.patientName}\n                          </div>\n                        </td>\n                        <td className=\"py-3 px-4 text-sm\">\n                          {sample.referenceLabName}\n                        </td>\n                        <td className=\"py-3 px-4 text-sm\">\n                          {sample.testRequested}\n                        </td>\n                        <td className=\"py-3 px-4\">\n                          {getStatusBadge(sample.status)}\n                        </td>\n                        <td className=\"py-3 px-4\">\n                          <span className=\"font-mono text-xs bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded\">\n                            {sample.trackingNumber}\n                          </span>\n                        </td>\n                        <td className=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">\n                          {formatDistanceToNow(new Date(sample.sentDateTime), { addSuffix: true })}\n                        </td>\n                        <td className=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">\n                          {new Date(sample.expectedReturnDate).toLocaleDateString()}\n                        </td>\n                        <td className=\"py-3 px-4\">\n                          <div className=\"flex gap-2\">\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\"\n                              onClick={() => {\n                                console.log(`Viewing details for sample: ${sample.sampleId}`);\n                                alert(`Viewing details for sample ${sample.sampleId}`);\n                              }}\n                            >\n                              View Details\n                            </Button>\n                            {sample.status === 'results_ready' && (\n                              <Button \n                                size=\"sm\"\n                                onClick={() => {\n                                  console.log(`Importing results for sample: ${sample.sampleId}`);\n                                  alert(`Importing results for sample ${sample.sampleId}`);\n                                }}\n                              >\n                                Import Results\n                              </Button>\n                            )}\n                          </div>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":18589},"client/src/pages/pricing.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\nimport { Textarea } from '@/components/ui/textarea';\nimport { CreditCard, DollarSign, Package, Edit, Trash2, Plus } from 'lucide-react';\n\nexport default function Pricing() {\n  const [testPricing, setTestPricing] = useState({\n    testCode: '',\n    testName: '',\n    category: '',\n    basePrice: '',\n    insurancePrice: '',\n    cashPrice: '',\n    description: '',\n    isActive: true,\n  });\n\n  const [packageForm, setPackageForm] = useState({\n    packageName: '',\n    description: '',\n    totalPrice: '',\n    discountPercent: '',\n    isActive: true,\n    tests: [] as string[],\n  });\n\n  // Mock pricing data\n  const mockTestPricing = [\n    {\n      id: '1',\n      testCode: 'CBC',\n      testName: 'Complete Blood Count',\n      category: 'Hematology',\n      basePrice: 45.00,\n      insurancePrice: 35.00,\n      cashPrice: 40.00,\n      isActive: true,\n      description: 'Complete blood count with differential',\n    },\n    {\n      id: '2',\n      testCode: 'BMP',\n      testName: 'Basic Metabolic Panel',\n      category: 'Chemistry',\n      basePrice: 65.00,\n      insurancePrice: 50.00,\n      cashPrice: 58.00,\n      isActive: true,\n      description: 'Glucose, BUN, creatinine, electrolytes',\n    },\n    {\n      id: '3',\n      testCode: 'LIP',\n      testName: 'Lipid Panel',\n      category: 'Chemistry',\n      basePrice: 75.00,\n      insurancePrice: 60.00,\n      cashPrice: 68.00,\n      isActive: true,\n      description: 'Total cholesterol, HDL, LDL, triglycerides',\n    },\n    {\n      id: '4',\n      testCode: 'TSH',\n      testName: 'Thyroid Stimulating Hormone',\n      category: 'Endocrinology',\n      basePrice: 55.00,\n      insurancePrice: 42.00,\n      cashPrice: 48.00,\n      isActive: true,\n      description: 'TSH level for thyroid function',\n    },\n  ];\n\n  const mockPackages = [\n    {\n      id: '1',\n      packageName: 'Health Screening Package',\n      description: 'Comprehensive health screening for annual checkups',\n      tests: ['CBC', 'BMP', 'LIP', 'TSH'],\n      individualTotal: 240.00,\n      packagePrice: 180.00,\n      discountPercent: 25,\n      isActive: true,\n    },\n    {\n      id: '2',\n      packageName: 'Cardiac Risk Assessment',\n      description: 'Tests to assess cardiovascular risk factors',\n      tests: ['LIP', 'BMP'],\n      individualTotal: 140.00,\n      packagePrice: 115.00,\n      discountPercent: 18,\n      isActive: true,\n    },\n    {\n      id: '3',\n      packageName: 'Basic Wellness Panel',\n      description: 'Essential tests for general wellness monitoring',\n      tests: ['CBC', 'BMP'],\n      individualTotal: 110.00,\n      packagePrice: 90.00,\n      discountPercent: 18,\n      isActive: false,\n    },\n  ];\n\n  const handleTestPricingSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log('Creating test pricing:', testPricing);\n    \n    // Reset form\n    setTestPricing({\n      testCode: '',\n      testName: '',\n      category: '',\n      basePrice: '',\n      insurancePrice: '',\n      cashPrice: '',\n      description: '',\n      isActive: true,\n    });\n  };\n\n  const handlePackageSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log('Creating package:', packageForm);\n    \n    // Reset form\n    setPackageForm({\n      packageName: '',\n      description: '',\n      totalPrice: '',\n      discountPercent: '',\n      isActive: true,\n      tests: [],\n    });\n  };\n\n  const getStatusBadge = (isActive: boolean) => {\n    return isActive ? (\n      <Badge className=\"bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400\">\n        Active\n      </Badge>\n    ) : (\n      <Badge className=\"bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400\">\n        Inactive\n      </Badge>\n    );\n  };\n\n  const getCategoryBadge = (category: string) => {\n    const colors = {\n      'Hematology': 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400',\n      'Chemistry': 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400',\n      'Endocrinology': 'bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400',\n      'Microbiology': 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400',\n      'Immunology': 'bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-400',\n    };\n\n    return (\n      <Badge className={colors[category as keyof typeof colors] || 'bg-gray-100 text-gray-800'}>\n        {category}\n      </Badge>\n    );\n  };\n\n  return (\n    <div className=\"p-4 sm:p-6 lg:p-8 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n            Pricing Management\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Manage test pricing, packages, and billing configurations\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <CreditCard className=\"h-5 w-5 text-gray-500\" />\n          <span className=\"text-sm text-gray-500\">\n            {mockTestPricing.length} tests configured\n          </span>\n        </div>\n      </div>\n\n      {/* Pricing Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                  Total Tests\n                </p>\n                <p className=\"text-2xl font-bold text-blue-600\">\n                  {mockTestPricing.length}\n                </p>\n              </div>\n              <div className=\"h-12 w-12 rounded-lg flex items-center justify-center bg-blue-100 dark:bg-blue-900/20\">\n                <DollarSign className=\"h-6 w-6 text-blue-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                  Active Packages\n                </p>\n                <p className=\"text-2xl font-bold text-green-600\">\n                  {mockPackages.filter(p => p.isActive).length}\n                </p>\n              </div>\n              <div className=\"h-12 w-12 rounded-lg flex items-center justify-center bg-green-100 dark:bg-green-900/20\">\n                <Package className=\"h-6 w-6 text-green-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                  Avg Test Price\n                </p>\n                <p className=\"text-2xl font-bold text-orange-600\">\n                  ${(mockTestPricing.reduce((sum, test) => sum + test.basePrice, 0) / mockTestPricing.length).toFixed(0)}\n                </p>\n              </div>\n              <div className=\"h-12 w-12 rounded-lg flex items-center justify-center bg-orange-100 dark:bg-orange-900/20\">\n                <CreditCard className=\"h-6 w-6 text-orange-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                  Max Discount\n                </p>\n                <p className=\"text-2xl font-bold text-purple-600\">\n                  {Math.max(...mockPackages.map(p => p.discountPercent))}%\n                </p>\n              </div>\n              <div className=\"h-12 w-12 rounded-lg flex items-center justify-center bg-purple-100 dark:bg-purple-900/20\">\n                <DollarSign className=\"h-6 w-6 text-purple-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"tests\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"tests\" className=\"flex items-center gap-2\">\n            <DollarSign className=\"h-4 w-4\" />\n            Test Pricing\n          </TabsTrigger>\n          <TabsTrigger value=\"packages\" className=\"flex items-center gap-2\">\n            <Package className=\"h-4 w-4\" />\n            Test Packages\n          </TabsTrigger>\n          <TabsTrigger value=\"config\" className=\"flex items-center gap-2\">\n            <CreditCard className=\"h-4 w-4\" />\n            Billing Config\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"tests\" className=\"mt-6 space-y-6\">\n          {/* Add New Test Pricing */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Plus className=\"h-5 w-5\" />\n                Add Test Pricing\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleTestPricingSubmit} className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div>\n                    <Label htmlFor=\"testCode\">Test Code *</Label>\n                    <Input\n                      id=\"testCode\"\n                      required\n                      value={testPricing.testCode}\n                      onChange={(e) => setTestPricing(prev => ({ ...prev, testCode: e.target.value }))}\n                      placeholder=\"e.g., CBC\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"testName\">Test Name *</Label>\n                    <Input\n                      id=\"testName\"\n                      required\n                      value={testPricing.testName}\n                      onChange={(e) => setTestPricing(prev => ({ ...prev, testName: e.target.value }))}\n                      placeholder=\"Full test name\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"category\">Category *</Label>\n                    <Select value={testPricing.category} onValueChange={(value) => setTestPricing(prev => ({ ...prev, category: value }))}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select category\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"Hematology\">Hematology</SelectItem>\n                        <SelectItem value=\"Chemistry\">Chemistry</SelectItem>\n                        <SelectItem value=\"Endocrinology\">Endocrinology</SelectItem>\n                        <SelectItem value=\"Microbiology\">Microbiology</SelectItem>\n                        <SelectItem value=\"Immunology\">Immunology</SelectItem>\n                        <SelectItem value=\"Pathology\">Pathology</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div>\n                    <Label htmlFor=\"basePrice\">Base Price *</Label>\n                    <Input\n                      id=\"basePrice\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      required\n                      value={testPricing.basePrice}\n                      onChange={(e) => setTestPricing(prev => ({ ...prev, basePrice: e.target.value }))}\n                      placeholder=\"0.00\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"insurancePrice\">Insurance Price</Label>\n                    <Input\n                      id=\"insurancePrice\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={testPricing.insurancePrice}\n                      onChange={(e) => setTestPricing(prev => ({ ...prev, insurancePrice: e.target.value }))}\n                      placeholder=\"0.00\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"cashPrice\">Cash Price</Label>\n                    <Input\n                      id=\"cashPrice\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={testPricing.cashPrice}\n                      onChange={(e) => setTestPricing(prev => ({ ...prev, cashPrice: e.target.value }))}\n                      placeholder=\"0.00\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"description\">Description</Label>\n                  <Textarea\n                    id=\"description\"\n                    value={testPricing.description}\n                    onChange={(e) => setTestPricing(prev => ({ ...prev, description: e.target.value }))}\n                    placeholder=\"Test description and details\"\n                    rows={2}\n                  />\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <Switch\n                    id=\"isActive\"\n                    checked={testPricing.isActive}\n                    onCheckedChange={(checked) => setTestPricing(prev => ({ ...prev, isActive: checked }))}\n                  />\n                  <Label htmlFor=\"isActive\">Test is active</Label>\n                </div>\n\n                <div className=\"flex justify-end space-x-4\">\n                  <Button type=\"button\" variant=\"outline\">\n                    Clear\n                  </Button>\n                  <Button type=\"submit\">\n                    Add Test Pricing\n                  </Button>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n\n          {/* Test Pricing List */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Test Pricing List</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead>\n                    <tr className=\"border-b border-gray-200 dark:border-gray-700\">\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Test Code\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Test Name\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Category\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Base Price\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Insurance\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Cash\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Status\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Actions\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"divide-y divide-gray-200 dark:divide-gray-700\">\n                    {mockTestPricing.map((test) => (\n                      <tr key={test.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-800\">\n                        <td className=\"py-3 px-4\">\n                          <span className=\"font-mono font-medium\">\n                            {test.testCode}\n                          </span>\n                        </td>\n                        <td className=\"py-3 px-4 font-medium\">\n                          {test.testName}\n                        </td>\n                        <td className=\"py-3 px-4\">\n                          {getCategoryBadge(test.category)}\n                        </td>\n                        <td className=\"py-3 px-4 font-semibold\">\n                          ${test.basePrice.toFixed(2)}\n                        </td>\n                        <td className=\"py-3 px-4\">\n                          ${test.insurancePrice.toFixed(2)}\n                        </td>\n                        <td className=\"py-3 px-4\">\n                          ${test.cashPrice.toFixed(2)}\n                        </td>\n                        <td className=\"py-3 px-4\">\n                          {getStatusBadge(test.isActive)}\n                        </td>\n                        <td className=\"py-3 px-4\">\n                          <div className=\"flex gap-2\">\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\"\n                              onClick={() => {\n                                console.log(`Editing test: ${test.testName}`);\n                                alert(`Editing test: ${test.testName}`);\n                              }}\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\" \n                              className=\"text-red-600 hover:text-red-700\"\n                              onClick={() => {\n                                console.log(`Deleting test: ${test.testName}`);\n                                if (confirm(`Are you sure you want to delete ${test.testName}?`)) {\n                                  alert(`Test ${test.testName} deleted!`);\n                                }\n                              }}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"packages\" className=\"mt-6 space-y-6\">\n          {/* Package List */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Test Packages</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n                {mockPackages.map((pkg) => (\n                  <Card key={pkg.id} className=\"border-2\">\n                    <CardHeader>\n                      <div className=\"flex items-start justify-between\">\n                        <div>\n                          <CardTitle className=\"text-lg\">{pkg.packageName}</CardTitle>\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                            {pkg.description}\n                          </p>\n                        </div>\n                        {getStatusBadge(pkg.isActive)}\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400 mb-2\">\n                          Included Tests:\n                        </p>\n                        <div className=\"flex flex-wrap gap-1\">\n                          {pkg.tests.map((test) => (\n                            <Badge key={test} variant=\"outline\" className=\"text-xs\">\n                              {test}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Individual Total:</span>\n                          <span className=\"line-through text-gray-500\">\n                            ${pkg.individualTotal.toFixed(2)}\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between font-semibold\">\n                          <span>Package Price:</span>\n                          <span className=\"text-green-600\">\n                            ${pkg.packagePrice.toFixed(2)}\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Discount:</span>\n                          <span className=\"text-green-600 font-medium\">\n                            {pkg.discountPercent}% OFF\n                          </span>\n                        </div>\n                      </div>\n\n                      <div className=\"flex gap-2 pt-2\">\n                        <Button variant=\"outline\" size=\"sm\" className=\"flex-1\">\n                          <Edit className=\"h-4 w-4 mr-1\" />\n                          Edit\n                        </Button>\n                        <Button variant=\"outline\" size=\"sm\" className=\"text-red-600 hover:text-red-700\">\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"config\" className=\"mt-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <CreditCard className=\"h-5 w-5\" />\n                Billing Configuration\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-lg\">Payment Methods</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      {[\n                        { method: 'Cash', enabled: true },\n                        { method: 'Credit Card', enabled: true },\n                        { method: 'Debit Card', enabled: true },\n                        { method: 'Insurance', enabled: true },\n                        { method: 'Check', enabled: false },\n                        { method: 'Bank Transfer', enabled: true },\n                      ].map((item) => (\n                        <div key={item.method} className=\"flex items-center justify-between\">\n                          <span>{item.method}</span>\n                          <Switch defaultChecked={item.enabled} />\n                        </div>\n                      ))}\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-lg\">Billing Settings</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div>\n                        <Label>Default Payment Terms (days)</Label>\n                        <Input type=\"number\" defaultValue=\"30\" className=\"mt-1\" />\n                      </div>\n                      <div>\n                        <Label>Late Fee Percentage</Label>\n                        <Input type=\"number\" step=\"0.1\" defaultValue=\"1.5\" className=\"mt-1\" />\n                      </div>\n                      <div>\n                        <Label>Tax Rate (%)</Label>\n                        <Input type=\"number\" step=\"0.01\" defaultValue=\"8.25\" className=\"mt-1\" />\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Switch defaultChecked />\n                        <Label>Auto-generate invoice numbers</Label>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                <div className=\"flex justify-end\">\n                  <Button>\n                    Save Configuration\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":25278},"client/src/pages/quality-control.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { ShieldCheck, AlertTriangle, CheckCircle, TrendingUp, Plus } from 'lucide-react';\n\nexport default function QualityControl() {\n  const [qcForm, setQcForm] = useState({\n    testType: '',\n    qcLevel: '',\n    lotNumber: '',\n    expectedValue: '',\n    actualValue: '',\n    tolerance: '',\n    comments: '',\n  });\n\n  // Mock data for demonstration\n  const mockQcResults = [\n    {\n      id: '1',\n      testType: 'Glucose',\n      qcLevel: 'Level 1',\n      lotNumber: 'QC-2024-001',\n      expectedValue: 100,\n      actualValue: 98.5,\n      tolerance: 5,\n      passed: true,\n      runBy: 'Tech. Sarah Chen',\n      runDateTime: '2024-12-15T08:30:00Z',\n      comments: 'Within acceptable range',\n    },\n    {\n      id: '2',\n      testType: 'Cholesterol',\n      qcLevel: 'Level 2',\n      lotNumber: 'QC-2024-002',\n      expectedValue: 200,\n      actualValue: 215,\n      tolerance: 10,\n      passed: false,\n      runBy: 'Tech. Michael Roberts',\n      runDateTime: '2024-12-15T09:15:00Z',\n      comments: 'Outside tolerance, reagent checked',\n    },\n    {\n      id: '3',\n      testType: 'Hemoglobin',\n      qcLevel: 'Level 1',\n      lotNumber: 'QC-2024-003',\n      expectedValue: 12.5,\n      actualValue: 12.3,\n      tolerance: 0.5,\n      passed: true,\n      runBy: 'Tech. Lisa Wang',\n      runDateTime: '2024-12-15T10:00:00Z',\n      comments: 'Good precision',\n    },\n  ];\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log('QC Entry:', qcForm);\n    \n    // Validate required fields\n    if (!qcForm.testType || !qcForm.qcLevel || !qcForm.actualValue) {\n      alert('Please fill in all required fields (Test Type, QC Level, and Actual Value)');\n      return;\n    }\n    \n    // Calculate pass/fail status based on tolerance\n    const expectedVal = parseFloat(qcForm.expectedValue);\n    const actualVal = parseFloat(qcForm.actualValue);\n    const toleranceVal = parseFloat(qcForm.tolerance);\n    \n    let qcStatus = 'PASS';\n    let statusMessage = '';\n    \n    if (expectedVal && actualVal && toleranceVal) {\n      const difference = Math.abs(expectedVal - actualVal);\n      const toleranceRange = (expectedVal * toleranceVal) / 100;\n      \n      if (difference > toleranceRange) {\n        qcStatus = 'FAIL';\n        statusMessage = `Out of tolerance range. Difference: ${difference.toFixed(2)}, Allowed: ${toleranceRange.toFixed(2)}`;\n      } else {\n        statusMessage = `Within tolerance range. Difference: ${difference.toFixed(2)}, Allowed: ${toleranceRange.toFixed(2)}`;\n      }\n    }\n    \n    // Create QC entry record\n    const qcEntry = {\n      id: `QC-${Date.now()}`,\n      testType: qcForm.testType,\n      qcLevel: qcForm.qcLevel,\n      lotNumber: qcForm.lotNumber,\n      expectedValue: expectedVal || 'N/A',\n      actualValue: actualVal,\n      tolerance: toleranceVal || 'N/A',\n      status: qcStatus,\n      statusMessage,\n      comments: qcForm.comments,\n      timestamp: new Date().toLocaleString(),\n      technician: 'Current User'\n    };\n    \n    // Simulate saving to database\n    console.log('QC Entry Saved:', qcEntry);\n    \n    // Show detailed result\n    alert(`Quality Control Entry Submitted!\\n\\n` +\n      `Entry ID: ${qcEntry.id}\\n` +\n      `Test Type: ${qcEntry.testType}\\n` +\n      `QC Level: ${qcEntry.qcLevel}\\n` +\n      `Result: ${qcStatus}\\n` +\n      `${statusMessage}\\n\\n` +\n      `Entry has been logged and saved to the QC database.`);\n    \n    // Reset form\n    setQcForm({\n      testType: '',\n      qcLevel: '',\n      lotNumber: '',\n      expectedValue: '',\n      actualValue: '',\n      tolerance: '',\n      comments: '',\n    });\n  };\n\n  const getQcStatusBadge = (passed: boolean) => {\n    return passed ? (\n      <Badge className=\"bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400\">\n        <CheckCircle className=\"h-3 w-3 mr-1\" />\n        Passed\n      </Badge>\n    ) : (\n      <Badge className=\"bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400\">\n        <AlertTriangle className=\"h-3 w-3 mr-1\" />\n        Failed\n      </Badge>\n    );\n  };\n\n  const calculateDeviation = (expected: number, actual: number) => {\n    const deviation = ((actual - expected) / expected) * 100;\n    return deviation.toFixed(2);\n  };\n\n  const passedCount = mockQcResults.filter(qc => qc.passed).length;\n  const failedCount = mockQcResults.filter(qc => !qc.passed).length;\n  const passRate = mockQcResults.length > 0 ? ((passedCount / mockQcResults.length) * 100).toFixed(1) : '0';\n\n  return (\n    <div className=\"p-4 sm:p-6 lg:p-8 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n            Quality Control\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Quality control monitoring and management\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <ShieldCheck className=\"h-5 w-5 text-gray-500\" />\n          <span className=\"text-sm text-gray-500\">\n            {passRate}% pass rate today\n          </span>\n        </div>\n      </div>\n\n      {/* QC Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                  Total QC Runs\n                </p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                  {mockQcResults.length}\n                </p>\n              </div>\n              <div className=\"h-12 w-12 rounded-lg flex items-center justify-center bg-blue-100 dark:bg-blue-900/20\">\n                <ShieldCheck className=\"h-6 w-6 text-blue-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                  Passed\n                </p>\n                <p className=\"text-2xl font-bold text-green-600\">\n                  {passedCount}\n                </p>\n              </div>\n              <div className=\"h-12 w-12 rounded-lg flex items-center justify-center bg-green-100 dark:bg-green-900/20\">\n                <CheckCircle className=\"h-6 w-6 text-green-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                  Failed\n                </p>\n                <p className=\"text-2xl font-bold text-red-600\">\n                  {failedCount}\n                </p>\n              </div>\n              <div className=\"h-12 w-12 rounded-lg flex items-center justify-center bg-red-100 dark:bg-red-900/20\">\n                <AlertTriangle className=\"h-6 w-6 text-red-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                  Pass Rate\n                </p>\n                <p className=\"text-2xl font-bold text-blue-600\">\n                  {passRate}%\n                </p>\n              </div>\n              <div className=\"h-12 w-12 rounded-lg flex items-center justify-center bg-blue-100 dark:bg-blue-900/20\">\n                <TrendingUp className=\"h-6 w-6 text-blue-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"entry\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"entry\" className=\"flex items-center gap-2\">\n            <Plus className=\"h-4 w-4\" />\n            QC Entry\n          </TabsTrigger>\n          <TabsTrigger value=\"results\" className=\"flex items-center gap-2\">\n            <ShieldCheck className=\"h-4 w-4\" />\n            QC Results\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"entry\" className=\"mt-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Plus className=\"h-5 w-5\" />\n                Quality Control Entry\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"testType\">Test Type *</Label>\n                    <Select value={qcForm.testType} onValueChange={(value) => setQcForm(prev => ({ ...prev, testType: value }))}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select test type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"glucose\">Glucose</SelectItem>\n                        <SelectItem value=\"cholesterol\">Cholesterol</SelectItem>\n                        <SelectItem value=\"hemoglobin\">Hemoglobin</SelectItem>\n                        <SelectItem value=\"creatinine\">Creatinine</SelectItem>\n                        <SelectItem value=\"sodium\">Sodium</SelectItem>\n                        <SelectItem value=\"potassium\">Potassium</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"qcLevel\">QC Level *</Label>\n                    <Select value={qcForm.qcLevel} onValueChange={(value) => setQcForm(prev => ({ ...prev, qcLevel: value }))}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select QC level\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"level1\">Level 1 (Normal)</SelectItem>\n                        <SelectItem value=\"level2\">Level 2 (Abnormal)</SelectItem>\n                        <SelectItem value=\"level3\">Level 3 (Pathological)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"lotNumber\">Lot Number *</Label>\n                    <Input\n                      id=\"lotNumber\"\n                      required\n                      value={qcForm.lotNumber}\n                      onChange={(e) => setQcForm(prev => ({ ...prev, lotNumber: e.target.value }))}\n                      placeholder=\"QC lot number\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"tolerance\">Tolerance (%) *</Label>\n                    <Input\n                      id=\"tolerance\"\n                      type=\"number\"\n                      step=\"0.1\"\n                      required\n                      value={qcForm.tolerance}\n                      onChange={(e) => setQcForm(prev => ({ ...prev, tolerance: e.target.value }))}\n                      placeholder=\"Acceptable tolerance\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"expectedValue\">Expected Value *</Label>\n                    <Input\n                      id=\"expectedValue\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      required\n                      value={qcForm.expectedValue}\n                      onChange={(e) => setQcForm(prev => ({ ...prev, expectedValue: e.target.value }))}\n                      placeholder=\"Expected QC value\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"actualValue\">Actual Value *</Label>\n                    <Input\n                      id=\"actualValue\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      required\n                      value={qcForm.actualValue}\n                      onChange={(e) => setQcForm(prev => ({ ...prev, actualValue: e.target.value }))}\n                      placeholder=\"Measured QC value\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"comments\">Comments</Label>\n                  <Input\n                    id=\"comments\"\n                    value={qcForm.comments}\n                    onChange={(e) => setQcForm(prev => ({ ...prev, comments: e.target.value }))}\n                    placeholder=\"Additional comments or observations\"\n                  />\n                </div>\n\n                <div className=\"flex justify-end space-x-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\"\n                    onClick={() => {\n                      console.log('Clearing QC form...');\n                      setQcForm({\n                        testType: '',\n                        qcLevel: '',\n                        lotNumber: '',\n                        expectedValue: '',\n                        actualValue: '',\n                        tolerance: '',\n                        comments: '',\n                      });\n                    }}\n                  >\n                    Clear\n                  </Button>\n                  <Button type=\"submit\">\n                    Submit QC Result\n                  </Button>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"results\" className=\"mt-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Quality Control Results</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead>\n                    <tr className=\"border-b border-gray-200 dark:border-gray-700\">\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Test Type\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        QC Level\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Lot Number\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Expected\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Actual\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Deviation\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Status\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Run By\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Run Time\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"divide-y divide-gray-200 dark:divide-gray-700\">\n                    {mockQcResults.map((qc) => (\n                      <tr key={qc.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-800\">\n                        <td className=\"py-3 px-4 font-medium\">\n                          {qc.testType}\n                        </td>\n                        <td className=\"py-3 px-4 text-sm\">\n                          {qc.qcLevel}\n                        </td>\n                        <td className=\"py-3 px-4 text-sm font-mono\">\n                          {qc.lotNumber}\n                        </td>\n                        <td className=\"py-3 px-4 text-sm test-result\">\n                          {qc.expectedValue}\n                        </td>\n                        <td className=\"py-3 px-4 text-sm test-result\">\n                          {qc.actualValue}\n                        </td>\n                        <td className=\"py-3 px-4 text-sm\">\n                          <span className={`${\n                            Math.abs(parseFloat(calculateDeviation(qc.expectedValue, qc.actualValue))) > qc.tolerance\n                              ? 'text-red-600 font-medium'\n                              : 'text-green-600'\n                          }`}>\n                            {calculateDeviation(qc.expectedValue, qc.actualValue)}%\n                          </span>\n                        </td>\n                        <td className=\"py-3 px-4\">\n                          {getQcStatusBadge(qc.passed)}\n                        </td>\n                        <td className=\"py-3 px-4 text-sm\">\n                          {qc.runBy}\n                        </td>\n                        <td className=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">\n                          {new Date(qc.runDateTime).toLocaleString()}\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":18662},"client/src/pages/reception.tsx":{"content":"import { useState } from 'react';\nimport { usePatients } from '@/hooks/use-patients';\nimport { PatientRegistration } from '@/components/reception/patient-registration';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Search, UserPlus, Users, Calendar } from 'lucide-react';\nimport { formatDistanceToNow } from 'date-fns';\n\nexport default function Reception() {\n  const { patients, searchPatients, isLoading } = usePatients();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchResults, setSearchResults] = useState<any[]>([]);\n\n  const handleSearch = async () => {\n    if (searchQuery.trim()) {\n      try {\n        const results = await searchPatients(searchQuery);\n        setSearchResults(results);\n      } catch (error) {\n        console.error('Search failed:', error);\n      }\n    }\n  };\n\n  const formatGender = (gender: string) => {\n    switch (gender) {\n      case 'male': return 'Male';\n      case 'female': return 'Female';\n      case 'other': return 'Other';\n      default: return 'Not specified';\n    }\n  };\n\n  const calculateAge = (dateOfBirth: string) => {\n    const today = new Date();\n    const birth = new Date(dateOfBirth);\n    const age = today.getFullYear() - birth.getFullYear();\n    const monthDiff = today.getMonth() - birth.getMonth();\n    \n    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {\n      return age - 1;\n    }\n    return age;\n  };\n\n  return (\n    <div className=\"p-4 sm:p-6 lg:p-8 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n            Reception\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Patient registration and management\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Users className=\"h-5 w-5 text-gray-500\" />\n          <span className=\"text-sm text-gray-500\">\n            {patients.length} patients registered\n          </span>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"register\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"register\" className=\"flex items-center gap-2\">\n            <UserPlus className=\"h-4 w-4\" />\n            Register Patient\n          </TabsTrigger>\n          <TabsTrigger value=\"search\" className=\"flex items-center gap-2\">\n            <Search className=\"h-4 w-4\" />\n            Search Patients\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"register\" className=\"mt-6\">\n          <PatientRegistration />\n        </TabsContent>\n\n        <TabsContent value=\"search\" className=\"mt-6 space-y-6\">\n          {/* Search Section */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Search className=\"h-5 w-5\" />\n                Patient Search\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex gap-4\">\n                <div className=\"flex-1\">\n                  <Input\n                    placeholder=\"Search by name, patient ID, phone, or email...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    onKeyPress={(e) => e.key === 'Enter' && handleSearch()}\n                  />\n                </div>\n                <Button onClick={handleSearch} disabled={isLoading}>\n                  <Search className=\"h-4 w-4 mr-2\" />\n                  Search\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Search Results */}\n          {searchResults.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Search Results ({searchResults.length})</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {searchResults.map((patient) => (\n                    <div\n                      key={patient.id}\n                      className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800\"\n                    >\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-4\">\n                          <div>\n                            <h3 className=\"font-medium text-gray-900 dark:text-white patient-name\">\n                              {patient.firstName} {patient.lastName}\n                            </h3>\n                            <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                              ID: {patient.patientId}\n                            </p>\n                          </div>\n                          <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                            <div>Age: {calculateAge(patient.dateOfBirth)} years</div>\n                            <div>Gender: {formatGender(patient.gender)}</div>\n                          </div>\n                          {patient.phoneNumber && (\n                            <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                              Phone: {patient.phoneNumber}\n                            </div>\n                          )}\n                          {patient.email && (\n                            <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                              Email: {patient.email}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Badge variant=\"outline\">\n                          {formatDistanceToNow(new Date(patient.createdAt), { addSuffix: true })}\n                        </Badge>\n                        <Button variant=\"outline\" size=\"sm\">\n                          View Details\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Recent Patients */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Calendar className=\"h-5 w-5\" />\n                Recent Patients\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {patients.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <Users className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-500 dark:text-gray-400\">No patients found</p>\n                  <p className=\"text-sm text-gray-400 dark:text-gray-500\">\n                    Register your first patient to get started\n                  </p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {patients.slice(0, 10).map((patient: any) => (\n                    <div\n                      key={patient.id}\n                      className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800\"\n                    >\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-4\">\n                          <div>\n                            <h3 className=\"font-medium text-gray-900 dark:text-white patient-name\">\n                              {patient.firstName} {patient.lastName}\n                            </h3>\n                            <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                              ID: {patient.patientId}\n                            </p>\n                          </div>\n                          <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                            <div>Age: {calculateAge(patient.dateOfBirth)} years</div>\n                            <div>Gender: {formatGender(patient.gender)}</div>\n                          </div>\n                          {patient.phoneNumber && (\n                            <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                              Phone: {patient.phoneNumber}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Badge variant=\"outline\">\n                          {formatDistanceToNow(new Date(patient.createdAt), { addSuffix: true })}\n                        </Badge>\n                        <Button variant=\"outline\" size=\"sm\">\n                          View Details\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":9303},"client/src/pages/reports.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { BarChart3, FileText, Download, Calendar, TrendingUp, PieChart, Activity } from 'lucide-react';\nimport { ResponsiveContainer, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, LineChart, Line, PieChart as RechartsPieChart, Pie, Cell } from 'recharts';\n\nexport default function Reports() {\n  const [reportFilters, setReportFilters] = useState({\n    reportType: '',\n    dateFrom: '',\n    dateTo: '',\n    department: '',\n    format: 'pdf',\n  });\n\n  // Mock data for charts\n  const sampleVolumeData = [\n    { month: 'Jan', samples: 1250, completed: 1180 },\n    { month: 'Feb', samples: 1180, completed: 1140 },\n    { month: 'Mar', samples: 1350, completed: 1290 },\n    { month: 'Apr', samples: 1420, completed: 1380 },\n    { month: 'May', samples: 1380, completed: 1340 },\n    { month: 'Jun', samples: 1480, completed: 1450 },\n  ];\n\n  const departmentData = [\n    { name: 'Chemistry', value: 35, count: 1250, color: 'hsl(207, 90%, 54%)' },\n    { name: 'Hematology', value: 25, count: 890, color: 'hsl(142, 71%, 45%)' },\n    { name: 'Microbiology', value: 20, count: 710, color: 'hsl(45, 93%, 47%)' },\n    { name: 'Immunology', value: 15, count: 535, color: 'hsl(262, 52%, 47%)' },\n    { name: 'Pathology', value: 5, count: 180, color: 'hsl(346, 77%, 49%)' },\n  ];\n\n  const turnaroundTimeData = [\n    { test: 'CBC', target: 2, actual: 1.8, status: 'on_target' },\n    { test: 'BMP', target: 3, actual: 2.9, status: 'on_target' },\n    { test: 'Lipid Panel', target: 4, actual: 4.2, status: 'delayed' },\n    { test: 'Liver Panel', target: 4, actual: 3.7, status: 'on_target' },\n    { test: 'Thyroid', target: 6, actual: 5.8, status: 'on_target' },\n    { test: 'Culture', target: 48, actual: 46, status: 'on_target' },\n  ];\n\n  const qualityMetrics = [\n    { metric: 'QC Pass Rate', value: 98.5, target: 95, unit: '%' },\n    { metric: 'Repeat Rate', value: 2.1, target: 3, unit: '%' },\n    { metric: 'Critical Values', value: 12, target: 15, unit: 'alerts' },\n    { metric: 'Equipment Uptime', value: 99.2, target: 98, unit: '%' },\n  ];\n\n  const handleGenerateReport = () => {\n    console.log('Generating report with filters:', reportFilters);\n    \n    if (!reportFilters.reportType) {\n      alert('Please select a report type');\n      return;\n    }\n    \n    if (!reportFilters.dateFrom || !reportFilters.dateTo) {\n      alert('Please select date range');\n      return;\n    }\n    \n    // Generate report content based on type\n    let reportContent = '';\n    const reportDate = new Date().toLocaleDateString();\n    \n    switch (reportFilters.reportType) {\n      case 'sample_volume':\n        reportContent = `Sample Volume Report - ${reportDate}\\n` +\n          `Date Range: ${reportFilters.dateFrom} to ${reportFilters.dateTo}\\n` +\n          `Department: ${reportFilters.department || 'All'}\\n\\n` +\n          sampleVolumeData.map(item => `${item.month}: ${item.samples} samples, ${item.completed} completed`).join('\\n');\n        break;\n      case 'turnaround_time':\n        reportContent = `Turnaround Time Report - ${reportDate}\\n` +\n          `Date Range: ${reportFilters.dateFrom} to ${reportFilters.dateTo}\\n\\n` +\n          turnaroundTimeData.map(item => `${item.test}: Target ${item.target}h, Actual ${item.actual}h (${item.status})`).join('\\n');\n        break;\n      case 'quality_metrics':\n        reportContent = `Quality Metrics Report - ${reportDate}\\n` +\n          `Date Range: ${reportFilters.dateFrom} to ${reportFilters.dateTo}\\n\\n` +\n          qualityMetrics.map(item => `${item.metric}: ${item.value}${item.unit} (Target: ${item.target}${item.unit})`).join('\\n');\n        break;\n      default:\n        reportContent = `General Lab Report - ${reportDate}\\n` +\n          `Date Range: ${reportFilters.dateFrom} to ${reportFilters.dateTo}\\n` +\n          `Department: ${reportFilters.department || 'All'}\\n\\n` +\n          `Report generated successfully with current lab data.`;\n    }\n    \n    // Create and download file\n    const fileExtension = reportFilters.format === 'excel' ? 'csv' : reportFilters.format;\n    const mimeType = reportFilters.format === 'pdf' ? 'text/plain' : 'text/csv';\n    const blob = new Blob([reportContent], { type: mimeType });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.style.display = 'none';\n    a.href = url;\n    a.download = `lab-report-${reportFilters.reportType}-${new Date().toISOString().split('T')[0]}.${fileExtension}`;\n    document.body.appendChild(a);\n    a.click();\n    window.URL.revokeObjectURL(url);\n    document.body.removeChild(a);\n    \n    alert(`${reportFilters.reportType.replace('_', ' ')} report generated and downloaded successfully!`);\n  };\n\n  const handleExport = (format: string) => {\n    console.log(`Exporting in ${format} format`);\n    \n    // Prepare comprehensive data export\n    const exportData = {\n      sampleVolume: sampleVolumeData,\n      departmentBreakdown: departmentData,\n      turnaroundTimes: turnaroundTimeData,\n      qualityMetrics: qualityMetrics,\n      exportDate: new Date().toLocaleDateString(),\n      generatedBy: 'Laboratory Information System'\n    };\n    \n    let content = '';\n    let fileName = '';\n    let mimeType = '';\n    \n    if (format === 'excel' || format === 'csv') {\n      // Create CSV format\n      content = `Laboratory Data Export - ${exportData.exportDate}\\n\\n` +\n        `Sample Volume Data:\\n` +\n        `Month,Samples,Completed\\n` +\n        exportData.sampleVolume.map(item => `${item.month},${item.samples},${item.completed}`).join('\\n') +\n        `\\n\\nDepartment Breakdown:\\n` +\n        `Department,Percentage,Count\\n` +\n        exportData.departmentBreakdown.map(item => `${item.name},${item.value}%,${item.count}`).join('\\n') +\n        `\\n\\nTurnaround Times:\\n` +\n        `Test,Target Hours,Actual Hours,Status\\n` +\n        exportData.turnaroundTimes.map(item => `${item.test},${item.target},${item.actual},${item.status}`).join('\\n') +\n        `\\n\\nQuality Metrics:\\n` +\n        `Metric,Value,Target,Unit\\n` +\n        exportData.qualityMetrics.map(item => `${item.metric},${item.value},${item.target},${item.unit}`).join('\\n');\n      \n      fileName = `lab-data-export-${new Date().toISOString().split('T')[0]}.csv`;\n      mimeType = 'text/csv';\n    } else {\n      // Create JSON format for other types\n      content = JSON.stringify(exportData, null, 2);\n      fileName = `lab-data-export-${new Date().toISOString().split('T')[0]}.json`;\n      mimeType = 'application/json';\n    }\n    \n    // Create and download file\n    const blob = new Blob([content], { type: mimeType });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.style.display = 'none';\n    a.href = url;\n    a.download = fileName;\n    document.body.appendChild(a);\n    a.click();\n    window.URL.revokeObjectURL(url);\n    document.body.removeChild(a);\n    \n    alert(`Lab data exported successfully in ${format.toUpperCase()} format!`);\n  };\n\n  return (\n    <div className=\"p-4 sm:p-6 lg:p-8 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n            Reports & Analytics\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Laboratory workflow and statistical reports\n          </p>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          <Button variant=\"outline\" onClick={() => handleExport('excel')}>\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export Data\n          </Button>\n          <div className=\"flex items-center gap-2\">\n            <BarChart3 className=\"h-5 w-5 text-gray-500\" />\n            <span className=\"text-sm text-gray-500\">\n              Real-time analytics\n            </span>\n          </div>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"dashboard\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"dashboard\" className=\"flex items-center gap-2\">\n            <Activity className=\"h-4 w-4\" />\n            Dashboard\n          </TabsTrigger>\n          <TabsTrigger value=\"generate\" className=\"flex items-center gap-2\">\n            <FileText className=\"h-4 w-4\" />\n            Generate Reports\n          </TabsTrigger>\n          <TabsTrigger value=\"analytics\" className=\"flex items-center gap-2\">\n            <TrendingUp className=\"h-4 w-4\" />\n            Analytics\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"dashboard\" className=\"mt-6 space-y-6\">\n          {/* Key Metrics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                      Monthly Samples\n                    </p>\n                    <p className=\"text-2xl font-bold text-blue-600\">\n                      1,480\n                    </p>\n                    <p className=\"text-xs text-green-600 mt-1\">+7.2% from last month</p>\n                  </div>\n                  <div className=\"h-12 w-12 rounded-lg flex items-center justify-center bg-blue-100 dark:bg-blue-900/20\">\n                    <BarChart3 className=\"h-6 w-6 text-blue-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                      Completion Rate\n                    </p>\n                    <p className=\"text-2xl font-bold text-green-600\">\n                      98.0%\n                    </p>\n                    <p className=\"text-xs text-green-600 mt-1\">+0.5% improvement</p>\n                  </div>\n                  <div className=\"h-12 w-12 rounded-lg flex items-center justify-center bg-green-100 dark:bg-green-900/20\">\n                    <TrendingUp className=\"h-6 w-6 text-green-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                      Avg Turnaround\n                    </p>\n                    <p className=\"text-2xl font-bold text-orange-600\">\n                      3.2h\n                    </p>\n                    <p className=\"text-xs text-red-600 mt-1\">+0.1h from target</p>\n                  </div>\n                  <div className=\"h-12 w-12 rounded-lg flex items-center justify-center bg-orange-100 dark:bg-orange-900/20\">\n                    <Calendar className=\"h-6 w-6 text-orange-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                      QC Pass Rate\n                    </p>\n                    <p className=\"text-2xl font-bold text-purple-600\">\n                      98.5%\n                    </p>\n                    <p className=\"text-xs text-green-600 mt-1\">Above target (95%)</p>\n                  </div>\n                  <div className=\"h-12 w-12 rounded-lg flex items-center justify-center bg-purple-100 dark:bg-purple-900/20\">\n                    <Activity className=\"h-6 w-6 text-purple-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Charts */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Sample Volume Trend */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Sample Volume Trend (6 Months)</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-64\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <BarChart data={sampleVolumeData}>\n                      <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-gray-200 dark:stroke-gray-700\" />\n                      <XAxis dataKey=\"month\" className=\"text-xs\" />\n                      <YAxis className=\"text-xs\" />\n                      <Tooltip \n                        contentStyle={{\n                          backgroundColor: 'hsl(var(--background))',\n                          border: '1px solid hsl(var(--border))',\n                          borderRadius: '6px',\n                        }}\n                      />\n                      <Bar dataKey=\"samples\" fill=\"hsl(207, 90%, 54%)\" name=\"Total Samples\" />\n                      <Bar dataKey=\"completed\" fill=\"hsl(142, 71%, 45%)\" name=\"Completed\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Department Distribution */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Sample Distribution by Department</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-64\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <RechartsPieChart>\n                      <Pie\n                        data={departmentData}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        innerRadius={40}\n                        outerRadius={80}\n                        paddingAngle={2}\n                        dataKey=\"value\"\n                      >\n                        {departmentData.map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={entry.color} />\n                        ))}\n                      </Pie>\n                      <Tooltip\n                        contentStyle={{\n                          backgroundColor: 'hsl(var(--background))',\n                          border: '1px solid hsl(var(--border))',\n                          borderRadius: '6px',\n                        }}\n                        formatter={(value: number, name: string, props: any) => [\n                          `${value}% (${props.payload.count} samples)`,\n                          name\n                        ]}\n                      />\n                    </RechartsPieChart>\n                  </ResponsiveContainer>\n                </div>\n                <div className=\"mt-4 flex flex-wrap gap-4 justify-center\">\n                  {departmentData.map((item) => (\n                    <div key={item.name} className=\"flex items-center gap-2\">\n                      <div \n                        className=\"w-3 h-3 rounded-full\" \n                        style={{ backgroundColor: item.color }}\n                      />\n                      <span className=\"text-xs text-gray-600 dark:text-gray-400\">\n                        {item.name}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Performance Tables */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Turnaround Times */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Turnaround Time Performance</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead>\n                      <tr className=\"border-b border-gray-200 dark:border-gray-700\">\n                        <th className=\"text-left py-2 text-sm font-medium\">Test</th>\n                        <th className=\"text-left py-2 text-sm font-medium\">Target (hrs)</th>\n                        <th className=\"text-left py-2 text-sm font-medium\">Actual (hrs)</th>\n                        <th className=\"text-left py-2 text-sm font-medium\">Status</th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"divide-y divide-gray-200 dark:divide-gray-700\">\n                      {turnaroundTimeData.map((item, index) => (\n                        <tr key={index}>\n                          <td className=\"py-2 text-sm font-medium\">{item.test}</td>\n                          <td className=\"py-2 text-sm\">{item.target}</td>\n                          <td className=\"py-2 text-sm\">{item.actual}</td>\n                          <td className=\"py-2\">\n                            <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${\n                              item.status === 'on_target' \n                                ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400'\n                                : 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400'\n                            }`}>\n                              {item.status === 'on_target' ? 'On Target' : 'Delayed'}\n                            </span>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quality Metrics */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Quality Metrics</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {qualityMetrics.map((metric, index) => (\n                    <div key={index} className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                          {metric.metric}\n                        </p>\n                        <p className=\"text-xs text-gray-500\">\n                          Target: {metric.target}{metric.unit}\n                        </p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className={`text-lg font-bold ${\n                          metric.value >= metric.target ? 'text-green-600' : 'text-red-600'\n                        }`}>\n                          {metric.value}{metric.unit}\n                        </p>\n                        <p className={`text-xs ${\n                          metric.value >= metric.target ? 'text-green-600' : 'text-red-600'\n                        }`}>\n                          {metric.value >= metric.target ? '✓ Met' : '✗ Below'}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"generate\" className=\"mt-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <FileText className=\"h-5 w-5\" />\n                Generate Custom Report\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"reportType\">Report Type *</Label>\n                    <Select value={reportFilters.reportType} onValueChange={(value) => setReportFilters(prev => ({ ...prev, reportType: value }))}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select report type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"daily_summary\">Daily Summary</SelectItem>\n                        <SelectItem value=\"weekly_summary\">Weekly Summary</SelectItem>\n                        <SelectItem value=\"monthly_summary\">Monthly Summary</SelectItem>\n                        <SelectItem value=\"department_performance\">Department Performance</SelectItem>\n                        <SelectItem value=\"turnaround_time\">Turnaround Time Analysis</SelectItem>\n                        <SelectItem value=\"quality_control\">Quality Control Report</SelectItem>\n                        <SelectItem value=\"financial_summary\">Financial Summary</SelectItem>\n                        <SelectItem value=\"custom\">Custom Report</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"department\">Department</Label>\n                    <Select value={reportFilters.department} onValueChange={(value) => setReportFilters(prev => ({ ...prev, department: value }))}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"All departments\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Departments</SelectItem>\n                        <SelectItem value=\"chemistry\">Chemistry</SelectItem>\n                        <SelectItem value=\"hematology\">Hematology</SelectItem>\n                        <SelectItem value=\"microbiology\">Microbiology</SelectItem>\n                        <SelectItem value=\"immunology\">Immunology</SelectItem>\n                        <SelectItem value=\"pathology\">Pathology</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"dateFrom\">From Date *</Label>\n                    <Input\n                      id=\"dateFrom\"\n                      type=\"date\"\n                      required\n                      value={reportFilters.dateFrom}\n                      onChange={(e) => setReportFilters(prev => ({ ...prev, dateFrom: e.target.value }))}\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"dateTo\">To Date *</Label>\n                    <Input\n                      id=\"dateTo\"\n                      type=\"date\"\n                      required\n                      value={reportFilters.dateTo}\n                      onChange={(e) => setReportFilters(prev => ({ ...prev, dateTo: e.target.value }))}\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"format\">Export Format</Label>\n                  <Select value={reportFilters.format} onValueChange={(value) => setReportFilters(prev => ({ ...prev, format: value }))}>\n                    <SelectTrigger className=\"w-48\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"pdf\">PDF Report</SelectItem>\n                      <SelectItem value=\"excel\">Excel Spreadsheet</SelectItem>\n                      <SelectItem value=\"csv\">CSV Data</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"flex justify-end space-x-4\">\n                  <Button \n                    variant=\"outline\"\n                    onClick={() => {\n                      console.log('Previewing report with filters:', reportFilters);\n                      if (!reportFilters.reportType) {\n                        alert('Please select a report type to preview');\n                        return;\n                      }\n                      \n                      const previewData = {\n                        type: reportFilters.reportType,\n                        dateRange: `${reportFilters.dateFrom} to ${reportFilters.dateTo}`,\n                        department: reportFilters.department || 'All Departments',\n                        format: reportFilters.format,\n                        estimatedSize: '2.3 MB',\n                        estimatedPages: '15-20 pages'\n                      };\n                      \n                      alert(`Report Preview:\\n\\n` +\n                        `Type: ${previewData.type.replace('_', ' ').toUpperCase()}\\n` +\n                        `Date Range: ${previewData.dateRange}\\n` +\n                        `Department: ${previewData.department}\\n` +\n                        `Format: ${previewData.format.toUpperCase()}\\n` +\n                        `Estimated Size: ${previewData.estimatedSize}\\n` +\n                        `Estimated Pages: ${previewData.estimatedPages}\\n\\n` +\n                        `Click \"Generate Report\" to create and download the full report.`);\n                    }}\n                  >\n                    Preview Report\n                  </Button>\n                  <Button onClick={handleGenerateReport}>\n                    <Download className=\"h-4 w-4 mr-2\" />\n                    Generate Report\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"analytics\" className=\"mt-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <TrendingUp className=\"h-5 w-5\" />\n                Advanced Analytics\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-8\">\n                <TrendingUp className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-gray-500 dark:text-gray-400 text-lg\">\n                  Advanced Analytics Dashboard\n                </p>\n                <div className=\"mt-4 space-y-2\">\n                  <Button \n                    variant=\"outline\" \n                    className=\"mr-2\"\n                    onClick={() => {\n                      console.log('Opening predictive analytics...');\n                      alert('Predictive Analytics:\\n\\n' +\n                        '• Sample volume forecasting based on historical trends\\n' +\n                        '• Equipment maintenance predictions\\n' +\n                        '• Peak workload analysis\\n' +\n                        '• Quality control trend analysis\\n\\n' +\n                        'Advanced analytics features are being prepared for deployment.');\n                    }}\n                  >\n                    Predictive Analytics\n                  </Button>\n                  <Button \n                    variant=\"outline\"\n                    onClick={() => {\n                      console.log('Opening trend analysis...');\n                      alert('Trend Analysis Available:\\n\\n' +\n                        '• Monthly sample volume trends\\n' +\n                        '• Department performance comparison\\n' +\n                        '• Turnaround time improvements\\n' +\n                        '• Seasonal pattern recognition\\n\\n' +\n                        'Use the Dashboard and Custom Reports tabs to access current trend data.');\n                    }}\n                  >\n                    Trend Analysis\n                  </Button>\n                </div>\n                <p className=\"text-sm text-gray-400 dark:text-gray-500 mt-4\">\n                  Machine learning insights and automated reporting coming in next update\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":28352},"client/src/pages/results.tsx":{"content":"import { useState } from 'react';\nimport { ResultsEntry } from '@/components/results/results-entry';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Search, ClipboardCheck, FileText, AlertTriangle } from 'lucide-react';\n\nexport default function Results() {\n  const [searchQuery, setSearchQuery] = useState('');\n\n  // Mock data for demonstration\n  const mockResults = [\n    {\n      id: '1',\n      sampleId: 'LAB-20241215-001',\n      patientName: 'John Martinez',\n      testType: 'Complete Blood Count',\n      status: 'completed',\n      enteredBy: 'Dr. Sarah Chen',\n      verifiedBy: 'Dr. Michael Roberts',\n      enteredAt: '2024-12-15T14:30:00Z',\n      verifiedAt: '2024-12-15T15:15:00Z',\n      criticalValues: false,\n    },\n    {\n      id: '2',\n      sampleId: 'LAB-20241215-002',\n      patientName: 'Emma Thompson',\n      testType: 'Lipid Panel',\n      status: 'pending_verification',\n      enteredBy: 'Tech. Lisa Wang',\n      verifiedBy: null,\n      enteredAt: '2024-12-15T13:45:00Z',\n      verifiedAt: null,\n      criticalValues: true,\n    },\n    {\n      id: '3',\n      sampleId: 'LAB-20241215-003',\n      patientName: 'Michael Chen',\n      testType: 'Glucose Tolerance',\n      status: 'in_progress',\n      enteredBy: null,\n      verifiedBy: null,\n      enteredAt: null,\n      verifiedAt: null,\n      criticalValues: false,\n    },\n  ];\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return <Badge className=\"status-completed\">Completed</Badge>;\n      case 'pending_verification':\n        return <Badge className=\"status-in-progress\">Pending Verification</Badge>;\n      case 'in_progress':\n        return <Badge className=\"status-received\">In Progress</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const filteredResults = mockResults.filter(result =>\n    searchQuery === '' ||\n    result.sampleId.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    result.patientName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    result.testType.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  return (\n    <div className=\"p-4 sm:p-6 lg:p-8 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n            Test Results\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Test results entry, validation, and management\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <FileText className=\"h-5 w-5 text-gray-500\" />\n          <span className=\"text-sm text-gray-500\">\n            {mockResults.length} test results\n          </span>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"entry\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"entry\" className=\"flex items-center gap-2\">\n            <ClipboardCheck className=\"h-4 w-4\" />\n            Results Entry\n          </TabsTrigger>\n          <TabsTrigger value=\"manage\" className=\"flex items-center gap-2\">\n            <Search className=\"h-4 w-4\" />\n            Manage Results\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"entry\" className=\"mt-6\">\n          <ResultsEntry />\n        </TabsContent>\n\n        <TabsContent value=\"manage\" className=\"mt-6 space-y-6\">\n          {/* Search */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Search className=\"h-5 w-5\" />\n                Search Results\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex gap-4\">\n                <div className=\"flex-1\">\n                  <Input\n                    placeholder=\"Search by sample ID, patient name, or test type...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                  />\n                </div>\n                <Button variant=\"outline\">\n                  <Search className=\"h-4 w-4 mr-2\" />\n                  Search\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Statistics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                      Completed\n                    </p>\n                    <p className=\"text-2xl font-bold text-green-600\">\n                      {mockResults.filter(r => r.status === 'completed').length}\n                    </p>\n                  </div>\n                  <div className=\"h-12 w-12 rounded-lg flex items-center justify-center bg-green-100 dark:bg-green-900/20\">\n                    <ClipboardCheck className=\"h-6 w-6 text-green-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                      Pending Verification\n                    </p>\n                    <p className=\"text-2xl font-bold text-yellow-600\">\n                      {mockResults.filter(r => r.status === 'pending_verification').length}\n                    </p>\n                  </div>\n                  <div className=\"h-12 w-12 rounded-lg flex items-center justify-center bg-yellow-100 dark:bg-yellow-900/20\">\n                    <AlertTriangle className=\"h-6 w-6 text-yellow-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                      In Progress\n                    </p>\n                    <p className=\"text-2xl font-bold text-blue-600\">\n                      {mockResults.filter(r => r.status === 'in_progress').length}\n                    </p>\n                  </div>\n                  <div className=\"h-12 w-12 rounded-lg flex items-center justify-center bg-blue-100 dark:bg-blue-900/20\">\n                    <FileText className=\"h-6 w-6 text-blue-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                      Critical Values\n                    </p>\n                    <p className=\"text-2xl font-bold text-red-600\">\n                      {mockResults.filter(r => r.criticalValues).length}\n                    </p>\n                  </div>\n                  <div className=\"h-12 w-12 rounded-lg flex items-center justify-center bg-red-100 dark:bg-red-900/20\">\n                    <AlertTriangle className=\"h-6 w-6 text-red-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Results List */}\n          <Card>\n            <CardHeader>\n              <CardTitle>\n                Test Results ({filteredResults.length})\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {filteredResults.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <FileText className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-500 dark:text-gray-400\">No results found</p>\n                  <p className=\"text-sm text-gray-400 dark:text-gray-500\">\n                    {searchQuery \n                      ? 'Try adjusting your search criteria'\n                      : 'Enter test results to get started'\n                    }\n                  </p>\n                </div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead>\n                      <tr className=\"border-b border-gray-200 dark:border-gray-700\">\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                          Sample ID\n                        </th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                          Patient\n                        </th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                          Test Type\n                        </th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                          Status\n                        </th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                          Entered By\n                        </th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                          Critical Values\n                        </th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                          Actions\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"divide-y divide-gray-200 dark:divide-gray-700\">\n                      {filteredResults.map((result) => (\n                        <tr key={result.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-800\">\n                          <td className=\"py-3 px-4\">\n                            <span className=\"sample-id font-mono text-sm\">\n                              {result.sampleId}\n                            </span>\n                          </td>\n                          <td className=\"py-3 px-4\">\n                            <div className=\"patient-name\">\n                              {result.patientName}\n                            </div>\n                          </td>\n                          <td className=\"py-3 px-4 text-sm\">\n                            {result.testType}\n                          </td>\n                          <td className=\"py-3 px-4\">\n                            {getStatusBadge(result.status)}\n                          </td>\n                          <td className=\"py-3 px-4 text-sm\">\n                            {result.enteredBy || 'Not assigned'}\n                          </td>\n                          <td className=\"py-3 px-4\">\n                            {result.criticalValues ? (\n                              <div className=\"flex items-center gap-1\">\n                                <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n                                <span className=\"text-red-600 text-sm font-medium\">Yes</span>\n                              </div>\n                            ) : (\n                              <span className=\"text-gray-500 text-sm\">No</span>\n                            )}\n                          </td>\n                          <td className=\"py-3 px-4\">\n                            <div className=\"flex gap-2\">\n                              <Button variant=\"outline\" size=\"sm\">\n                                View\n                              </Button>\n                              {result.status === 'pending_verification' && (\n                                <Button size=\"sm\">\n                                  Verify\n                                </Button>\n                              )}\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":12658},"client/src/pages/sampling.tsx":{"content":"import { useState } from 'react';\nimport { useSamples } from '@/hooks/use-samples';\nimport { SampleForm } from '@/components/sampling/sample-form';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Search, TestTube, Beaker, ScanLine } from 'lucide-react';\nimport { formatDistanceToNow } from 'date-fns';\nimport { SAMPLE_STATUSES } from '@/lib/constants';\n\nexport default function Sampling() {\n  const { samples, isLoading } = useSamples();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n\n  const filteredSamples = samples.filter(sample => {\n    const matchesSearch = searchQuery === '' || \n      sample.sampleId.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      (sample.patient && `${sample.patient.firstName} ${sample.patient.lastName}`.toLowerCase().includes(searchQuery.toLowerCase()));\n    \n    const matchesStatus = statusFilter === 'all' || sample.status === statusFilter;\n    \n    return matchesSearch && matchesStatus;\n  });\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = SAMPLE_STATUSES.find(s => s.value === status);\n    if (!statusConfig) return null;\n    \n    return (\n      <Badge className={`status-${status}`}>\n        {statusConfig.label}\n      </Badge>\n    );\n  };\n\n  const getPriorityBadge = (priority: string) => {\n    return (\n      <Badge className={`priority-${priority}`}>\n        {priority.toUpperCase()}\n      </Badge>\n    );\n  };\n\n  return (\n    <div className=\"p-4 sm:p-6 lg:p-8 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n            Sample Management\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Sample collection, tracking, and management\n          </p>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          <Button variant=\"outline\" className=\"flex items-center gap-2\">\n            <ScanLine className=\"h-4 w-4\" />\n            Scan Barcode\n          </Button>\n          <div className=\"flex items-center gap-2\">\n            <Beaker className=\"h-5 w-5 text-gray-500\" />\n            <span className=\"text-sm text-gray-500\">\n              {samples.length} samples total\n            </span>\n          </div>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"collect\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"collect\" className=\"flex items-center gap-2\">\n            <TestTube className=\"h-4 w-4\" />\n            Collect Sample\n          </TabsTrigger>\n          <TabsTrigger value=\"manage\" className=\"flex items-center gap-2\">\n            <Search className=\"h-4 w-4\" />\n            Manage Samples\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"collect\" className=\"mt-6\">\n          <SampleForm />\n        </TabsContent>\n\n        <TabsContent value=\"manage\" className=\"mt-6 space-y-6\">\n          {/* Search and Filter */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Search className=\"h-5 w-5\" />\n                Sample Search & Filter\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex gap-4\">\n                <div className=\"flex-1\">\n                  <Input\n                    placeholder=\"Search by sample ID or patient name...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                  />\n                </div>\n                <select\n                  className=\"px-3 py-2 border rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-white\"\n                  value={statusFilter}\n                  onChange={(e) => setStatusFilter(e.target.value)}\n                >\n                  <option value=\"all\">All Status</option>\n                  {SAMPLE_STATUSES.map(status => (\n                    <option key={status.value} value={status.value}>\n                      {status.label}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Sample Statistics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            {SAMPLE_STATUSES.map(status => {\n              const count = samples.filter(s => s.status === status.value).length;\n              return (\n                <Card key={status.value}>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                          {status.label}\n                        </p>\n                        <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                          {count}\n                        </p>\n                      </div>\n                      <div className={`h-12 w-12 rounded-lg flex items-center justify-center bg-${status.color}-100 dark:bg-${status.color}-900/20`}>\n                        <TestTube className={`h-6 w-6 text-${status.color}-600`} />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n\n          {/* Samples List */}\n          <Card>\n            <CardHeader>\n              <CardTitle>\n                Sample List ({filteredSamples.length})\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {filteredSamples.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <TestTube className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-500 dark:text-gray-400\">No samples found</p>\n                  <p className=\"text-sm text-gray-400 dark:text-gray-500\">\n                    {searchQuery || statusFilter !== 'all' \n                      ? 'Try adjusting your search or filter criteria'\n                      : 'Collect your first sample to get started'\n                    }\n                  </p>\n                </div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead>\n                      <tr className=\"border-b border-gray-200 dark:border-gray-700\">\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                          Sample ID\n                        </th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                          Patient\n                        </th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                          Type\n                        </th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                          Status\n                        </th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                          Priority\n                        </th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                          Collection Time\n                        </th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                          Actions\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"divide-y divide-gray-200 dark:divide-gray-700\">\n                      {filteredSamples.map((sample) => (\n                        <tr key={sample.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-800\">\n                          <td className=\"py-3 px-4\">\n                            <span className=\"sample-id font-mono text-sm\">\n                              {sample.sampleId}\n                            </span>\n                          </td>\n                          <td className=\"py-3 px-4\">\n                            {sample.patient && (\n                              <div>\n                                <div className=\"patient-name\">\n                                  {sample.patient.firstName} {sample.patient.lastName}\n                                </div>\n                                <div className=\"text-sm text-gray-500\">\n                                  {sample.patient.patientId}\n                                </div>\n                              </div>\n                            )}\n                          </td>\n                          <td className=\"py-3 px-4 text-sm\">\n                            {sample.sampleType}\n                          </td>\n                          <td className=\"py-3 px-4\">\n                            {getStatusBadge(sample.status)}\n                          </td>\n                          <td className=\"py-3 px-4\">\n                            {getPriorityBadge(sample.priority)}\n                          </td>\n                          <td className=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">\n                            {formatDistanceToNow(new Date(sample.collectionDateTime), { addSuffix: true })}\n                          </td>\n                          <td className=\"py-3 px-4\">\n                            <Button variant=\"outline\" size=\"sm\">\n                              View Details\n                            </Button>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":10255},"client/src/pages/setup.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Separator } from '@/components/ui/separator';\nimport { \n  Settings, \n  Building, \n  TestTube, \n  Monitor, \n  Database, \n  Shield, \n  Bell,\n  Save,\n  RefreshCw,\n  AlertTriangle,\n  CheckCircle,\n  Clock\n} from 'lucide-react';\n\nexport default function Setup() {\n  const [labSettings, setLabSettings] = useState({\n    labName: 'MedLab Laboratory Services',\n    address: '123 Medical Center Drive, Healthcare City, HC 12345',\n    phoneNumber: '(555) 123-4567',\n    email: 'info@medlab.com',\n    website: 'www.medlab.com',\n    licenseNumber: 'LAB-2024-001',\n    accreditation: 'CAP',\n    director: 'Dr. Sarah Chen',\n    timezone: 'America/New_York',\n    currency: 'USD',\n  });\n\n  const [testConfig, setTestConfig] = useState({\n    defaultTurnaround: '24',\n    urgentTurnaround: '4',\n    statTurnaround: '1',\n    autoApprove: false,\n    requireVerification: true,\n    enableCriticalAlerts: true,\n    qcFrequency: 'daily',\n  });\n\n  const [systemSettings, setSystemSettings] = useState({\n    autoBackup: true,\n    backupFrequency: 'daily',\n    retentionPeriod: '7',\n    enableAuditLog: true,\n    sessionTimeout: '30',\n    enableTwoFactor: false,\n    passwordComplexity: 'medium',\n    maintenanceMode: false,\n  });\n\n  const [notificationSettings, setNotificationSettings] = useState({\n    emailNotifications: true,\n    criticalAlerts: true,\n    qcFailures: true,\n    equipmentAlerts: true,\n    reportReady: true,\n    overdueResults: true,\n    lowReagents: true,\n  });\n\n  // Mock equipment data\n  const mockEquipment = [\n    {\n      id: '1',\n      name: 'Hematology Analyzer XN-1000',\n      model: 'XN-1000',\n      serialNumber: 'SN-2024-001',\n      status: 'online',\n      lastCalibration: '2024-12-10T08:00:00Z',\n      nextMaintenance: '2024-12-25T08:00:00Z',\n      location: 'Hematology Lab',\n    },\n    {\n      id: '2',\n      name: 'Chemistry Analyzer AU-5800',\n      model: 'AU-5800',\n      serialNumber: 'SN-2024-002',\n      status: 'maintenance',\n      lastCalibration: '2024-12-08T10:00:00Z',\n      nextMaintenance: '2024-12-20T10:00:00Z',\n      location: 'Chemistry Lab',\n    },\n    {\n      id: '3',\n      name: 'Immunoassay System i2000SR',\n      model: 'i2000SR',\n      serialNumber: 'SN-2024-003',\n      status: 'online',\n      lastCalibration: '2024-12-12T09:00:00Z',\n      nextMaintenance: '2024-12-28T09:00:00Z',\n      location: 'Immunology Lab',\n    },\n  ];\n\n  const handleLabSettingsSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log('Saving lab settings:', labSettings);\n    \n    // Validate required fields\n    if (!labSettings.labName || !labSettings.licenseNumber || !labSettings.director) {\n      alert('Please fill in all required fields (Lab Name, License Number, Director)');\n      return;\n    }\n    \n    const savedSettings = {\n      ...labSettings,\n      lastUpdated: new Date().toLocaleString(),\n      updatedBy: 'Current User'\n    };\n    \n    console.log('Lab Settings Saved:', savedSettings);\n    \n    alert(`Laboratory Settings Saved Successfully!\\n\\n` +\n      `Lab Name: ${savedSettings.labName}\\n` +\n      `License: ${savedSettings.licenseNumber}\\n` +\n      `Director: ${savedSettings.director}\\n` +\n      `Last Updated: ${savedSettings.lastUpdated}\\n\\n` +\n      `Settings have been applied to the system.`);\n  };\n\n  const handleTestConfigSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log('Saving test configuration:', testConfig);\n    \n    // Validate required fields\n    if (!testConfig.testName || !testConfig.testCode || !testConfig.sampleType) {\n      alert('Please fill in all required fields (Test Name, Test Code, Sample Type)');\n      return;\n    }\n    \n    const savedConfig = {\n      id: `TEST-${Date.now()}`,\n      ...testConfig,\n      createdAt: new Date().toLocaleString(),\n      createdBy: 'Current User',\n      status: testConfig.isActive ? 'Active' : 'Inactive'\n    };\n    \n    console.log('Test Configuration Saved:', savedConfig);\n    \n    alert(`Test Configuration Saved Successfully!\\n\\n` +\n      `Test Name: ${savedConfig.testName}\\n` +\n      `Test Code: ${savedConfig.testCode}\\n` +\n      `Sample Type: ${savedConfig.sampleType}\\n` +\n      `Reference Range: ${savedConfig.referenceRange}\\n` +\n      `TAT: ${savedConfig.turnaroundTime} hours\\n` +\n      `Status: ${savedConfig.status}\\n\\n` +\n      `Test configuration has been added to the system.`);\n    \n    // Reset form\n    setTestConfig({\n      testName: '',\n      testCode: '',\n      sampleType: '',\n      referenceRange: '',\n      units: '',\n      methodology: '',\n      turnaroundTime: '',\n      isActive: true,\n    });\n  };\n\n  const handleSystemSettingsSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log('Saving system settings:', systemSettings);\n    \n    const savedSystemSettings = {\n      ...systemSettings,\n      lastUpdated: new Date().toLocaleString(),\n      updatedBy: 'Current User'\n    };\n    \n    console.log('System Settings Saved:', savedSystemSettings);\n    \n    alert(`System Settings Saved Successfully!\\n\\n` +\n      `Auto-backup: ${savedSystemSettings.autoBackup ? 'Enabled' : 'Disabled'}\\n` +\n      `Backup Frequency: ${savedSystemSettings.backupFrequency}\\n` +\n      `Session Timeout: ${savedSystemSettings.sessionTimeout} minutes\\n` +\n      `Max Login Attempts: ${savedSystemSettings.maxLoginAttempts}\\n` +\n      `Result Auto-approval: ${savedSystemSettings.resultAutoApproval ? 'Enabled' : 'Disabled'}\\n` +\n      `Last Updated: ${savedSystemSettings.lastUpdated}\\n\\n` +\n      `System settings have been applied and will take effect immediately.`);\n  };\n\n  const handleBackupNow = () => {\n    console.log('Initiating backup...');\n    \n    const backupInfo = {\n      backupId: `BACKUP-${Date.now()}`,\n      timestamp: new Date().toLocaleString(),\n      type: 'Full System Backup',\n      estimatedSize: '2.3 GB',\n      estimatedTime: '15-20 minutes'\n    };\n    \n    alert(`System Backup Initiated!\\n\\n` +\n      `Backup ID: ${backupInfo.backupId}\\n` +\n      `Type: ${backupInfo.type}\\n` +\n      `Started: ${backupInfo.timestamp}\\n` +\n      `Estimated Size: ${backupInfo.estimatedSize}\\n` +\n      `Estimated Time: ${backupInfo.estimatedTime}\\n\\n` +\n      `Backup is running in the background. You will be notified when complete.`);\n  };\n\n  const getEquipmentStatusBadge = (status: string) => {\n    switch (status) {\n      case 'online':\n        return (\n          <Badge className=\"bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400\">\n            <CheckCircle className=\"h-3 w-3 mr-1\" />\n            Online\n          </Badge>\n        );\n      case 'maintenance':\n        return (\n          <Badge className=\"bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400\">\n            <Clock className=\"h-3 w-3 mr-1\" />\n            Maintenance\n          </Badge>\n        );\n      case 'offline':\n        return (\n          <Badge className=\"bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400\">\n            <AlertTriangle className=\"h-3 w-3 mr-1\" />\n            Offline\n          </Badge>\n        );\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  return (\n    <div className=\"p-4 sm:p-6 lg:p-8 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n            System Setup\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Laboratory configuration and system management\n          </p>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          <Button variant=\"outline\" onClick={handleBackupNow}>\n            <Database className=\"h-4 w-4 mr-2\" />\n            Backup Now\n          </Button>\n          <div className=\"flex items-center gap-2\">\n            <Settings className=\"h-5 w-5 text-gray-500\" />\n            <span className=\"text-sm text-gray-500\">\n              System configuration\n            </span>\n          </div>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"laboratory\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"laboratory\" className=\"flex items-center gap-2\">\n            <Building className=\"h-4 w-4\" />\n            Laboratory\n          </TabsTrigger>\n          <TabsTrigger value=\"tests\" className=\"flex items-center gap-2\">\n            <TestTube className=\"h-4 w-4\" />\n            Tests\n          </TabsTrigger>\n          <TabsTrigger value=\"equipment\" className=\"flex items-center gap-2\">\n            <Monitor className=\"h-4 w-4\" />\n            Equipment\n          </TabsTrigger>\n          <TabsTrigger value=\"system\" className=\"flex items-center gap-2\">\n            <Shield className=\"h-4 w-4\" />\n            System\n          </TabsTrigger>\n          <TabsTrigger value=\"notifications\" className=\"flex items-center gap-2\">\n            <Bell className=\"h-4 w-4\" />\n            Notifications\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"laboratory\" className=\"mt-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Building className=\"h-5 w-5\" />\n                Laboratory Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleLabSettingsSubmit} className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"labName\">Laboratory Name *</Label>\n                    <Input\n                      id=\"labName\"\n                      required\n                      value={labSettings.labName}\n                      onChange={(e) => setLabSettings(prev => ({ ...prev, labName: e.target.value }))}\n                      placeholder=\"Laboratory name\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"director\">Laboratory Director *</Label>\n                    <Input\n                      id=\"director\"\n                      required\n                      value={labSettings.director}\n                      onChange={(e) => setLabSettings(prev => ({ ...prev, director: e.target.value }))}\n                      placeholder=\"Director name\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"address\">Address *</Label>\n                  <Textarea\n                    id=\"address\"\n                    required\n                    value={labSettings.address}\n                    onChange={(e) => setLabSettings(prev => ({ ...prev, address: e.target.value }))}\n                    placeholder=\"Complete laboratory address\"\n                    rows={3}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div>\n                    <Label htmlFor=\"phoneNumber\">Phone Number *</Label>\n                    <Input\n                      id=\"phoneNumber\"\n                      type=\"tel\"\n                      required\n                      value={labSettings.phoneNumber}\n                      onChange={(e) => setLabSettings(prev => ({ ...prev, phoneNumber: e.target.value }))}\n                      placeholder=\"(555) 123-4567\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"email\">Email *</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      required\n                      value={labSettings.email}\n                      onChange={(e) => setLabSettings(prev => ({ ...prev, email: e.target.value }))}\n                      placeholder=\"contact@lab.com\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"website\">Website</Label>\n                    <Input\n                      id=\"website\"\n                      value={labSettings.website}\n                      onChange={(e) => setLabSettings(prev => ({ ...prev, website: e.target.value }))}\n                      placeholder=\"www.lab.com\"\n                    />\n                  </div>\n                </div>\n\n                <Separator />\n\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div>\n                    <Label htmlFor=\"licenseNumber\">License Number *</Label>\n                    <Input\n                      id=\"licenseNumber\"\n                      required\n                      value={labSettings.licenseNumber}\n                      onChange={(e) => setLabSettings(prev => ({ ...prev, licenseNumber: e.target.value }))}\n                      placeholder=\"License number\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"accreditation\">Accreditation</Label>\n                    <Select value={labSettings.accreditation} onValueChange={(value) => setLabSettings(prev => ({ ...prev, accreditation: value }))}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select accreditation\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"CAP\">CAP (College of American Pathologists)</SelectItem>\n                        <SelectItem value=\"CLIA\">CLIA (Clinical Laboratory Improvement Amendments)</SelectItem>\n                        <SelectItem value=\"ISO15189\">ISO 15189</SelectItem>\n                        <SelectItem value=\"NABL\">NABL</SelectItem>\n                        <SelectItem value=\"OTHER\">Other</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"timezone\">Timezone *</Label>\n                    <Select value={labSettings.timezone} onValueChange={(value) => setLabSettings(prev => ({ ...prev, timezone: value }))}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"America/New_York\">Eastern Time (ET)</SelectItem>\n                        <SelectItem value=\"America/Chicago\">Central Time (CT)</SelectItem>\n                        <SelectItem value=\"America/Denver\">Mountain Time (MT)</SelectItem>\n                        <SelectItem value=\"America/Los_Angeles\">Pacific Time (PT)</SelectItem>\n                        <SelectItem value=\"UTC\">UTC</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end\">\n                  <Button type=\"submit\">\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Save Laboratory Settings\n                  </Button>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"tests\" className=\"mt-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <TestTube className=\"h-5 w-5\" />\n                Test Configuration\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleTestConfigSubmit} className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div>\n                    <Label htmlFor=\"defaultTurnaround\">Default Turnaround (hours) *</Label>\n                    <Input\n                      id=\"defaultTurnaround\"\n                      type=\"number\"\n                      required\n                      value={testConfig.defaultTurnaround}\n                      onChange={(e) => setTestConfig(prev => ({ ...prev, defaultTurnaround: e.target.value }))}\n                      placeholder=\"24\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"urgentTurnaround\">Urgent Turnaround (hours) *</Label>\n                    <Input\n                      id=\"urgentTurnaround\"\n                      type=\"number\"\n                      required\n                      value={testConfig.urgentTurnaround}\n                      onChange={(e) => setTestConfig(prev => ({ ...prev, urgentTurnaround: e.target.value }))}\n                      placeholder=\"4\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"statTurnaround\">STAT Turnaround (hours) *</Label>\n                    <Input\n                      id=\"statTurnaround\"\n                      type=\"number\"\n                      required\n                      value={testConfig.statTurnaround}\n                      onChange={(e) => setTestConfig(prev => ({ ...prev, statTurnaround: e.target.value }))}\n                      placeholder=\"1\"\n                    />\n                  </div>\n                </div>\n\n                <Separator />\n\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-medium\">Result Processing</h3>\n                  \n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <Label htmlFor=\"autoApprove\">Auto-approve routine results</Label>\n                        <p className=\"text-sm text-gray-500\">Automatically approve results within normal ranges</p>\n                      </div>\n                      <Switch\n                        id=\"autoApprove\"\n                        checked={testConfig.autoApprove}\n                        onCheckedChange={(checked) => setTestConfig(prev => ({ ...prev, autoApprove: checked }))}\n                      />\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <Label htmlFor=\"requireVerification\">Require verification for critical results</Label>\n                        <p className=\"text-sm text-gray-500\">Critical values must be verified by senior staff</p>\n                      </div>\n                      <Switch\n                        id=\"requireVerification\"\n                        checked={testConfig.requireVerification}\n                        onCheckedChange={(checked) => setTestConfig(prev => ({ ...prev, requireVerification: checked }))}\n                      />\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <Label htmlFor=\"enableCriticalAlerts\">Enable critical value alerts</Label>\n                        <p className=\"text-sm text-gray-500\">Send immediate notifications for critical results</p>\n                      </div>\n                      <Switch\n                        id=\"enableCriticalAlerts\"\n                        checked={testConfig.enableCriticalAlerts}\n                        onCheckedChange={(checked) => setTestConfig(prev => ({ ...prev, enableCriticalAlerts: checked }))}\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <Separator />\n\n                <div>\n                  <Label htmlFor=\"qcFrequency\">Quality Control Frequency</Label>\n                  <Select value={testConfig.qcFrequency} onValueChange={(value) => setTestConfig(prev => ({ ...prev, qcFrequency: value }))}>\n                    <SelectTrigger className=\"w-48\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"every_run\">Every Run</SelectItem>\n                      <SelectItem value=\"daily\">Daily</SelectItem>\n                      <SelectItem value=\"weekly\">Weekly</SelectItem>\n                      <SelectItem value=\"monthly\">Monthly</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"flex justify-end\">\n                  <Button type=\"submit\">\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Save Test Configuration\n                  </Button>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"equipment\" className=\"mt-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Monitor className=\"h-5 w-5\" />\n                Equipment Management\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead>\n                    <tr className=\"border-b border-gray-200 dark:border-gray-700\">\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Equipment\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Model\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Serial Number\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Status\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Location\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Last Calibration\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Next Maintenance\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Actions\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"divide-y divide-gray-200 dark:divide-gray-700\">\n                    {mockEquipment.map((equipment) => (\n                      <tr key={equipment.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-800\">\n                        <td className=\"py-3 px-4\">\n                          <div className=\"font-medium text-gray-900 dark:text-white\">\n                            {equipment.name}\n                          </div>\n                        </td>\n                        <td className=\"py-3 px-4 text-sm\">\n                          {equipment.model}\n                        </td>\n                        <td className=\"py-3 px-4\">\n                          <span className=\"font-mono text-xs\">\n                            {equipment.serialNumber}\n                          </span>\n                        </td>\n                        <td className=\"py-3 px-4\">\n                          {getEquipmentStatusBadge(equipment.status)}\n                        </td>\n                        <td className=\"py-3 px-4 text-sm\">\n                          {equipment.location}\n                        </td>\n                        <td className=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">\n                          {new Date(equipment.lastCalibration).toLocaleDateString()}\n                        </td>\n                        <td className=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">\n                          {new Date(equipment.nextMaintenance).toLocaleDateString()}\n                        </td>\n                        <td className=\"py-3 px-4\">\n                          <div className=\"flex gap-2\">\n                            <Button variant=\"outline\" size=\"sm\">\n                              Configure\n                            </Button>\n                            <Button variant=\"outline\" size=\"sm\">\n                              <RefreshCw className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"system\" className=\"mt-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Shield className=\"h-5 w-5\" />\n                System Settings\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSystemSettingsSubmit} className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-medium\">Backup & Maintenance</h3>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <Label htmlFor=\"autoBackup\">Automatic Backup</Label>\n                        <p className=\"text-sm text-gray-500\">Enable scheduled backups</p>\n                      </div>\n                      <Switch\n                        id=\"autoBackup\"\n                        checked={systemSettings.autoBackup}\n                        onCheckedChange={(checked) => setSystemSettings(prev => ({ ...prev, autoBackup: checked }))}\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"backupFrequency\">Backup Frequency</Label>\n                      <Select value={systemSettings.backupFrequency} onValueChange={(value) => setSystemSettings(prev => ({ ...prev, backupFrequency: value }))}>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"hourly\">Hourly</SelectItem>\n                          <SelectItem value=\"daily\">Daily</SelectItem>\n                          <SelectItem value=\"weekly\">Weekly</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"retentionPeriod\">Retention Period (days)</Label>\n                      <Input\n                        id=\"retentionPeriod\"\n                        type=\"number\"\n                        value={systemSettings.retentionPeriod}\n                        onChange={(e) => setSystemSettings(prev => ({ ...prev, retentionPeriod: e.target.value }))}\n                        placeholder=\"7\"\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <Separator />\n\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-medium\">Security Settings</h3>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <Label htmlFor=\"enableAuditLog\">Enable Audit Logging</Label>\n                        <p className=\"text-sm text-gray-500\">Track all system activities</p>\n                      </div>\n                      <Switch\n                        id=\"enableAuditLog\"\n                        checked={systemSettings.enableAuditLog}\n                        onCheckedChange={(checked) => setSystemSettings(prev => ({ ...prev, enableAuditLog: checked }))}\n                      />\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <Label htmlFor=\"enableTwoFactor\">Two-Factor Authentication</Label>\n                        <p className=\"text-sm text-gray-500\">Require 2FA for all users</p>\n                      </div>\n                      <Switch\n                        id=\"enableTwoFactor\"\n                        checked={systemSettings.enableTwoFactor}\n                        onCheckedChange={(checked) => setSystemSettings(prev => ({ ...prev, enableTwoFactor: checked }))}\n                      />\n                    </div>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"sessionTimeout\">Session Timeout (minutes)</Label>\n                      <Input\n                        id=\"sessionTimeout\"\n                        type=\"number\"\n                        value={systemSettings.sessionTimeout}\n                        onChange={(e) => setSystemSettings(prev => ({ ...prev, sessionTimeout: e.target.value }))}\n                        placeholder=\"30\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"passwordComplexity\">Password Complexity</Label>\n                      <Select value={systemSettings.passwordComplexity} onValueChange={(value) => setSystemSettings(prev => ({ ...prev, passwordComplexity: value }))}>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"low\">Low</SelectItem>\n                          <SelectItem value=\"medium\">Medium</SelectItem>\n                          <SelectItem value=\"high\">High</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                </div>\n\n                <Separator />\n\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-medium\">System Maintenance</h3>\n                  \n                  <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div>\n                      <Label htmlFor=\"maintenanceMode\">Maintenance Mode</Label>\n                      <p className=\"text-sm text-gray-500\">Restrict system access for maintenance</p>\n                    </div>\n                    <Switch\n                      id=\"maintenanceMode\"\n                      checked={systemSettings.maintenanceMode}\n                      onCheckedChange={(checked) => setSystemSettings(prev => ({ ...prev, maintenanceMode: checked }))}\n                    />\n                  </div>\n                  \n                  {systemSettings.maintenanceMode && (\n                    <div className=\"p-4 bg-yellow-50 border border-yellow-200 rounded-lg dark:bg-yellow-900/20 dark:border-yellow-700\">\n                      <div className=\"flex items-center\">\n                        <AlertTriangle className=\"h-5 w-5 text-yellow-600 dark:text-yellow-400 mr-2\" />\n                        <span className=\"text-sm font-medium text-yellow-800 dark:text-yellow-400\">\n                          System is currently in maintenance mode. Only administrators can access the system.\n                        </span>\n                      </div>\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"flex justify-end\">\n                  <Button type=\"submit\">\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Save System Settings\n                  </Button>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"notifications\" className=\"mt-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Bell className=\"h-5 w-5\" />\n                Notification Settings\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-medium\">Email Notifications</h3>\n                  \n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <Label htmlFor=\"emailNotifications\">Enable Email Notifications</Label>\n                        <p className=\"text-sm text-gray-500\">Send notifications via email</p>\n                      </div>\n                      <Switch\n                        id=\"emailNotifications\"\n                        checked={notificationSettings.emailNotifications}\n                        onCheckedChange={(checked) => setNotificationSettings(prev => ({ ...prev, emailNotifications: checked }))}\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <Separator />\n\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-medium\">Alert Types</h3>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <Label htmlFor=\"criticalAlerts\">Critical Value Alerts</Label>\n                        <p className=\"text-sm text-gray-500\">Immediate alerts for critical results</p>\n                      </div>\n                      <Switch\n                        id=\"criticalAlerts\"\n                        checked={notificationSettings.criticalAlerts}\n                        onCheckedChange={(checked) => setNotificationSettings(prev => ({ ...prev, criticalAlerts: checked }))}\n                      />\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <Label htmlFor=\"qcFailures\">QC Failures</Label>\n                        <p className=\"text-sm text-gray-500\">Quality control failures</p>\n                      </div>\n                      <Switch\n                        id=\"qcFailures\"\n                        checked={notificationSettings.qcFailures}\n                        onCheckedChange={(checked) => setNotificationSettings(prev => ({ ...prev, qcFailures: checked }))}\n                      />\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <Label htmlFor=\"equipmentAlerts\">Equipment Alerts</Label>\n                        <p className=\"text-sm text-gray-500\">Equipment maintenance and failures</p>\n                      </div>\n                      <Switch\n                        id=\"equipmentAlerts\"\n                        checked={notificationSettings.equipmentAlerts}\n                        onCheckedChange={(checked) => setNotificationSettings(prev => ({ ...prev, equipmentAlerts: checked }))}\n                      />\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <Label htmlFor=\"reportReady\">Report Ready</Label>\n                        <p className=\"text-sm text-gray-500\">When patient reports are ready</p>\n                      </div>\n                      <Switch\n                        id=\"reportReady\"\n                        checked={notificationSettings.reportReady}\n                        onCheckedChange={(checked) => setNotificationSettings(prev => ({ ...prev, reportReady: checked }))}\n                      />\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <Label htmlFor=\"overdueResults\">Overdue Results</Label>\n                        <p className=\"text-sm text-gray-500\">Results past turnaround time</p>\n                      </div>\n                      <Switch\n                        id=\"overdueResults\"\n                        checked={notificationSettings.overdueResults}\n                        onCheckedChange={(checked) => setNotificationSettings(prev => ({ ...prev, overdueResults: checked }))}\n                      />\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <Label htmlFor=\"lowReagents\">Low Reagent Levels</Label>\n                        <p className=\"text-sm text-gray-500\">When reagents need restocking</p>\n                      </div>\n                      <Switch\n                        id=\"lowReagents\"\n                        checked={notificationSettings.lowReagents}\n                        onCheckedChange={(checked) => setNotificationSettings(prev => ({ ...prev, lowReagents: checked }))}\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end\">\n                  <Button\n                    onClick={() => {\n                      console.log('Saving notification settings:', notificationSettings);\n                      \n                      const savedNotifications = {\n                        ...notificationSettings,\n                        lastUpdated: new Date().toLocaleString(),\n                        updatedBy: 'Current User'\n                      };\n                      \n                      alert(`Notification Settings Saved!\\n\\n` +\n                        `Sample Reception: ${savedNotifications.sampleReception ? 'Enabled' : 'Disabled'}\\n` +\n                        `Results Ready: ${savedNotifications.resultsReady ? 'Enabled' : 'Disabled'}\\n` +\n                        `Critical Values: ${savedNotifications.criticalValues ? 'Enabled' : 'Disabled'}\\n` +\n                        `Quality Control: ${savedNotifications.qualityControl ? 'Enabled' : 'Disabled'}\\n` +\n                        `Equipment Issues: ${savedNotifications.equipmentIssues ? 'Enabled' : 'Disabled'}\\n` +\n                        `Overdue Results: ${savedNotifications.overdueResults ? 'Enabled' : 'Disabled'}\\n` +\n                        `Low Reagents: ${savedNotifications.lowReagents ? 'Enabled' : 'Disabled'}\\n\\n` +\n                        `Notification preferences have been updated.`);\n                    }}\n                  >\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Save Notification Settings\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":39746},"client/src/pages/user-management.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\nimport { Users, UserPlus, Shield, Settings, Edit, Trash2 } from 'lucide-react';\nimport { formatDistanceToNow } from 'date-fns';\nimport { USER_ROLES } from '@/lib/constants';\n\nexport default function UserManagement() {\n  const [userForm, setUserForm] = useState({\n    username: '',\n    email: '',\n    firstName: '',\n    lastName: '',\n    role: '',\n    password: '',\n    confirmPassword: '',\n    isActive: true,\n  });\n\n  const [rolePermissions, setRolePermissions] = useState({\n    role: '',\n    permissions: {\n      dashboard: { view: false, edit: false },\n      reception: { view: false, edit: false },\n      sampling: { view: false, edit: false },\n      results: { view: false, edit: false, verify: false },\n      worklists: { view: false, edit: false },\n      qc: { view: false, edit: false },\n      outbound: { view: false, edit: false },\n      reports: { view: false, edit: false },\n      financial: { view: false, edit: false },\n      users: { view: false, edit: false },\n      pricing: { view: false, edit: false },\n      setup: { view: false, edit: false },\n    },\n  });\n\n  // Mock user data\n  const mockUsers = [\n    {\n      id: '1',\n      username: 'dr.chen',\n      email: 'sarah.chen@medlab.com',\n      firstName: 'Sarah',\n      lastName: 'Chen',\n      role: 'lab_manager',\n      isActive: true,\n      lastLogin: '2024-12-15T08:30:00Z',\n      createdAt: '2024-01-15T10:00:00Z',\n    },\n    {\n      id: '2',\n      username: 'tech.roberts',\n      email: 'michael.roberts@medlab.com',\n      firstName: 'Michael',\n      lastName: 'Roberts',\n      role: 'technician',\n      isActive: true,\n      lastLogin: '2024-12-15T07:45:00Z',\n      createdAt: '2024-02-20T14:30:00Z',\n    },\n    {\n      id: '3',\n      username: 'rec.wang',\n      email: 'lisa.wang@medlab.com',\n      firstName: 'Lisa',\n      lastName: 'Wang',\n      role: 'receptionist',\n      isActive: true,\n      lastLogin: '2024-12-14T16:20:00Z',\n      createdAt: '2024-03-10T09:15:00Z',\n    },\n    {\n      id: '4',\n      username: 'dr.kim',\n      email: 'robert.kim@medlab.com',\n      firstName: 'Robert',\n      lastName: 'Kim',\n      role: 'doctor',\n      isActive: false,\n      lastLogin: '2024-12-10T11:00:00Z',\n      createdAt: '2024-01-25T13:45:00Z',\n    },\n  ];\n\n  const handleUserSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log('Creating user:', userForm);\n    \n    // Validate required fields\n    if (!userForm.username || !userForm.email || !userForm.firstName || !userForm.lastName || !userForm.role) {\n      alert('Please fill in all required fields');\n      return;\n    }\n    \n    // Validate email format\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(userForm.email)) {\n      alert('Please enter a valid email address');\n      return;\n    }\n    \n    // Validate password\n    if (!userForm.password || userForm.password.length < 6) {\n      alert('Password must be at least 6 characters long');\n      return;\n    }\n    \n    if (userForm.password !== userForm.confirmPassword) {\n      alert('Passwords do not match');\n      return;\n    }\n    \n    // Create user record\n    const newUser = {\n      id: `USER-${Date.now()}`,\n      username: userForm.username,\n      email: userForm.email,\n      firstName: userForm.firstName,\n      lastName: userForm.lastName,\n      fullName: `${userForm.firstName} ${userForm.lastName}`,\n      role: userForm.role,\n      isActive: userForm.isActive,\n      createdAt: new Date().toISOString(),\n      lastLogin: null,\n      status: userForm.isActive ? 'Active' : 'Inactive'\n    };\n    \n    console.log('User Created:', newUser);\n    \n    alert(`User Created Successfully!\\n\\n` +\n      `User ID: ${newUser.id}\\n` +\n      `Name: ${newUser.fullName}\\n` +\n      `Username: ${newUser.username}\\n` +\n      `Email: ${newUser.email}\\n` +\n      `Role: ${newUser.role}\\n` +\n      `Status: ${newUser.status}\\n\\n` +\n      `User account has been created and activated.`);\n    \n    // Reset form\n    setUserForm({\n      username: '',\n      email: '',\n      firstName: '',\n      lastName: '',\n      role: '',\n      password: '',\n      confirmPassword: '',\n      isActive: true,\n    });\n  };\n\n  const handlePermissionChange = (module: string, permission: string, value: boolean) => {\n    setRolePermissions(prev => ({\n      ...prev,\n      permissions: {\n        ...prev.permissions,\n        [module]: {\n          ...prev.permissions[module as keyof typeof prev.permissions],\n          [permission]: value,\n        },\n      },\n    }));\n  };\n\n  const getRoleBadge = (role: string) => {\n    const roleConfig = USER_ROLES.find(r => r.value === role);\n    const colors = {\n      admin: 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400',\n      lab_manager: 'bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400',\n      technician: 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400',\n      receptionist: 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400',\n      doctor: 'bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-400',\n    };\n\n    return (\n      <Badge className={colors[role as keyof typeof colors] || 'bg-gray-100 text-gray-800'}>\n        {roleConfig?.label || role}\n      </Badge>\n    );\n  };\n\n  const getStatusBadge = (isActive: boolean) => {\n    return isActive ? (\n      <Badge className=\"bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400\">\n        Active\n      </Badge>\n    ) : (\n      <Badge className=\"bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400\">\n        Inactive\n      </Badge>\n    );\n  };\n\n  const getRoleStats = () => {\n    const stats = USER_ROLES.map(role => ({\n      ...role,\n      count: mockUsers.filter(user => user.role === role.value).length,\n    }));\n    \n    return stats;\n  };\n\n  return (\n    <div className=\"p-4 sm:p-6 lg:p-8 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n            User Management\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Manage users, roles, and permissions\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Users className=\"h-5 w-5 text-gray-500\" />\n          <span className=\"text-sm text-gray-500\">\n            {mockUsers.length} total users\n          </span>\n        </div>\n      </div>\n\n      {/* User Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n        {getRoleStats().map((role) => (\n          <Card key={role.value}>\n            <CardContent className=\"p-4\">\n              <div className=\"text-center\">\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                  {role.label}\n                </p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                  {role.count}\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      <Tabs defaultValue=\"users\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"users\" className=\"flex items-center gap-2\">\n            <Users className=\"h-4 w-4\" />\n            Manage Users\n          </TabsTrigger>\n          <TabsTrigger value=\"create\" className=\"flex items-center gap-2\">\n            <UserPlus className=\"h-4 w-4\" />\n            Create User\n          </TabsTrigger>\n          <TabsTrigger value=\"permissions\" className=\"flex items-center gap-2\">\n            <Shield className=\"h-4 w-4\" />\n            Role Permissions\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"users\" className=\"mt-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>System Users</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead>\n                    <tr className=\"border-b border-gray-200 dark:border-gray-700\">\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        User\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Email\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Role\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Status\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Last Login\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Created\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                        Actions\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"divide-y divide-gray-200 dark:divide-gray-700\">\n                    {mockUsers.map((user) => (\n                      <tr key={user.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-800\">\n                        <td className=\"py-3 px-4\">\n                          <div>\n                            <div className=\"font-medium text-gray-900 dark:text-white\">\n                              {user.firstName} {user.lastName}\n                            </div>\n                            <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                              @{user.username}\n                            </div>\n                          </div>\n                        </td>\n                        <td className=\"py-3 px-4 text-sm\">\n                          {user.email}\n                        </td>\n                        <td className=\"py-3 px-4\">\n                          {getRoleBadge(user.role)}\n                        </td>\n                        <td className=\"py-3 px-4\">\n                          {getStatusBadge(user.isActive)}\n                        </td>\n                        <td className=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">\n                          {formatDistanceToNow(new Date(user.lastLogin), { addSuffix: true })}\n                        </td>\n                        <td className=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">\n                          {new Date(user.createdAt).toLocaleDateString()}\n                        </td>\n                        <td className=\"py-3 px-4\">\n                          <div className=\"flex gap-2\">\n                            <Button variant=\"ghost\" size=\"sm\">\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            <Button variant=\"ghost\" size=\"sm\" className=\"text-red-600 hover:text-red-700\">\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"create\" className=\"mt-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <UserPlus className=\"h-5 w-5\" />\n                Create New User\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleUserSubmit} className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"firstName\">First Name *</Label>\n                    <Input\n                      id=\"firstName\"\n                      required\n                      value={userForm.firstName}\n                      onChange={(e) => setUserForm(prev => ({ ...prev, firstName: e.target.value }))}\n                      placeholder=\"First name\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"lastName\">Last Name *</Label>\n                    <Input\n                      id=\"lastName\"\n                      required\n                      value={userForm.lastName}\n                      onChange={(e) => setUserForm(prev => ({ ...prev, lastName: e.target.value }))}\n                      placeholder=\"Last name\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"username\">Username *</Label>\n                    <Input\n                      id=\"username\"\n                      required\n                      value={userForm.username}\n                      onChange={(e) => setUserForm(prev => ({ ...prev, username: e.target.value }))}\n                      placeholder=\"Username\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"email\">Email *</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      required\n                      value={userForm.email}\n                      onChange={(e) => setUserForm(prev => ({ ...prev, email: e.target.value }))}\n                      placeholder=\"Email address\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"role\">Role *</Label>\n                  <Select value={userForm.role} onValueChange={(value) => setUserForm(prev => ({ ...prev, role: value }))}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select user role\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {USER_ROLES.map((role) => (\n                        <SelectItem key={role.value} value={role.value}>\n                          {role.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"password\">Password *</Label>\n                    <Input\n                      id=\"password\"\n                      type=\"password\"\n                      required\n                      value={userForm.password}\n                      onChange={(e) => setUserForm(prev => ({ ...prev, password: e.target.value }))}\n                      placeholder=\"Password\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"confirmPassword\">Confirm Password *</Label>\n                    <Input\n                      id=\"confirmPassword\"\n                      type=\"password\"\n                      required\n                      value={userForm.confirmPassword}\n                      onChange={(e) => setUserForm(prev => ({ ...prev, confirmPassword: e.target.value }))}\n                      placeholder=\"Confirm password\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <Switch\n                    id=\"isActive\"\n                    checked={userForm.isActive}\n                    onCheckedChange={(checked) => setUserForm(prev => ({ ...prev, isActive: checked }))}\n                  />\n                  <Label htmlFor=\"isActive\">User is active</Label>\n                </div>\n\n                <div className=\"flex justify-end space-x-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\"\n                    onClick={() => {\n                      console.log('Cancelling user creation...');\n                      setUserForm({\n                        username: '',\n                        email: '',\n                        firstName: '',\n                        lastName: '',\n                        role: 'technician',\n                        password: '',\n                        confirmPassword: '',\n                        isActive: true,\n                      });\n                    }}\n                  >\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\">\n                    Create User\n                  </Button>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"permissions\" className=\"mt-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Shield className=\"h-5 w-5\" />\n                Role-Based Permissions\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                <div>\n                  <Label htmlFor=\"roleSelect\">Select Role</Label>\n                  <Select \n                    value={rolePermissions.role} \n                    onValueChange={(value) => setRolePermissions(prev => ({ ...prev, role: value }))}\n                  >\n                    <SelectTrigger className=\"w-64\">\n                      <SelectValue placeholder=\"Choose a role to configure\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {USER_ROLES.map((role) => (\n                        <SelectItem key={role.value} value={role.value}>\n                          {role.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {rolePermissions.role && (\n                  <div className=\"border rounded-lg overflow-hidden\">\n                    <table className=\"w-full\">\n                      <thead className=\"bg-gray-50 dark:bg-gray-700\">\n                        <tr>\n                          <th className=\"text-left py-3 px-4 font-medium\">Module</th>\n                          <th className=\"text-center py-3 px-4 font-medium\">View</th>\n                          <th className=\"text-center py-3 px-4 font-medium\">Edit</th>\n                          <th className=\"text-center py-3 px-4 font-medium\">Special</th>\n                        </tr>\n                      </thead>\n                      <tbody className=\"divide-y divide-gray-200 dark:divide-gray-700\">\n                        {Object.entries(rolePermissions.permissions).map(([module, perms]) => (\n                          <tr key={module}>\n                            <td className=\"py-3 px-4 font-medium capitalize\">\n                              {module.replace('_', ' ')}\n                            </td>\n                            <td className=\"py-3 px-4 text-center\">\n                              <Switch\n                                checked={perms.view}\n                                onCheckedChange={(checked) => handlePermissionChange(module, 'view', checked)}\n                              />\n                            </td>\n                            <td className=\"py-3 px-4 text-center\">\n                              <Switch\n                                checked={perms.edit}\n                                onCheckedChange={(checked) => handlePermissionChange(module, 'edit', checked)}\n                              />\n                            </td>\n                            <td className=\"py-3 px-4 text-center\">\n                              {module === 'results' && (\n                                <div className=\"flex items-center justify-center gap-2\">\n                                  <span className=\"text-xs\">Verify</span>\n                                  <Switch\n                                    checked={(perms as any).verify || false}\n                                    onCheckedChange={(checked) => handlePermissionChange(module, 'verify', checked)}\n                                  />\n                                </div>\n                              )}\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                )}\n\n                {rolePermissions.role && (\n                  <div className=\"flex justify-end space-x-4\">\n                    <Button \n                      variant=\"outline\"\n                      onClick={() => {\n                        console.log('Resetting permissions to default...');\n                        alert('Permissions reset to default!');\n                      }}\n                    >\n                      Reset to Default\n                    </Button>\n                    <Button\n                      onClick={() => {\n                        console.log('Saving permissions...');\n                        alert('Permissions saved successfully!');\n                      }}\n                    >\n                      Save Permissions\n                    </Button>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":22233},"client/src/pages/worklists.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { ListChecks, Plus, Filter, Calendar, User } from 'lucide-react';\n\nexport default function Worklists() {\n  const [selectedWorklist, setSelectedWorklist] = useState('');\n  const [filterDepartment, setFilterDepartment] = useState('all');\n\n  // Mock data for demonstration\n  const mockWorklists = [\n    {\n      id: '1',\n      name: 'Morning Blood Chemistry',\n      description: 'All blood chemistry tests for morning shift',\n      department: 'chemistry',\n      assignedTo: 'Dr. Sarah Chen',\n      itemCount: 15,\n      completedCount: 8,\n      priority: 'routine',\n      dueDate: '2024-12-15T10:00:00Z',\n    },\n    {\n      id: '2',\n      name: 'Urgent Hematology',\n      description: 'Critical hematology tests requiring immediate attention',\n      department: 'hematology',\n      assignedTo: 'Tech. Michael Roberts',\n      itemCount: 5,\n      completedCount: 2,\n      priority: 'urgent',\n      dueDate: '2024-12-15T14:00:00Z',\n    },\n    {\n      id: '3',\n      name: 'Microbiology Cultures',\n      description: 'Culture and sensitivity tests',\n      department: 'microbiology',\n      assignedTo: 'Dr. Lisa Wang',\n      itemCount: 12,\n      completedCount: 12,\n      priority: 'routine',\n      dueDate: '2024-12-15T16:00:00Z',\n    },\n  ];\n\n  const mockWorklistItems = [\n    {\n      id: '1',\n      sampleId: 'LAB-20241215-001',\n      patientName: 'John Martinez',\n      testType: 'Glucose',\n      priority: 'routine',\n      status: 'completed',\n      assignedTo: 'Tech. Alice Johnson',\n      estimatedTime: '15 min',\n    },\n    {\n      id: '2',\n      sampleId: 'LAB-20241215-002',\n      patientName: 'Emma Thompson',\n      testType: 'Cholesterol Panel',\n      priority: 'urgent',\n      status: 'in_progress',\n      assignedTo: 'Tech. Bob Wilson',\n      estimatedTime: '30 min',\n    },\n    {\n      id: '3',\n      sampleId: 'LAB-20241215-003',\n      patientName: 'Michael Chen',\n      testType: 'HbA1c',\n      priority: 'stat',\n      status: 'pending',\n      assignedTo: 'Tech. Carol Davis',\n      estimatedTime: '20 min',\n    },\n  ];\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return <Badge className=\"status-completed\">Completed</Badge>;\n      case 'in_progress':\n        return <Badge className=\"status-in-progress\">In Progress</Badge>;\n      case 'pending':\n        return <Badge className=\"status-received\">Pending</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const getPriorityBadge = (priority: string) => {\n    return <Badge className={`priority-${priority}`}>{priority.toUpperCase()}</Badge>;\n  };\n\n  const getProgressPercentage = (completed: number, total: number) => {\n    return total > 0 ? Math.round((completed / total) * 100) : 0;\n  };\n\n  const filteredWorklists = mockWorklists.filter(worklist =>\n    filterDepartment === 'all' || worklist.department === filterDepartment\n  );\n\n  return (\n    <div className=\"p-4 sm:p-6 lg:p-8 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n            Worklists\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Organize and manage laboratory work assignments\n          </p>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          <Button className=\"flex items-center gap-2\">\n            <Plus className=\"h-4 w-4\" />\n            Create Worklist\n          </Button>\n          <div className=\"flex items-center gap-2\">\n            <ListChecks className=\"h-5 w-5 text-gray-500\" />\n            <span className=\"text-sm text-gray-500\">\n              {mockWorklists.length} active worklists\n            </span>\n          </div>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"overview\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"overview\" className=\"flex items-center gap-2\">\n            <ListChecks className=\"h-4 w-4\" />\n            Worklist Overview\n          </TabsTrigger>\n          <TabsTrigger value=\"items\" className=\"flex items-center gap-2\">\n            <Filter className=\"h-4 w-4\" />\n            Worklist Items\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"mt-6 space-y-6\">\n          {/* Department Filter */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Filter className=\"h-5 w-5\" />\n                Filter Worklists\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex gap-4\">\n                <Select value={filterDepartment} onValueChange={setFilterDepartment}>\n                  <SelectTrigger className=\"w-48\">\n                    <SelectValue placeholder=\"Filter by department\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Departments</SelectItem>\n                    <SelectItem value=\"chemistry\">Chemistry</SelectItem>\n                    <SelectItem value=\"hematology\">Hematology</SelectItem>\n                    <SelectItem value=\"microbiology\">Microbiology</SelectItem>\n                    <SelectItem value=\"immunology\">Immunology</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Worklists Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredWorklists.map((worklist) => {\n              const progress = getProgressPercentage(worklist.completedCount, worklist.itemCount);\n              \n              return (\n                <Card key={worklist.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between\">\n                      <div>\n                        <CardTitle className=\"text-lg\">{worklist.name}</CardTitle>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                          {worklist.description}\n                        </p>\n                      </div>\n                      {getPriorityBadge(worklist.priority)}\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {/* Progress */}\n                    <div>\n                      <div className=\"flex items-center justify-between text-sm mb-2\">\n                        <span>Progress</span>\n                        <span>{worklist.completedCount}/{worklist.itemCount} ({progress}%)</span>\n                      </div>\n                      <div className=\"w-full bg-gray-200 rounded-full h-2 dark:bg-gray-700\">\n                        <div \n                          className=\"bg-primary h-2 rounded-full transition-all duration-300\" \n                          style={{ width: `${progress}%` }}\n                        />\n                      </div>\n                    </div>\n\n                    {/* Details */}\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex items-center gap-2\">\n                        <User className=\"h-4 w-4 text-gray-500\" />\n                        <span>Assigned to: {worklist.assignedTo}</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Calendar className=\"h-4 w-4 text-gray-500\" />\n                        <span>Due: {new Date(worklist.dueDate).toLocaleString()}</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <span className={`px-2 py-1 rounded text-xs font-medium ${\n                          worklist.department === 'chemistry' ? 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400' :\n                          worklist.department === 'hematology' ? 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400' :\n                          worklist.department === 'microbiology' ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400' :\n                          'bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400'\n                        }`}>\n                          {worklist.department.charAt(0).toUpperCase() + worklist.department.slice(1)}\n                        </span>\n                      </div>\n                    </div>\n\n                    {/* Actions */}\n                    <div className=\"flex gap-2 pt-2\">\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        className=\"flex-1\"\n                        onClick={() => {\n                          console.log(`Viewing details for worklist: ${worklist.name}`);\n                          alert(`Viewing details for ${worklist.name}`);\n                        }}\n                      >\n                        View Details\n                      </Button>\n                      <Button \n                        size=\"sm\" \n                        className=\"flex-1\"\n                        onClick={() => {\n                          console.log(`Starting work on: ${worklist.name}`);\n                          alert(`Starting work on ${worklist.name}`);\n                        }}\n                      >\n                        Start Work\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"items\" className=\"mt-6 space-y-6\">\n          {/* Worklist Selection */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Select Worklist</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Select value={selectedWorklist} onValueChange={setSelectedWorklist}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Choose a worklist to view items\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {mockWorklists.map((worklist) => (\n                    <SelectItem key={worklist.id} value={worklist.id}>\n                      {worklist.name} ({worklist.itemCount} items)\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </CardContent>\n          </Card>\n\n          {/* Worklist Items */}\n          {selectedWorklist && (\n            <Card>\n              <CardHeader>\n                <CardTitle>\n                  Worklist Items\n                  {(() => {\n                    const worklist = mockWorklists.find(w => w.id === selectedWorklist);\n                    return worklist ? ` - ${worklist.name}` : '';\n                  })()}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead>\n                      <tr className=\"border-b border-gray-200 dark:border-gray-700\">\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                          Sample ID\n                        </th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                          Patient\n                        </th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                          Test Type\n                        </th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                          Priority\n                        </th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                          Status\n                        </th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                          Assigned To\n                        </th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                          Est. Time\n                        </th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\n                          Actions\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"divide-y divide-gray-200 dark:divide-gray-700\">\n                      {mockWorklistItems.map((item) => (\n                        <tr key={item.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-800\">\n                          <td className=\"py-3 px-4\">\n                            <span className=\"sample-id font-mono text-sm\">\n                              {item.sampleId}\n                            </span>\n                          </td>\n                          <td className=\"py-3 px-4\">\n                            <div className=\"patient-name\">\n                              {item.patientName}\n                            </div>\n                          </td>\n                          <td className=\"py-3 px-4 text-sm\">\n                            {item.testType}\n                          </td>\n                          <td className=\"py-3 px-4\">\n                            {getPriorityBadge(item.priority)}\n                          </td>\n                          <td className=\"py-3 px-4\">\n                            {getStatusBadge(item.status)}\n                          </td>\n                          <td className=\"py-3 px-4 text-sm\">\n                            {item.assignedTo}\n                          </td>\n                          <td className=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">\n                            {item.estimatedTime}\n                          </td>\n                          <td className=\"py-3 px-4\">\n                            <div className=\"flex gap-2\">\n                              {item.status === 'pending' && (\n                                <Button size=\"sm\">\n                                  Start\n                                </Button>\n                              )}\n                              {item.status === 'in_progress' && (\n                                <Button size=\"sm\" variant=\"outline\">\n                                  Complete\n                                </Button>\n                              )}\n                              <Button variant=\"ghost\" size=\"sm\">\n                                View\n                              </Button>\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":15586},"client/src/store/auth-store.ts":{"content":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { User } from '@shared/schema';\n\ninterface AuthState {\n  user: User | null;\n  isAuthenticated: boolean;\n  login: (user: User) => void;\n  logout: () => void;\n  updateUser: (updates: Partial<User>) => void;\n}\n\nexport const useAuthStore = create<AuthState>()(\n  persist(\n    (set, get) => ({\n      user: null,\n      isAuthenticated: false,\n      \n      login: (user: User) => {\n        set({ user, isAuthenticated: true });\n      },\n      \n      logout: () => {\n        set({ user: null, isAuthenticated: false });\n      },\n      \n      updateUser: (updates: Partial<User>) => {\n        const currentUser = get().user;\n        if (currentUser) {\n          set({ user: { ...currentUser, ...updates } });\n        }\n      },\n    }),\n    {\n      name: 'auth-storage',\n    }\n  )\n);\n","size_bytes":866},"client/src/store/samples-store.ts":{"content":"import { create } from 'zustand';\nimport type { Sample, Patient } from '@shared/schema';\n\ninterface SamplesState {\n  samples: Sample[];\n  selectedSample: Sample | null;\n  setSamples: (samples: Sample[]) => void;\n  addSample: (sample: Sample) => void;\n  updateSample: (id: string, updates: Partial<Sample>) => void;\n  setSelectedSample: (sample: Sample | null) => void;\n  getSamplesByStatus: (status: string) => Sample[];\n}\n\nexport const useSamplesStore = create<SamplesState>((set, get) => ({\n  samples: [],\n  selectedSample: null,\n  \n  setSamples: (samples: Sample[]) => set({ samples }),\n  \n  addSample: (sample: Sample) => {\n    set((state) => ({\n      samples: [sample, ...state.samples]\n    }));\n  },\n  \n  updateSample: (id: string, updates: Partial<Sample>) => {\n    set((state) => ({\n      samples: state.samples.map(sample =>\n        sample.id === id ? { ...sample, ...updates } : sample\n      )\n    }));\n  },\n  \n  setSelectedSample: (sample: Sample | null) => set({ selectedSample: sample }),\n  \n  getSamplesByStatus: (status: string) => {\n    return get().samples.filter(sample => sample.status === status);\n  },\n}));\n","size_bytes":1128},"client/src/store/ui-store.ts":{"content":"import { create } from 'zustand';\n\ninterface UIState {\n  sidebarOpen: boolean;\n  darkMode: boolean;\n  notifications: Array<{\n    id: string;\n    type: 'success' | 'error' | 'warning' | 'info';\n    title: string;\n    message: string;\n    timestamp: Date;\n  }>;\n  \n  toggleSidebar: () => void;\n  setSidebarOpen: (open: boolean) => void;\n  toggleDarkMode: () => void;\n  addNotification: (notification: Omit<UIState['notifications'][0], 'id' | 'timestamp'>) => void;\n  removeNotification: (id: string) => void;\n}\n\nexport const useUIStore = create<UIState>((set, get) => ({\n  sidebarOpen: false,\n  darkMode: false,\n  notifications: [],\n  \n  toggleSidebar: () => set((state) => ({ sidebarOpen: !state.sidebarOpen })),\n  setSidebarOpen: (open: boolean) => set({ sidebarOpen: open }),\n  toggleDarkMode: () => set((state) => ({ darkMode: !state.darkMode })),\n  \n  addNotification: (notification) => {\n    const id = Math.random().toString(36).substring(7);\n    const newNotification = {\n      ...notification,\n      id,\n      timestamp: new Date(),\n    };\n    \n    set((state) => ({\n      notifications: [newNotification, ...state.notifications].slice(0, 5)\n    }));\n    \n    // Auto-remove after 5 seconds\n    setTimeout(() => {\n      get().removeNotification(id);\n    }, 5000);\n  },\n  \n  removeNotification: (id: string) => {\n    set((state) => ({\n      notifications: state.notifications.filter(n => n.id !== id)\n    }));\n  },\n}));\n","size_bytes":1426},"client/src/types/index.ts":{"content":"export interface User {\n  id: string;\n  username: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: 'admin' | 'technician' | 'receptionist' | 'doctor' | 'lab_manager';\n  isActive: boolean;\n  lastLogin?: Date;\n}\n\nexport interface Patient {\n  id: string;\n  patientId: string;\n  firstName: string;\n  lastName: string;\n  dateOfBirth: Date;\n  gender: 'male' | 'female' | 'other' | 'unknown';\n  phoneNumber?: string;\n  email?: string;\n  address?: string;\n  emergencyContact?: string;\n  insuranceNumber?: string;\n}\n\nexport interface Sample {\n  id: string;\n  sampleId: string;\n  patientId: string;\n  sampleType: string;\n  status: 'received' | 'in_progress' | 'completed' | 'rejected' | 'cancelled';\n  priority: 'routine' | 'urgent' | 'stat' | 'critical';\n  collectionDateTime: Date;\n  receivedDateTime: Date;\n  patient?: Patient;\n}\n\nexport interface DashboardStats {\n  dailySamples: number;\n  resultsReady: number;\n  pendingTests: number;\n  activeUsers: number;\n}\n\nexport interface NavigationItem {\n  name: string;\n  href: string;\n  icon: string;\n  current?: boolean;\n}\n\nexport interface QuickAction {\n  name: string;\n  description: string;\n  icon: string;\n  action: () => void;\n  color: string;\n}\n","size_bytes":1214},"client/src/components/auth/login-form.tsx":{"content":"import { useState } from 'react';\nimport { useAuth } from '@/hooks/use-auth';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Loader2 } from 'lucide-react';\n\ninterface LoginFormProps {\n  onToggleMode?: () => void;\n}\n\nexport function LoginForm({ onToggleMode }: LoginFormProps) {\n  const { login, isLoading } = useAuth();\n  \n  const [form, setForm] = useState({\n    username: '',\n    password: '',\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    login(form);\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Sign in to your account</CardTitle>\n        <CardDescription>\n          Enter your credentials to access the laboratory system\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"username\">Username</Label>\n            <Input\n              id=\"username\"\n              type=\"text\"\n              required\n              value={form.username}\n              onChange={(e) => setForm(prev => ({ ...prev, username: e.target.value }))}\n              disabled={isLoading}\n              placeholder=\"Enter your username\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"password\">Password</Label>\n            <Input\n              id=\"password\"\n              type=\"password\"\n              required\n              value={form.password}\n              onChange={(e) => setForm(prev => ({ ...prev, password: e.target.value }))}\n              disabled={isLoading}\n              placeholder=\"Enter your password\"\n            />\n          </div>\n          \n          <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n            {isLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n            Sign In\n          </Button>\n          \n          {onToggleMode && (\n            <div className=\"text-center\">\n              <Button variant=\"link\" onClick={onToggleMode} className=\"text-sm\">\n                Don't have an account? Register here\n              </Button>\n            </div>\n          )}\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2375},"client/src/components/dashboard/charts.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, PieChart, Pie, Cell } from 'recharts';\n\n// Mock data for demonstration - in real app this would come from API\nconst sampleVolumeData = [\n  { day: 'Mon', samples: 45 },\n  { day: 'Tue', samples: 52 },\n  { day: 'Wed', samples: 48 },\n  { day: 'Thu', samples: 61 },\n  { day: 'Fri', samples: 55 },\n  { day: 'Sat', samples: 42 },\n  { day: 'Sun', samples: 38 },\n];\n\nconst testDistributionData = [\n  { name: 'Blood Chemistry', value: 35, color: 'hsl(207, 90%, 54%)' },\n  { name: 'Hematology', value: 25, color: 'hsl(142, 71%, 45%)' },\n  { name: 'Microbiology', value: 20, color: 'hsl(45, 93%, 47%)' },\n  { name: 'Immunology', value: 15, color: 'hsl(262, 52%, 47%)' },\n  { name: 'Other', value: 5, color: 'hsl(346, 77%, 49%)' },\n];\n\nexport function SampleVolumeChart() {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Sample Volume Trends</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"h-64\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <LineChart data={sampleVolumeData}>\n              <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-gray-200 dark:stroke-gray-700\" />\n              <XAxis \n                dataKey=\"day\" \n                className=\"text-xs text-gray-500 dark:text-gray-400\"\n              />\n              <YAxis className=\"text-xs text-gray-500 dark:text-gray-400\" />\n              <Tooltip \n                contentStyle={{\n                  backgroundColor: 'hsl(var(--background))',\n                  border: '1px solid hsl(var(--border))',\n                  borderRadius: '6px',\n                }}\n              />\n              <Line \n                type=\"monotone\" \n                dataKey=\"samples\" \n                stroke=\"hsl(207, 90%, 54%)\" \n                strokeWidth={2}\n                dot={{ fill: 'hsl(207, 90%, 54%)', strokeWidth: 2, r: 4 }}\n                activeDot={{ r: 6, stroke: 'hsl(207, 90%, 54%)', strokeWidth: 2 }}\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport function TestDistributionChart() {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Test Type Distribution</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"h-64\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <PieChart>\n              <Pie\n                data={testDistributionData}\n                cx=\"50%\"\n                cy=\"50%\"\n                innerRadius={40}\n                outerRadius={80}\n                paddingAngle={2}\n                dataKey=\"value\"\n              >\n                {testDistributionData.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={entry.color} />\n                ))}\n              </Pie>\n              <Tooltip\n                contentStyle={{\n                  backgroundColor: 'hsl(var(--background))',\n                  border: '1px solid hsl(var(--border))',\n                  borderRadius: '6px',\n                }}\n                formatter={(value: number, name: string) => [\n                  `${value}%`,\n                  name\n                ]}\n              />\n            </PieChart>\n          </ResponsiveContainer>\n        </div>\n        \n        {/* Legend */}\n        <div className=\"mt-4 flex flex-wrap gap-4 justify-center\">\n          {testDistributionData.map((item) => (\n            <div key={item.name} className=\"flex items-center gap-2\">\n              <div \n                className=\"w-3 h-3 rounded-full\" \n                style={{ backgroundColor: item.color }}\n              />\n              <span className=\"text-xs text-gray-600 dark:text-gray-400\">\n                {item.name} ({item.value}%)\n              </span>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3987},"client/src/components/dashboard/kpi-cards.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { \n  TestTubeDiagonal, \n  CheckCircle, \n  Clock, \n  Users \n} from 'lucide-react';\nimport type { DashboardStats } from '@/types';\n\nexport function KPICards() {\n  const { data: stats, isLoading } = useQuery<DashboardStats>({\n    queryKey: ['/api/dashboard/stats'],\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-4\">\n        {[...Array(4)].map((_, i) => (\n          <Card key={i}>\n            <CardContent className=\"p-6\">\n              <Skeleton className=\"h-16 w-full\" />\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  const kpis = [\n    {\n      name: 'Samples Today',\n      value: stats?.dailySamples || 0,\n      change: '+12%',\n      changeType: 'positive' as const,\n      icon: TestTubeDiagonal,\n      iconColor: 'text-blue-600',\n      iconBg: 'bg-blue-100 dark:bg-blue-900/20',\n    },\n    {\n      name: 'Results Ready',\n      value: stats?.resultsReady || 0,\n      change: '+8%',\n      changeType: 'positive' as const,\n      icon: CheckCircle,\n      iconColor: 'text-green-600',\n      iconBg: 'bg-green-100 dark:bg-green-900/20',\n    },\n    {\n      name: 'Pending Tests',\n      value: stats?.pendingTests || 0,\n      change: '2.5 hrs',\n      changeType: 'neutral' as const,\n      icon: Clock,\n      iconColor: 'text-orange-600',\n      iconBg: 'bg-orange-100 dark:bg-orange-900/20',\n    },\n    {\n      name: 'Active Users',\n      value: stats?.activeUsers || 0,\n      change: 'Online now',\n      changeType: 'neutral' as const,\n      icon: Users,\n      iconColor: 'text-purple-600',\n      iconBg: 'bg-purple-100 dark:bg-purple-900/20',\n    },\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-4\">\n      {kpis.map((kpi) => {\n        const Icon = kpi.icon;\n        \n        return (\n          <Card key={kpi.name} className=\"overflow-hidden\">\n            <CardContent className=\"p-0\">\n              <div className=\"p-5\">\n                <div className=\"flex items-center\">\n                  <div className=\"flex-shrink-0\">\n                    <div className={`h-8 w-8 ${kpi.iconBg} rounded-lg flex items-center justify-center`}>\n                      <Icon className={`h-5 w-5 ${kpi.iconColor}`} />\n                    </div>\n                  </div>\n                  <div className=\"ml-5 w-0 flex-1\">\n                    <dl>\n                      <dt className=\"text-sm font-medium text-gray-500 truncate dark:text-gray-400\">\n                        {kpi.name}\n                      </dt>\n                      <dd>\n                        <div className=\"text-lg font-medium text-gray-900 dark:text-white\">\n                          {kpi.value}\n                        </div>\n                      </dd>\n                    </dl>\n                  </div>\n                </div>\n              </div>\n              <div className=\"bg-gray-50 px-5 py-3 dark:bg-gray-700\">\n                <div className=\"text-sm\">\n                  <span className={`font-medium ${\n                    kpi.changeType === 'positive' \n                      ? 'text-green-600' \n                      : 'text-blue-600'\n                  }`}>\n                    {kpi.change}\n                  </span>\n                  <span className=\"text-gray-500 dark:text-gray-400 ml-1\">\n                    {kpi.changeType === 'positive' ? 'from yesterday' : \n                     kpi.name === 'Pending Tests' ? 'avg turnaround' : \n                     'across all modules'}\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":3862},"client/src/components/dashboard/quick-actions.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Link } from 'wouter';\nimport { \n  UserPlus, \n  ScanLine, \n  ClipboardList, \n  FileText,\n  Activity,\n  AlertTriangle \n} from 'lucide-react';\n\nexport function QuickActions() {\n  const actions = [\n    {\n      title: 'Register Patient',\n      description: 'Add new patient to system',\n      icon: UserPlus,\n      href: '/reception',\n      color: 'bg-blue-50 border-blue-200 hover:bg-blue-100 dark:bg-blue-900/20 dark:border-blue-700',\n      iconColor: 'text-blue-600',\n    },\n    {\n      title: 'Scan Barcode',\n      description: 'Quick sample lookup',\n      icon: ScanLine,\n      href: '/sampling',\n      color: 'bg-green-50 border-green-200 hover:bg-green-100 dark:bg-green-900/20 dark:border-green-700',\n      iconColor: 'text-green-600',\n    },\n    {\n      title: 'View Worklist',\n      description: 'Check pending tasks',\n      icon: ClipboardList,\n      href: '/worklists',\n      color: 'bg-orange-50 border-orange-200 hover:bg-orange-100 dark:bg-orange-900/20 dark:border-orange-700',\n      iconColor: 'text-orange-600',\n    },\n    {\n      title: 'Generate Report',\n      description: 'Create lab summary',\n      icon: FileText,\n      href: '/reports',\n      color: 'bg-purple-50 border-purple-200 hover:bg-purple-100 dark:bg-purple-900/20 dark:border-purple-700',\n      iconColor: 'text-purple-600',\n    },\n  ];\n\n  const labStatus = [\n    {\n      label: 'Equipment Status',\n      status: 'Online',\n      color: 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400',\n      indicator: 'bg-green-400',\n    },\n    {\n      label: 'Quality Control',\n      status: 'Passed',\n      color: 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400',\n      indicator: 'bg-green-400',\n    },\n    {\n      label: 'Reagent Levels',\n      status: 'Low',\n      color: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400',\n      indicator: 'bg-yellow-400',\n    },\n  ];\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Quick Actions</CardTitle>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        {actions.map((action) => {\n          const Icon = action.icon;\n          \n          return (\n            <Link key={action.title} href={action.href}>\n              <Button\n                variant=\"ghost\"\n                className={`w-full ${action.color} border rounded-lg p-4 h-auto justify-start transition-colors`}\n              >\n                <div className=\"flex items-center w-full\">\n                  <div className=\"flex-shrink-0\">\n                    <Icon className={`h-6 w-6 ${action.iconColor}`} />\n                  </div>\n                  <div className=\"ml-3 text-left\">\n                    <p className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">\n                      {action.title}\n                    </p>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      {action.description}\n                    </p>\n                  </div>\n                </div>\n              </Button>\n            </Link>\n          );\n        })}\n\n        {/* Lab Status Section */}\n        <div className=\"pt-6 border-t border-gray-200 dark:border-gray-700\">\n          <h4 className=\"text-sm font-medium text-gray-900 mb-3 dark:text-white\">\n            Lab Status\n          </h4>\n          <div className=\"space-y-2\">\n            {labStatus.map((item) => (\n              <div key={item.label} className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  {item.label}\n                </span>\n                <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${item.color}`}>\n                  <div className={`w-1.5 h-1.5 ${item.indicator} rounded-full mr-1`} />\n                  {item.status}\n                </span>\n              </div>\n            ))}\n          </div>\n          \n          {/* Alert for low reagents */}\n          <div className=\"mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg dark:bg-yellow-900/20 dark:border-yellow-700\">\n            <div className=\"flex items-center\">\n              <AlertTriangle className=\"h-4 w-4 text-yellow-600 dark:text-yellow-400\" />\n              <span className=\"ml-2 text-sm font-medium text-yellow-800 dark:text-yellow-400\">\n                Reagent levels are low\n              </span>\n            </div>\n            <p className=\"mt-1 text-xs text-yellow-700 dark:text-yellow-300\">\n              Consider restocking before end of day\n            </p>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4769},"client/src/components/dashboard/recent-samples.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { formatDistanceToNow } from 'date-fns';\nimport { Link } from 'wouter';\nimport type { Sample, Patient } from '@/types';\n\ninterface RecentSampleWithPatient extends Sample {\n  patient: Patient;\n}\n\nexport function RecentSamples() {\n  const { data: samples, isLoading } = useQuery<RecentSampleWithPatient[]>({\n    queryKey: ['/api/dashboard/recent-samples'],\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400';\n      case 'in_progress':\n        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400';\n      case 'received':\n        return 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400';\n      case 'rejected':\n        return 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400';\n      default:\n        return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400';\n    }\n  };\n\n  const formatStatus = (status: string) => {\n    switch (status) {\n      case 'in_progress':\n        return 'In Progress';\n      case 'received':\n        return 'Received';\n      case 'completed':\n        return 'Completed';\n      case 'rejected':\n        return 'Rejected';\n      case 'cancelled':\n        return 'Cancelled';\n      default:\n        return status;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <CardTitle>Recent Samples</CardTitle>\n          <Skeleton className=\"h-8 w-16\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"flex items-center space-x-4\">\n                <Skeleton className=\"h-4 w-32\" />\n                <Skeleton className=\"h-4 w-24\" />\n                <Skeleton className=\"h-4 w-40\" />\n                <Skeleton className=\"h-6 w-20\" />\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between\">\n        <CardTitle>Recent Samples</CardTitle>\n        <Link href=\"/sampling\">\n          <Button variant=\"ghost\" size=\"sm\">\n            View all\n          </Button>\n        </Link>\n      </CardHeader>\n      \n      <CardContent className=\"p-0\">\n        <div className=\"overflow-hidden\">\n          <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n            <thead className=\"bg-gray-50 dark:bg-gray-700\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-400\">\n                  Sample ID\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-400\">\n                  Patient\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-400\">\n                  Type\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-400\">\n                  Status\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-400\">\n                  Time\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200 dark:bg-gray-800 dark:divide-gray-700\">\n              {samples?.map((sample) => (\n                <tr key={sample.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-700/50\">\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-mono text-gray-900 dark:text-white\">\n                    <Link href={`/samples/${sample.id}`}>\n                      <span className=\"hover:text-primary cursor-pointer\">\n                        {sample.sampleId}\n                      </span>\n                    </Link>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white\">\n                    <Link href={`/patients/${sample.patient.id}`}>\n                      <span className=\"hover:text-primary cursor-pointer\">\n                        {sample.patient.firstName} {sample.patient.lastName}\n                      </span>\n                    </Link>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white\">\n                    {sample.sampleType}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <Badge className={getStatusColor(sample.status)}>\n                      {formatStatus(sample.status)}\n                    </Badge>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">\n                    {formatDistanceToNow(new Date(sample.receivedDateTime), { addSuffix: true })}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n          \n          {samples && samples.length === 0 && (\n            <div className=\"px-6 py-8 text-center\">\n              <p className=\"text-gray-500 dark:text-gray-400\">No recent samples found</p>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5889},"client/src/components/layout/app-layout.tsx":{"content":"import { useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { useAuthStore } from '@/store/auth-store';\nimport { useUIStore } from '@/store/ui-store';\nimport { useWebSocket } from '@/hooks/use-websocket';\nimport { Sidebar } from './sidebar';\nimport { TopNavigation } from './top-navigation';\nimport { cn } from '@/lib/utils';\n\ninterface AppLayoutProps {\n  children: React.ReactNode;\n}\n\nexport function AppLayout({ children }: AppLayoutProps) {\n  const [location] = useLocation();\n  const { isAuthenticated } = useAuthStore();\n  const { darkMode, sidebarOpen } = useUIStore();\n  const { isConnected } = useWebSocket();\n\n  useEffect(() => {\n    if (darkMode) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, [darkMode]);\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isAuthenticated && location !== '/login') {\n      window.location.href = '/login';\n    }\n  }, [isAuthenticated, location]);\n\n  if (!isAuthenticated && location !== '/login') {\n    return null;\n  }\n\n  if (location === '/login') {\n    return <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">{children}</div>;\n  }\n\n  return (\n    <div className=\"h-full\">\n      <Sidebar />\n      \n      {/* Mobile sidebar overlay */}\n      {sidebarOpen && (\n        <div className=\"fixed inset-0 z-40 lg:hidden\">\n          <div className=\"fixed inset-0 bg-gray-600 bg-opacity-75\" />\n        </div>\n      )}\n\n      <div className={cn(\n        \"flex flex-col flex-1\",\n        \"lg:pl-64\" // Always push content on desktop\n      )}>\n        <TopNavigation />\n        \n        <main className=\"flex-1 bg-gray-50 dark:bg-gray-900\">\n          {/* Connection status indicator */}\n          <div className=\"fixed bottom-4 right-4 z-50\">\n            <div className={cn(\n              \"flex items-center gap-2 px-3 py-2 rounded-full text-xs font-medium\",\n              isConnected \n                ? \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100\" \n                : \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-100\"\n            )}>\n              <div className={cn(\n                \"w-2 h-2 rounded-full\",\n                isConnected ? \"bg-green-400\" : \"bg-red-400\"\n              )} />\n              {isConnected ? \"Connected\" : \"Disconnected\"}\n            </div>\n          </div>\n          \n          {children}\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2470},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from 'wouter';\nimport { useAuthStore } from '@/store/auth-store';\nimport { useUIStore } from '@/store/ui-store';\nimport { NAVIGATION_ITEMS, ADMIN_NAVIGATION_ITEMS } from '@/lib/constants';\nimport { cn } from '@/lib/utils';\nimport { \n  Microscope, \n  LayoutDashboard, \n  UserPlus, \n  TestTube, \n  ClipboardCheck,\n  ListChecks,\n  ShieldCheck,\n  Send,\n  BarChart3,\n  DollarSign,\n  Users,\n  CreditCard,\n  Settings\n} from 'lucide-react';\n\nconst iconMap = {\n  'layout-dashboard': LayoutDashboard,\n  'user-plus': UserPlus,\n  'test-tube': TestTube,\n  'clipboard-check': ClipboardCheck,\n  'list-checks': ListChecks,\n  'shield-check': ShieldCheck,\n  'send': Send,\n  'bar-chart-3': BarChart3,\n  'dollar-sign': DollarSign,\n  'users': Users,\n  'credit-card': CreditCard,\n  'settings': Settings,\n};\n\nexport function Sidebar() {\n  const [location] = useLocation();\n  const { user } = useAuthStore();\n  const { sidebarOpen, setSidebarOpen } = useUIStore();\n\n  const isAdmin = user?.role === 'admin' || user?.role === 'lab_manager';\n\n  const isActive = (href: string) => {\n    if (href === '/dashboard') {\n      return location === '/' || location === '/dashboard';\n    }\n    return location.startsWith(href);\n  };\n\n  return (\n    <>\n      {/* Desktop sidebar */}\n      <aside className=\"hidden lg:flex lg:w-64 lg:flex-col lg:fixed lg:inset-y-0 lg:z-50 lg:bg-white lg:border-r lg:border-gray-200 dark:bg-gray-800 dark:border-gray-700\">\n        <div className=\"flex grow flex-col gap-y-5 overflow-y-auto px-6 pb-4\">\n          {/* Logo */}\n          <div className=\"flex h-16 shrink-0 items-center border-b border-gray-200 dark:border-gray-700\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"h-8 w-8 bg-primary rounded-lg flex items-center justify-center\">\n                <Microscope className=\"h-5 w-5 text-primary-foreground\" />\n              </div>\n              <span className=\"text-xl font-semibold text-gray-900 dark:text-white\">\n                MedLab LIS\n              </span>\n            </div>\n          </div>\n\n          {/* Navigation */}\n          <nav className=\"flex flex-1 flex-col\">\n            <ul role=\"list\" className=\"flex flex-1 flex-col gap-y-7\">\n              <li>\n                <ul role=\"list\" className=\"-mx-2 space-y-1\">\n                  {NAVIGATION_ITEMS.map((item) => {\n                    const Icon = iconMap[item.icon as keyof typeof iconMap];\n                    const active = isActive(item.href);\n                    \n                    return (\n                      <li key={item.name}>\n                        <Link href={item.href}>\n                          <a className={cn(\n                            'group flex gap-x-3 rounded-md p-2 text-sm leading-6 font-semibold',\n                            active\n                              ? 'bg-primary/10 text-primary dark:bg-primary/20'\n                              : 'text-gray-700 hover:text-primary hover:bg-gray-50 dark:text-gray-300 dark:hover:bg-gray-700'\n                          )}>\n                            {Icon && <Icon className=\"h-5 w-5 shrink-0\" />}\n                            {item.name}\n                          </a>\n                        </Link>\n                      </li>\n                    );\n                  })}\n                </ul>\n              </li>\n              \n              {isAdmin && (\n                <li className=\"border-t border-gray-200 dark:border-gray-700 pt-4\">\n                  <ul role=\"list\" className=\"-mx-2 space-y-1\">\n                    {ADMIN_NAVIGATION_ITEMS.map((item) => {\n                      const Icon = iconMap[item.icon as keyof typeof iconMap];\n                      const active = isActive(item.href);\n                      \n                      return (\n                        <li key={item.name}>\n                          <Link \n                            href={item.href}\n                            className={cn(\n                              'group flex gap-x-3 rounded-md p-2 text-sm leading-6 font-semibold',\n                              active\n                                ? 'bg-primary/10 text-primary dark:bg-primary/20'\n                                : 'text-gray-700 hover:text-primary hover:bg-gray-50 dark:text-gray-300 dark:hover:bg-gray-700'\n                            )}\n                          >\n                            {Icon && <Icon className=\"h-5 w-5 shrink-0\" />}\n                            {item.name}\n                          </Link>\n                        </li>\n                      );\n                    })}\n                  </ul>\n                </li>\n              )}\n            </ul>\n          </nav>\n        </div>\n      </aside>\n\n      {/* Mobile sidebar */}\n      <aside className={cn(\n        \"fixed inset-y-0 left-0 z-50 w-64 bg-white border-r border-gray-200 lg:hidden dark:bg-gray-800 dark:border-gray-700 transition-transform duration-300 ease-in-out\",\n        sidebarOpen ? \"translate-x-0\" : \"-translate-x-full\"\n      )}>\n        <div className=\"flex grow flex-col gap-y-5 overflow-y-auto px-6 pb-4\">\n          {/* Logo */}\n          <div className=\"flex h-16 shrink-0 items-center border-b border-gray-200 dark:border-gray-700\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"h-8 w-8 bg-primary rounded-lg flex items-center justify-center\">\n                <Microscope className=\"h-5 w-5 text-primary-foreground\" />\n              </div>\n              <span className=\"text-xl font-semibold text-gray-900 dark:text-white\">\n                MedLab LIS\n              </span>\n            </div>\n          </div>\n\n          {/* Navigation */}\n          <nav className=\"flex flex-1 flex-col\">\n            <ul role=\"list\" className=\"flex flex-1 flex-col gap-y-7\">\n              <li>\n                <ul role=\"list\" className=\"-mx-2 space-y-1\">\n                  {NAVIGATION_ITEMS.map((item) => {\n                    const Icon = iconMap[item.icon as keyof typeof iconMap];\n                    const active = isActive(item.href);\n                    \n                    return (\n                      <li key={item.name}>\n                        <Link \n                          href={item.href}\n                          className={cn(\n                            'group flex gap-x-3 rounded-md p-2 text-sm leading-6 font-semibold',\n                            active\n                              ? 'bg-primary/10 text-primary dark:bg-primary/20'\n                              : 'text-gray-700 hover:text-primary hover:bg-gray-50 dark:text-gray-300 dark:hover:bg-gray-700'\n                          )}\n                          onClick={() => setSidebarOpen(false)}\n                        >\n                          {Icon && <Icon className=\"h-5 w-5 shrink-0\" />}\n                          {item.name}\n                        </Link>\n                      </li>\n                    );\n                  })}\n                </ul>\n              </li>\n              \n              {isAdmin && (\n                <li className=\"border-t border-gray-200 dark:border-gray-700 pt-4\">\n                  <ul role=\"list\" className=\"-mx-2 space-y-1\">\n                    {ADMIN_NAVIGATION_ITEMS.map((item) => {\n                      const Icon = iconMap[item.icon as keyof typeof iconMap];\n                      const active = isActive(item.href);\n                      \n                      return (\n                        <li key={item.name}>\n                          <Link \n                            href={item.href}\n                            className={cn(\n                              'group flex gap-x-3 rounded-md p-2 text-sm leading-6 font-semibold',\n                              active\n                                ? 'bg-primary/10 text-primary dark:bg-primary/20'\n                                : 'text-gray-700 hover:text-primary hover:bg-gray-50 dark:text-gray-300 dark:hover:bg-gray-700'\n                            )}\n                            onClick={() => setSidebarOpen(false)}\n                          >\n                            {Icon && <Icon className=\"h-5 w-5 shrink-0\" />}\n                            {item.name}\n                          </Link>\n                        </li>\n                      );\n                    })}\n                  </ul>\n                </li>\n              )}\n            </ul>\n          </nav>\n        </div>\n      </aside>\n    </>\n  );\n}\n","size_bytes":8412},"client/src/components/layout/top-navigation.tsx":{"content":"import { useState } from 'react';\nimport { useAuthStore } from '@/store/auth-store';\nimport { useUIStore } from '@/store/ui-store';\nimport { useAuth } from '@/hooks/use-auth';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { \n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { \n  Menu, \n  Search, \n  Bell, \n  ChevronDown, \n  User, \n  Settings, \n  Moon, \n  Sun,\n  LogOut \n} from 'lucide-react';\n\nexport function TopNavigation() {\n  const { user } = useAuthStore();\n  const { darkMode, toggleSidebar, toggleDarkMode } = useUIStore();\n  const { logout } = useAuth();\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log('Searching for:', searchQuery);\n    if (searchQuery.trim()) {\n      alert(`Searching for: \"${searchQuery}\"\\n\\nSearch functionality will be implemented to find patients, samples, and results.`);\n    }\n  };\n\n  return (\n    <div className=\"sticky top-0 z-40 flex h-16 shrink-0 items-center gap-x-4 border-b border-gray-200 bg-white px-4 shadow-sm sm:gap-x-6 sm:px-6 lg:px-8 dark:bg-gray-800 dark:border-gray-700\">\n      {/* Mobile menu button */}\n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        className=\"lg:hidden\"\n        onClick={toggleSidebar}\n      >\n        <Menu className=\"h-6 w-6\" />\n        <span className=\"sr-only\">Toggle sidebar</span>\n      </Button>\n\n      {/* Search */}\n      <div className=\"flex flex-1 gap-x-4 lg:gap-x-6\">\n        <form \n          className=\"relative flex flex-1 max-w-md\" \n          role=\"search\"\n          onSubmit={handleSearch}\n        >\n          <Search className=\"pointer-events-none absolute inset-y-0 left-0 h-full w-5 text-gray-400 ml-3\" />\n          <Input\n            type=\"search\"\n            placeholder=\"Search patients, samples, results...\"\n            className=\"pl-10 border-0 bg-transparent focus:ring-0\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n          />\n        </form>\n      </div>\n\n      {/* Right side actions */}\n      <div className=\"flex items-center gap-x-4 lg:gap-x-6\">\n        {/* Dark mode toggle */}\n        <Button variant=\"ghost\" size=\"sm\" onClick={toggleDarkMode}>\n          {darkMode ? (\n            <Sun className=\"h-5 w-5\" />\n          ) : (\n            <Moon className=\"h-5 w-5\" />\n          )}\n          <span className=\"sr-only\">Toggle theme</span>\n        </Button>\n\n        {/* Notifications */}\n        <Button variant=\"ghost\" size=\"sm\" className=\"relative\">\n          <Bell className=\"h-5 w-5\" />\n          <span className=\"absolute -top-1 -right-1 h-3 w-3 bg-red-500 rounded-full\">\n            <span className=\"animate-ping absolute inline-flex h-full w-full rounded-full bg-red-400 opacity-75\"></span>\n          </span>\n          <span className=\"sr-only\">View notifications</span>\n        </Button>\n\n        {/* Profile dropdown */}\n        <div className=\"hidden lg:block lg:h-6 lg:w-px lg:bg-gray-200 dark:bg-gray-700\" />\n        \n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" className=\"flex items-center gap-2\">\n              <div className=\"h-8 w-8 rounded-full bg-primary/10 flex items-center justify-center\">\n                <User className=\"h-4 w-4\" />\n              </div>\n              <span className=\"hidden lg:flex lg:items-center\">\n                <span className=\"ml-2 text-sm font-semibold leading-6 text-gray-900 dark:text-white\">\n                  {user ? `${user.firstName} ${user.lastName}` : 'User'}\n                </span>\n                <ChevronDown className=\"ml-2 h-4 w-4 text-gray-400\" />\n              </span>\n            </Button>\n          </DropdownMenuTrigger>\n          \n          <DropdownMenuContent align=\"end\" className=\"w-56\">\n            <div className=\"px-2 py-1.5 text-sm text-gray-700 dark:text-gray-200\">\n              <div className=\"font-medium\">{user?.firstName} {user?.lastName}</div>\n              <div className=\"text-xs text-gray-500 dark:text-gray-400\">{user?.email}</div>\n            </div>\n            \n            <DropdownMenuSeparator />\n            \n            <DropdownMenuItem>\n              <User className=\"mr-2 h-4 w-4\" />\n              Profile\n            </DropdownMenuItem>\n            \n            <DropdownMenuItem>\n              <Settings className=\"mr-2 h-4 w-4\" />\n              Settings\n            </DropdownMenuItem>\n            \n            <DropdownMenuSeparator />\n            \n            <DropdownMenuItem onClick={logout}>\n              <LogOut className=\"mr-2 h-4 w-4\" />\n              Sign out\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4871},"client/src/components/reception/patient-registration.tsx":{"content":"import { useState } from 'react';\nimport { usePatients } from '@/hooks/use-patients';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Separator } from '@/components/ui/separator';\nimport { Switch } from '@/components/ui/switch';\nimport { Loader2, User, Plus, Trash2 } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface Medication {\n  name: string;\n  type: string;\n  dose: string;\n  duration: string;\n}\n\nexport function PatientRegistration() {\n  const { createPatient, isCreating } = usePatients();\n  const { toast } = useToast();\n  \n  const [form, setForm] = useState({\n    patientId: '',\n    firstName: '',\n    lastName: '',\n    dateOfBirth: '',\n    gender: '',\n    phoneNumber: '',\n    email: '',\n    address: '',\n    emergencyContact: '',\n    insuranceNumber: '',\n    nationalId: '',\n    treatingDoctor: '',\n    landline: '',\n    fastingHours: '',\n    isFasting: false,\n    isDiabetic: false,\n    isOnBloodThinner: false,\n    isOnAntibiotics: false,\n    isOnThyroidMedication: false,\n    isOnKidneyTreatment: false,\n    isOnLiverTreatment: false,\n    isOnCholesterolMedication: false,\n    isOnCortisone: false,\n    hadContrastScan: false,\n    hadBloodTransfusion: false,\n    bloodTransfusionDate: '',\n    hadSurgeries: false,\n    hadChemoRadiotherapy: false,\n    lastMenstrualPeriod: '',\n    isPregnant: false,\n    requiredTests: '',\n    isOnIronVitamins: false,\n    ironVitaminsDose: '',\n    ironVitaminsDuration: '',\n  });\n\n  const [medications, setMedications] = useState<Medication[]>([\n    { name: '', type: '', dose: '', duration: '' }\n  ]);\n\n  const generatePatientId = () => {\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    const time = String(now.getTime()).slice(-4);\n    return `PAT-${year}${month}${day}-${time}`;\n  };\n\n  const addMedication = () => {\n    setMedications([...medications, { name: '', type: '', dose: '', duration: '' }]);\n  };\n\n  const removeMedication = (index: number) => {\n    setMedications(medications.filter((_, i) => i !== index));\n  };\n\n  const updateMedication = (index: number, field: keyof Medication, value: string) => {\n    const updated = [...medications];\n    updated[index][field] = value;\n    setMedications(updated);\n  };\n\n  const clearForm = () => {\n    setForm({\n      patientId: '',\n      firstName: '',\n      lastName: '',\n      dateOfBirth: '',\n      gender: '',\n      phoneNumber: '',\n      email: '',\n      address: '',\n      emergencyContact: '',\n      insuranceNumber: '',\n      nationalId: '',\n      treatingDoctor: '',\n      landline: '',\n      fastingHours: '',\n      isFasting: false,\n      isDiabetic: false,\n      isOnBloodThinner: false,\n      isOnAntibiotics: false,\n      isOnThyroidMedication: false,\n      isOnKidneyTreatment: false,\n      isOnLiverTreatment: false,\n      isOnCholesterolMedication: false,\n      isOnCortisone: false,\n      hadContrastScan: false,\n      hadBloodTransfusion: false,\n      bloodTransfusionDate: '',\n      hadSurgeries: false,\n      hadChemoRadiotherapy: false,\n      lastMenstrualPeriod: '',\n      isPregnant: false,\n      requiredTests: '',\n      isOnIronVitamins: false,\n      ironVitaminsDose: '',\n      ironVitaminsDuration: '',\n    });\n    setMedications([{ name: '', type: '', dose: '', duration: '' }]);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!form.patientId) {\n      setForm(prev => ({ ...prev, patientId: generatePatientId() }));\n    }\n    \n    const patientData = {\n      ...form,\n      dateOfBirth: new Date(form.dateOfBirth),\n      gender: form.gender as 'male' | 'female' | 'other' | 'unknown',\n      fastingHours: form.fastingHours ? parseInt(form.fastingHours) : null,\n      bloodTransfusionDate: form.bloodTransfusionDate ? new Date(form.bloodTransfusionDate) : null,\n      lastMenstrualPeriod: form.lastMenstrualPeriod ? new Date(form.lastMenstrualPeriod) : null,\n      medications: medications.filter(med => med.name.trim() !== ''),\n    };\n\n    createPatient(patientData, {\n      onSuccess: () => {\n        clearForm();\n        toast({\n          title: \"Patient registered successfully\",\n          description: `${form.firstName} ${form.lastName} has been added to the system.`,\n        });\n      },\n      onError: (error) => {\n        console.error('Registration failed:', error);\n        toast({\n          title: \"Registration failed\",\n          description: \"Please check all fields and try again.\",\n          variant: \"destructive\",\n        });\n      },\n    });\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <User className=\"h-5 w-5\" />\n          Patient Registration\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-8\">\n          {/* Basic Information */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium\">Basic Information</h3>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <Label htmlFor=\"patientId\">Patient ID</Label>\n                <Input\n                  id=\"patientId\"\n                  value={form.patientId}\n                  onChange={(e) => setForm(prev => ({ ...prev, patientId: e.target.value }))}\n                  placeholder=\"Auto-generated if empty\"\n                  disabled={isCreating}\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"nationalId\">National ID</Label>\n                <Input\n                  id=\"nationalId\"\n                  value={form.nationalId}\n                  onChange={(e) => setForm(prev => ({ ...prev, nationalId: e.target.value }))}\n                  placeholder=\"National ID number\"\n                  disabled={isCreating}\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"insuranceNumber\">Insurance Number</Label>\n                <Input\n                  id=\"insuranceNumber\"\n                  value={form.insuranceNumber}\n                  onChange={(e) => setForm(prev => ({ ...prev, insuranceNumber: e.target.value }))}\n                  placeholder=\"Insurance number\"\n                  disabled={isCreating}\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"firstName\">First Name *</Label>\n                <Input\n                  id=\"firstName\"\n                  required\n                  value={form.firstName}\n                  onChange={(e) => setForm(prev => ({ ...prev, firstName: e.target.value }))}\n                  placeholder=\"First name\"\n                  disabled={isCreating}\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"lastName\">Last Name *</Label>\n                <Input\n                  id=\"lastName\"\n                  required\n                  value={form.lastName}\n                  onChange={(e) => setForm(prev => ({ ...prev, lastName: e.target.value }))}\n                  placeholder=\"Last name\"\n                  disabled={isCreating}\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"dateOfBirth\">Date of Birth *</Label>\n                <Input\n                  id=\"dateOfBirth\"\n                  type=\"date\"\n                  required\n                  value={form.dateOfBirth}\n                  onChange={(e) => setForm(prev => ({ ...prev, dateOfBirth: e.target.value }))}\n                  disabled={isCreating}\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"gender\">Gender *</Label>\n                <Select value={form.gender} onValueChange={(value) => setForm(prev => ({ ...prev, gender: value }))}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select gender\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"male\">Male</SelectItem>\n                    <SelectItem value=\"female\">Female</SelectItem>\n                    <SelectItem value=\"other\">Other</SelectItem>\n                    <SelectItem value=\"unknown\">Prefer not to say</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"treatingDoctor\">Treating Doctor</Label>\n              <Input\n                id=\"treatingDoctor\"\n                value={form.treatingDoctor}\n                onChange={(e) => setForm(prev => ({ ...prev, treatingDoctor: e.target.value }))}\n                placeholder=\"Treating doctor name\"\n                disabled={isCreating}\n              />\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Contact Information */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium\">Contact Information</h3>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"phoneNumber\">Mobile</Label>\n                <Input\n                  id=\"phoneNumber\"\n                  type=\"tel\"\n                  value={form.phoneNumber}\n                  onChange={(e) => setForm(prev => ({ ...prev, phoneNumber: e.target.value }))}\n                  placeholder=\"Mobile number\"\n                  disabled={isCreating}\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"landline\">Landline</Label>\n                <Input\n                  id=\"landline\"\n                  type=\"tel\"\n                  value={form.landline}\n                  onChange={(e) => setForm(prev => ({ ...prev, landline: e.target.value }))}\n                  placeholder=\"Landline number\"\n                  disabled={isCreating}\n                />\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={form.email}\n                onChange={(e) => setForm(prev => ({ ...prev, email: e.target.value }))}\n                placeholder=\"Email address\"\n                disabled={isCreating}\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"address\">Address</Label>\n              <Textarea\n                id=\"address\"\n                value={form.address}\n                onChange={(e) => setForm(prev => ({ ...prev, address: e.target.value }))}\n                placeholder=\"Full address\"\n                rows={3}\n                disabled={isCreating}\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"emergencyContact\">Emergency Contact</Label>\n              <Input\n                id=\"emergencyContact\"\n                value={form.emergencyContact}\n                onChange={(e) => setForm(prev => ({ ...prev, emergencyContact: e.target.value }))}\n                placeholder=\"Emergency contact number\"\n                disabled={isCreating}\n              />\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Pre-test Questionnaire */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium\">Pre-test Questionnaire</h3>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"fastingHours\">Number of fasting hours</Label>\n                <div className=\"flex items-center gap-2\">\n                  <Input\n                    id=\"fastingHours\"\n                    type=\"number\"\n                    value={form.fastingHours}\n                    onChange={(e) => setForm(prev => ({ ...prev, fastingHours: e.target.value }))}\n                    placeholder=\"0\"\n                    disabled={isCreating}\n                    className=\"flex-1\"\n                  />\n                  <span className=\"text-sm text-gray-500\">hours</span>\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <Label htmlFor=\"isFasting\">Are you fasting?</Label>\n                <Switch\n                  id=\"isFasting\"\n                  checked={form.isFasting}\n                  onCheckedChange={(checked) => setForm(prev => ({ ...prev, isFasting: checked }))}\n                  disabled={isCreating}\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"flex items-center justify-between\">\n                <Label htmlFor=\"isDiabetic\">Are you diabetic?</Label>\n                <Switch\n                  id=\"isDiabetic\"\n                  checked={form.isDiabetic}\n                  onCheckedChange={(checked) => setForm(prev => ({ ...prev, isDiabetic: checked }))}\n                  disabled={isCreating}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <Label htmlFor=\"isOnBloodThinner\">Taking blood thinner medication?</Label>\n                <Switch\n                  id=\"isOnBloodThinner\"\n                  checked={form.isOnBloodThinner}\n                  onCheckedChange={(checked) => setForm(prev => ({ ...prev, isOnBloodThinner: checked }))}\n                  disabled={isCreating}\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"flex items-center justify-between\">\n                <Label htmlFor=\"isOnAntibiotics\">Taking antibiotics?</Label>\n                <Switch\n                  id=\"isOnAntibiotics\"\n                  checked={form.isOnAntibiotics}\n                  onCheckedChange={(checked) => setForm(prev => ({ ...prev, isOnAntibiotics: checked }))}\n                  disabled={isCreating}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <Label htmlFor=\"isOnThyroidMedication\">Taking thyroid medication?</Label>\n                <Switch\n                  id=\"isOnThyroidMedication\"\n                  checked={form.isOnThyroidMedication}\n                  onCheckedChange={(checked) => setForm(prev => ({ ...prev, isOnThyroidMedication: checked }))}\n                  disabled={isCreating}\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"flex items-center justify-between\">\n                <Label htmlFor=\"isOnKidneyTreatment\">Taking kidney treatment?</Label>\n                <Switch\n                  id=\"isOnKidneyTreatment\"\n                  checked={form.isOnKidneyTreatment}\n                  onCheckedChange={(checked) => setForm(prev => ({ ...prev, isOnKidneyTreatment: checked }))}\n                  disabled={isCreating}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <Label htmlFor=\"isOnLiverTreatment\">Taking liver treatment?</Label>\n                <Switch\n                  id=\"isOnLiverTreatment\"\n                  checked={form.isOnLiverTreatment}\n                  onCheckedChange={(checked) => setForm(prev => ({ ...prev, isOnLiverTreatment: checked }))}\n                  disabled={isCreating}\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"flex items-center justify-between\">\n                <Label htmlFor=\"isOnCholesterolMedication\">Taking cholesterol medication?</Label>\n                <Switch\n                  id=\"isOnCholesterolMedication\"\n                  checked={form.isOnCholesterolMedication}\n                  onCheckedChange={(checked) => setForm(prev => ({ ...prev, isOnCholesterolMedication: checked }))}\n                  disabled={isCreating}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <Label htmlFor=\"isOnCortisone\">Taking cortisone?</Label>\n                <Switch\n                  id=\"isOnCortisone\"\n                  checked={form.isOnCortisone}\n                  onCheckedChange={(checked) => setForm(prev => ({ ...prev, isOnCortisone: checked }))}\n                  disabled={isCreating}\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"flex items-center justify-between\">\n                <Label htmlFor=\"hadContrastScan\">Had contrast scan/radioactive material (48h)?</Label>\n                <Switch\n                  id=\"hadContrastScan\"\n                  checked={form.hadContrastScan}\n                  onCheckedChange={(checked) => setForm(prev => ({ ...prev, hadContrastScan: checked }))}\n                  disabled={isCreating}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <Label htmlFor=\"hadSurgeries\">Had surgeries?</Label>\n                <Switch\n                  id=\"hadSurgeries\"\n                  checked={form.hadSurgeries}\n                  onCheckedChange={(checked) => setForm(prev => ({ ...prev, hadSurgeries: checked }))}\n                  disabled={isCreating}\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"flex items-center justify-between\">\n                <Label htmlFor=\"hadBloodTransfusion\">Had blood transfusion before?</Label>\n                <Switch\n                  id=\"hadBloodTransfusion\"\n                  checked={form.hadBloodTransfusion}\n                  onCheckedChange={(checked) => setForm(prev => ({ ...prev, hadBloodTransfusion: checked }))}\n                  disabled={isCreating}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <Label htmlFor=\"hadChemoRadiotherapy\">Had chemotherapy/radiotherapy?</Label>\n                <Switch\n                  id=\"hadChemoRadiotherapy\"\n                  checked={form.hadChemoRadiotherapy}\n                  onCheckedChange={(checked) => setForm(prev => ({ ...prev, hadChemoRadiotherapy: checked }))}\n                  disabled={isCreating}\n                />\n              </div>\n            </div>\n\n            {form.hadBloodTransfusion && (\n              <div>\n                <Label htmlFor=\"bloodTransfusionDate\">Date of blood transfusion</Label>\n                <Input\n                  id=\"bloodTransfusionDate\"\n                  type=\"date\"\n                  value={form.bloodTransfusionDate}\n                  onChange={(e) => setForm(prev => ({ ...prev, bloodTransfusionDate: e.target.value }))}\n                  disabled={isCreating}\n                />\n              </div>\n            )}\n          </div>\n\n          <Separator />\n\n          {/* Female-specific Questions */}\n          {form.gender === 'female' && (\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium\">Female-specific Questions</h3>\n              \n              <div>\n                <Label htmlFor=\"lastMenstrualPeriod\">Date of first day of last period</Label>\n                <Input\n                  id=\"lastMenstrualPeriod\"\n                  type=\"date\"\n                  value={form.lastMenstrualPeriod}\n                  onChange={(e) => setForm(prev => ({ ...prev, lastMenstrualPeriod: e.target.value }))}\n                  disabled={isCreating}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <Label htmlFor=\"isPregnant\">Are you pregnant?</Label>\n                <Switch\n                  id=\"isPregnant\"\n                  checked={form.isPregnant}\n                  onCheckedChange={(checked) => setForm(prev => ({ ...prev, isPregnant: checked }))}\n                  disabled={isCreating}\n                />\n              </div>\n            </div>\n          )}\n\n          <Separator />\n\n          {/* Required Tests */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium\">Required Tests</h3>\n            \n            <div>\n              <Label htmlFor=\"requiredTests\">Required tests</Label>\n              <Textarea\n                id=\"requiredTests\"\n                value={form.requiredTests}\n                onChange={(e) => setForm(prev => ({ ...prev, requiredTests: e.target.value }))}\n                placeholder=\"List required tests...\"\n                rows={3}\n                disabled={isCreating}\n              />\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Medications */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-medium\">Medications</h3>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={addMedication}\n                disabled={isCreating}\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Medication\n              </Button>\n            </div>\n\n            {medications.map((medication, index) => (\n              <div key={index} className=\"border rounded-lg p-4 space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <h4 className=\"font-medium\">Medication {index + 1}</h4>\n                  {medications.length > 1 && (\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removeMedication(index)}\n                      disabled={isCreating}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  )}\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label>Medication name</Label>\n                    <Input\n                      value={medication.name}\n                      onChange={(e) => updateMedication(index, 'name', e.target.value)}\n                      placeholder=\"Medication name\"\n                      disabled={isCreating}\n                    />\n                  </div>\n\n                  <div>\n                    <Label>Type (Insulin/Pills)</Label>\n                    <Select \n                      value={medication.type} \n                      onValueChange={(value) => updateMedication(index, 'type', value)}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"insulin\">Insulin</SelectItem>\n                        <SelectItem value=\"pills\">Pills</SelectItem>\n                        <SelectItem value=\"injection\">Injection</SelectItem>\n                        <SelectItem value=\"other\">Other</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label>Dose</Label>\n                    <Input\n                      value={medication.dose}\n                      onChange={(e) => updateMedication(index, 'dose', e.target.value)}\n                      placeholder=\"Dose\"\n                      disabled={isCreating}\n                    />\n                  </div>\n\n                  <div>\n                    <Label>Duration</Label>\n                    <Input\n                      value={medication.duration}\n                      onChange={(e) => updateMedication(index, 'duration', e.target.value)}\n                      placeholder=\"Duration\"\n                      disabled={isCreating}\n                    />\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          <Separator />\n\n          {/* Iron and Vitamins */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium\">Iron and Vitamins</h3>\n            \n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"isOnIronVitamins\">Are you taking iron or vitamins?</Label>\n              <Switch\n                id=\"isOnIronVitamins\"\n                checked={form.isOnIronVitamins}\n                onCheckedChange={(checked) => setForm(prev => ({ ...prev, isOnIronVitamins: checked }))}\n                disabled={isCreating}\n              />\n            </div>\n\n            {form.isOnIronVitamins && (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"ironVitaminsDose\">Dose</Label>\n                  <Input\n                    id=\"ironVitaminsDose\"\n                    value={form.ironVitaminsDose}\n                    onChange={(e) => setForm(prev => ({ ...prev, ironVitaminsDose: e.target.value }))}\n                    placeholder=\"Dose\"\n                    disabled={isCreating}\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"ironVitaminsDuration\">Duration</Label>\n                  <Input\n                    id=\"ironVitaminsDuration\"\n                    value={form.ironVitaminsDuration}\n                    onChange={(e) => setForm(prev => ({ ...prev, ironVitaminsDuration: e.target.value }))}\n                    placeholder=\"Duration\"\n                    disabled={isCreating}\n                  />\n                </div>\n              </div>\n            )}\n          </div>\n\n          <div className=\"flex justify-end space-x-4 pt-6\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={() => {\n                console.log('Clearing patient registration form...');\n                clearForm();\n              }}\n              disabled={isCreating}\n            >\n              Clear All\n            </Button>\n            <Button type=\"submit\" disabled={isCreating}>\n              {isCreating && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n              Register Patient\n            </Button>\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":27162},"client/src/components/results/results-entry.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Loader2, ClipboardCheck, AlertTriangle } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface ResultParameter {\n  id: string;\n  name: string;\n  value: string;\n  unit: string;\n  referenceRange: string;\n  flag: string;\n}\n\nexport function ResultsEntry() {\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  \n  const [form, setForm] = useState({\n    sampleId: '',\n    testType: '',\n    results: [] as ResultParameter[],\n    comments: '',\n    technician: '',\n  });\n\n  const [currentResult, setCurrentResult] = useState({\n    parameter: '',\n    value: '',\n    unit: '',\n    referenceRange: '',\n    flag: 'N',\n  });\n\n  const addResult = () => {\n    if (currentResult.parameter && currentResult.value) {\n      const newResult: ResultParameter = {\n        id: Date.now().toString(),\n        name: currentResult.parameter,\n        value: currentResult.value,\n        unit: currentResult.unit,\n        referenceRange: currentResult.referenceRange,\n        flag: currentResult.flag,\n      };\n      \n      setForm(prev => ({\n        ...prev,\n        results: [...prev.results, newResult]\n      }));\n      \n      setCurrentResult({\n        parameter: '',\n        value: '',\n        unit: '',\n        referenceRange: '',\n        flag: 'N',\n      });\n    }\n  };\n\n  const removeResult = (id: string) => {\n    setForm(prev => ({\n      ...prev,\n      results: prev.results.filter(r => r.id !== id)\n    }));\n  };\n\n  const getFlagColor = (flag: string) => {\n    switch (flag) {\n      case 'H': return 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400';\n      case 'L': return 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400';\n      case 'A': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400';\n      default: return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400';\n    }\n  };\n\n  const getFlagLabel = (flag: string) => {\n    switch (flag) {\n      case 'H': return 'High';\n      case 'L': return 'Low';\n      case 'A': return 'Abnormal';\n      default: return 'Normal';\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n    \n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      toast({\n        title: \"Results saved successfully\",\n        description: `Results for sample ${form.sampleId} have been recorded.`,\n      });\n      \n      // Reset form\n      setForm({\n        sampleId: '',\n        testType: '',\n        results: [],\n        comments: '',\n        technician: '',\n      });\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to save results\",\n        description: \"Please try again or contact support.\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <ClipboardCheck className=\"h-5 w-5\" />\n          Test Results Entry\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Sample Information */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"sampleId\">Sample ID *</Label>\n              <Input\n                id=\"sampleId\"\n                required\n                value={form.sampleId}\n                onChange={(e) => setForm(prev => ({ ...prev, sampleId: e.target.value }))}\n                placeholder=\"Enter sample ID\"\n                className=\"sample-id\"\n                disabled={isSubmitting}\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"testType\">Test Type *</Label>\n              <Select value={form.testType} onValueChange={(value) => setForm(prev => ({ ...prev, testType: value }))}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select test type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"cbc\">Complete Blood Count</SelectItem>\n                  <SelectItem value=\"bmp\">Basic Metabolic Panel</SelectItem>\n                  <SelectItem value=\"lipid\">Lipid Panel</SelectItem>\n                  <SelectItem value=\"liver\">Liver Function Tests</SelectItem>\n                  <SelectItem value=\"thyroid\">Thyroid Function Tests</SelectItem>\n                  <SelectItem value=\"glucose\">Glucose Tolerance Test</SelectItem>\n                  <SelectItem value=\"urinalysis\">Urinalysis</SelectItem>\n                  <SelectItem value=\"culture\">Culture & Sensitivity</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Result Entry */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium\">Test Parameters</h3>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4 p-4 border rounded-lg bg-gray-50 dark:bg-gray-800\">\n              <div>\n                <Label htmlFor=\"parameter\">Parameter</Label>\n                <Input\n                  id=\"parameter\"\n                  value={currentResult.parameter}\n                  onChange={(e) => setCurrentResult(prev => ({ ...prev, parameter: e.target.value }))}\n                  placeholder=\"Parameter name\"\n                  disabled={isSubmitting}\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"value\">Value</Label>\n                <Input\n                  id=\"value\"\n                  value={currentResult.value}\n                  onChange={(e) => setCurrentResult(prev => ({ ...prev, value: e.target.value }))}\n                  placeholder=\"Result value\"\n                  className=\"test-result\"\n                  disabled={isSubmitting}\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"unit\">Unit</Label>\n                <Input\n                  id=\"unit\"\n                  value={currentResult.unit}\n                  onChange={(e) => setCurrentResult(prev => ({ ...prev, unit: e.target.value }))}\n                  placeholder=\"Unit\"\n                  disabled={isSubmitting}\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"referenceRange\">Reference Range</Label>\n                <Input\n                  id=\"referenceRange\"\n                  value={currentResult.referenceRange}\n                  onChange={(e) => setCurrentResult(prev => ({ ...prev, referenceRange: e.target.value }))}\n                  placeholder=\"Normal range\"\n                  disabled={isSubmitting}\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"flag\">Flag</Label>\n                <Select value={currentResult.flag} onValueChange={(value) => setCurrentResult(prev => ({ ...prev, flag: value }))}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"N\">Normal</SelectItem>\n                    <SelectItem value=\"H\">High</SelectItem>\n                    <SelectItem value=\"L\">Low</SelectItem>\n                    <SelectItem value=\"A\">Abnormal</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"md:col-span-5 flex justify-end\">\n                <Button type=\"button\" onClick={addResult} disabled={isSubmitting}>\n                  Add Parameter\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          {/* Results Display */}\n          {form.results.length > 0 && (\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium\">Entered Results</h3>\n              <div className=\"border rounded-lg overflow-hidden\">\n                <table className=\"w-full\">\n                  <thead className=\"bg-gray-50 dark:bg-gray-700\">\n                    <tr>\n                      <th className=\"px-4 py-2 text-left text-sm font-medium\">Parameter</th>\n                      <th className=\"px-4 py-2 text-left text-sm font-medium\">Value</th>\n                      <th className=\"px-4 py-2 text-left text-sm font-medium\">Unit</th>\n                      <th className=\"px-4 py-2 text-left text-sm font-medium\">Reference Range</th>\n                      <th className=\"px-4 py-2 text-left text-sm font-medium\">Flag</th>\n                      <th className=\"px-4 py-2 text-left text-sm font-medium\">Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"divide-y divide-gray-200 dark:divide-gray-700\">\n                    {form.results.map((result) => (\n                      <tr key={result.id}>\n                        <td className=\"px-4 py-2 text-sm font-medium\">{result.name}</td>\n                        <td className=\"px-4 py-2 text-sm test-result\">{result.value}</td>\n                        <td className=\"px-4 py-2 text-sm\">{result.unit}</td>\n                        <td className=\"px-4 py-2 text-sm\">{result.referenceRange}</td>\n                        <td className=\"px-4 py-2\">\n                          <Badge className={getFlagColor(result.flag)}>\n                            {getFlagLabel(result.flag)}\n                          </Badge>\n                        </td>\n                        <td className=\"px-4 py-2\">\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => removeResult(result.id)}\n                            disabled={isSubmitting}\n                          >\n                            Remove\n                          </Button>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          )}\n\n          {/* Additional Information */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"technician\">Technician</Label>\n              <Input\n                id=\"technician\"\n                value={form.technician}\n                onChange={(e) => setForm(prev => ({ ...prev, technician: e.target.value }))}\n                placeholder=\"Technician name\"\n                disabled={isSubmitting}\n              />\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"comments\">Comments</Label>\n            <Textarea\n              id=\"comments\"\n              value={form.comments}\n              onChange={(e) => setForm(prev => ({ ...prev, comments: e.target.value }))}\n              placeholder=\"Additional comments or observations\"\n              rows={3}\n              disabled={isSubmitting}\n            />\n          </div>\n\n          {/* Critical Values Alert */}\n          {form.results.some(r => r.flag === 'H' || r.flag === 'A') && (\n            <div className=\"flex items-center gap-2 p-3 bg-red-50 border border-red-200 rounded-lg dark:bg-red-900/20 dark:border-red-700\">\n              <AlertTriangle className=\"h-5 w-5 text-red-600 dark:text-red-400\" />\n              <span className=\"text-sm font-medium text-red-800 dark:text-red-400\">\n                Critical values detected. Please verify results and notify physician immediately.\n              </span>\n            </div>\n          )}\n\n          <div className=\"flex justify-end space-x-4\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={() => setForm({\n                sampleId: '',\n                testType: '',\n                results: [],\n                comments: '',\n                technician: '',\n              })}\n              disabled={isSubmitting}\n            >\n              Clear\n            </Button>\n            <Button type=\"submit\" disabled={isSubmitting || form.results.length === 0}>\n              {isSubmitting && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n              Save Results\n            </Button>\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":12827},"client/src/components/sampling/sample-form.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useSamples } from '@/hooks/use-samples';\nimport { usePatients } from '@/hooks/use-patients';\nimport { useAuthStore } from '@/store/auth-store';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Loader2, TestTube, Search } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { SAMPLE_STATUSES, TEST_PRIORITIES } from '@/lib/constants';\n\nexport function SampleForm() {\n  const { createSample, isCreating } = useSamples();\n  const { searchPatients } = usePatients();\n  const { user } = useAuthStore();\n  const { toast } = useToast();\n  \n  const [form, setForm] = useState({\n    sampleId: '',\n    patientId: '',\n    sampleType: '',\n    containerType: '',\n    volume: '',\n    unit: 'ml',\n    collectionDateTime: '',\n    priority: 'routine',\n    comments: '',\n    storageLocation: '',\n    barcode: '',\n  });\n\n  const [patientSearch, setPatientSearch] = useState('');\n  const [searchResults, setSearchResults] = useState<any[]>([]);\n  const [selectedPatient, setSelectedPatient] = useState<any>(null);\n\n  const generateSampleId = () => {\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    const sequence = String(Math.floor(Math.random() * 1000)).padStart(3, '0');\n    return `LAB-${year}${month}${day}-${sequence}`;\n  };\n\n  const generateBarcode = () => {\n    const timestamp = Date.now().toString();\n    return `BC${timestamp.slice(-8)}`;\n  };\n\n  useEffect(() => {\n    if (!form.sampleId) {\n      setForm(prev => ({ ...prev, sampleId: generateSampleId() }));\n    }\n    if (!form.barcode) {\n      setForm(prev => ({ ...prev, barcode: generateBarcode() }));\n    }\n  }, []);\n\n  const handlePatientSearch = async () => {\n    if (patientSearch.trim()) {\n      try {\n        const results = await searchPatients(patientSearch);\n        setSearchResults(results);\n      } catch (error) {\n        toast({\n          variant: \"destructive\",\n          title: \"Search failed\",\n          description: \"Could not search for patients\",\n        });\n      }\n    }\n  };\n\n  const selectPatient = (patient: any) => {\n    setSelectedPatient(patient);\n    setForm(prev => ({ ...prev, patientId: patient.id }));\n    setSearchResults([]);\n    setPatientSearch(`${patient.firstName} ${patient.lastName} (${patient.patientId})`);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!form.patientId) {\n      toast({\n        variant: \"destructive\",\n        title: \"Patient required\",\n        description: \"Please select a patient before creating the sample\",\n      });\n      return;\n    }\n\n    const sampleData = {\n      ...form,\n      collectedBy: user?.id || '',\n      collectionDateTime: new Date(form.collectionDateTime),\n      receivedDateTime: new Date(),\n      volume: form.volume ? parseFloat(form.volume) : null,\n      status: 'received' as const,\n      priority: form.priority as 'routine' | 'urgent' | 'stat' | 'critical',\n    };\n\n    createSample(sampleData, {\n      onSuccess: () => {\n        setForm({\n          sampleId: generateSampleId(),\n          patientId: '',\n          sampleType: '',\n          containerType: '',\n          volume: '',\n          unit: 'ml',\n          collectionDateTime: '',\n          priority: 'routine',\n          comments: '',\n          storageLocation: '',\n          barcode: generateBarcode(),\n        });\n        setSelectedPatient(null);\n        setPatientSearch('');\n        toast({\n          title: \"Sample created successfully\",\n          description: `Sample ${form.sampleId} has been registered.`,\n        });\n      },\n    });\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <TestTube className=\"h-5 w-5\" />\n          Sample Collection\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Sample Information */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"sampleId\">Sample ID</Label>\n              <Input\n                id=\"sampleId\"\n                value={form.sampleId}\n                onChange={(e) => setForm(prev => ({ ...prev, sampleId: e.target.value }))}\n                className=\"sample-id\"\n                disabled={isCreating}\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"barcode\">Barcode</Label>\n              <Input\n                id=\"barcode\"\n                value={form.barcode}\n                onChange={(e) => setForm(prev => ({ ...prev, barcode: e.target.value }))}\n                className=\"sample-id\"\n                disabled={isCreating}\n              />\n            </div>\n          </div>\n\n          {/* Patient Selection */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"patientSearch\">Patient *</Label>\n            <div className=\"flex gap-2\">\n              <Input\n                id=\"patientSearch\"\n                value={patientSearch}\n                onChange={(e) => setPatientSearch(e.target.value)}\n                placeholder=\"Search by name or patient ID\"\n                disabled={isCreating}\n              />\n              <Button type=\"button\" onClick={handlePatientSearch} disabled={isCreating} variant=\"outline\">\n                <Search className=\"h-4 w-4\" />\n              </Button>\n            </div>\n            \n            {searchResults.length > 0 && (\n              <div className=\"border rounded-md max-h-40 overflow-y-auto\">\n                {searchResults.map((patient) => (\n                  <div\n                    key={patient.id}\n                    className=\"p-2 hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer\"\n                    onClick={() => selectPatient(patient)}\n                  >\n                    <div className=\"font-medium\">{patient.firstName} {patient.lastName}</div>\n                    <div className=\"text-sm text-gray-500\">ID: {patient.patientId}</div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Sample Details */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"sampleType\">Sample Type *</Label>\n              <Select value={form.sampleType} onValueChange={(value) => setForm(prev => ({ ...prev, sampleType: value }))}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select sample type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"blood\">Blood</SelectItem>\n                  <SelectItem value=\"urine\">Urine</SelectItem>\n                  <SelectItem value=\"serum\">Serum</SelectItem>\n                  <SelectItem value=\"plasma\">Plasma</SelectItem>\n                  <SelectItem value=\"csf\">Cerebrospinal Fluid</SelectItem>\n                  <SelectItem value=\"tissue\">Tissue</SelectItem>\n                  <SelectItem value=\"swab\">Swab</SelectItem>\n                  <SelectItem value=\"other\">Other</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"containerType\">Container Type</Label>\n              <Select value={form.containerType} onValueChange={(value) => setForm(prev => ({ ...prev, containerType: value }))}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select container\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"tube-edta\">EDTA Tube</SelectItem>\n                  <SelectItem value=\"tube-serum\">Serum Tube</SelectItem>\n                  <SelectItem value=\"tube-heparin\">Heparin Tube</SelectItem>\n                  <SelectItem value=\"container-sterile\">Sterile Container</SelectItem>\n                  <SelectItem value=\"cup-urine\">Urine Cup</SelectItem>\n                  <SelectItem value=\"other\">Other</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <Label htmlFor=\"volume\">Volume</Label>\n              <Input\n                id=\"volume\"\n                type=\"number\"\n                step=\"0.1\"\n                value={form.volume}\n                onChange={(e) => setForm(prev => ({ ...prev, volume: e.target.value }))}\n                placeholder=\"0.0\"\n                disabled={isCreating}\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"unit\">Unit</Label>\n              <Select value={form.unit} onValueChange={(value) => setForm(prev => ({ ...prev, unit: value }))}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"ml\">ml</SelectItem>\n                  <SelectItem value=\"ul\">μl</SelectItem>\n                  <SelectItem value=\"l\">l</SelectItem>\n                  <SelectItem value=\"g\">g</SelectItem>\n                  <SelectItem value=\"mg\">mg</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"priority\">Priority</Label>\n              <Select value={form.priority} onValueChange={(value) => setForm(prev => ({ ...prev, priority: value }))}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {TEST_PRIORITIES.map((priority) => (\n                    <SelectItem key={priority.value} value={priority.value}>\n                      {priority.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"collectionDateTime\">Collection Date & Time *</Label>\n              <Input\n                id=\"collectionDateTime\"\n                type=\"datetime-local\"\n                required\n                value={form.collectionDateTime}\n                onChange={(e) => setForm(prev => ({ ...prev, collectionDateTime: e.target.value }))}\n                disabled={isCreating}\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"storageLocation\">Storage Location</Label>\n              <Input\n                id=\"storageLocation\"\n                value={form.storageLocation}\n                onChange={(e) => setForm(prev => ({ ...prev, storageLocation: e.target.value }))}\n                placeholder=\"e.g., Refrigerator A, Shelf 2\"\n                disabled={isCreating}\n              />\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"comments\">Comments</Label>\n            <Textarea\n              id=\"comments\"\n              value={form.comments}\n              onChange={(e) => setForm(prev => ({ ...prev, comments: e.target.value }))}\n              placeholder=\"Additional notes about the sample\"\n              rows={3}\n              disabled={isCreating}\n            />\n          </div>\n\n          <div className=\"flex justify-end space-x-4\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={() => {\n                setForm({\n                  sampleId: generateSampleId(),\n                  patientId: '',\n                  sampleType: '',\n                  containerType: '',\n                  volume: '',\n                  unit: 'ml',\n                  collectionDateTime: '',\n                  priority: 'routine',\n                  comments: '',\n                  storageLocation: '',\n                  barcode: generateBarcode(),\n                });\n                setSelectedPatient(null);\n                setPatientSearch('');\n              }}\n              disabled={isCreating}\n            >\n              Clear\n            </Button>\n            <Button type=\"submit\" disabled={isCreating}>\n              {isCreating && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n              Create Sample\n            </Button>\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":12789},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}